<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>future</title>
  
  
  <link href="https://github.com/future1314/atom.xml" rel="self"/>
  
  <link href="https://github.com/future1314/"/>
  <updated>2020-09-11T09:04:25.459Z</updated>
  <id>https://github.com/future1314/</id>
  
  <author>
    <name>future</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>21. 合并两个有序链表</title>
    <link href="https://github.com/future1314/2020/09/11/sp63al/"/>
    <id>https://github.com/future1314/2020/09/11/sp63al/</id>
    <published>2020-09-11T08:27:02.000Z</published>
    <updated>2020-09-11T09:04:25.459Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;合并两个有序链表&lt;br&gt;将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 &lt;br&gt;示例：&lt;br&gt;输入：1-&amp;gt;2-&amp;gt;4,</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>237. 删除链表中的节点</title>
    <link href="https://github.com/future1314/2020/09/11/vr783s/"/>
    <id>https://github.com/future1314/2020/09/11/vr783s/</id>
    <published>2020-09-11T07:33:27.000Z</published>
    <updated>2020-09-11T09:04:25.479Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;删除链表中的节点&lt;br&gt;请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 要被删除的节点 。&lt;br&gt;现有一个链表 – head = [4,5,1,9]，它可以表示为:&lt;br&gt;示例 1：&lt;br&gt;输入：head = [4,5,1,9],</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>算法-todo</title>
    <link href="https://github.com/future1314/2020/09/11/gklcy5/"/>
    <id>https://github.com/future1314/2020/09/11/gklcy5/</id>
    <published>2020-09-11T07:31:26.000Z</published>
    <updated>2020-09-11T09:04:25.483Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>240. 搜索二维矩阵 II</title>
    <link href="https://github.com/future1314/2020/09/11/htcng7/"/>
    <id>https://github.com/future1314/2020/09/11/htcng7/</id>
    <published>2020-09-11T03:35:14.000Z</published>
    <updated>2020-09-11T09:04:25.495Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;编写一个高效的算法来搜索  m x n  矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：&lt;br&gt;每行的元素从左到右升序排列。&lt;br&gt;每列的元素从上到下升序排列。&lt;br&gt;示例:&lt;br&gt;现有矩阵 matrix 如下：&lt;br&gt;[&lt;br&gt; [1,   4,</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>88. 合并两个有序数组</title>
    <link href="https://github.com/future1314/2020/09/11/szqy8n/"/>
    <id>https://github.com/future1314/2020/09/11/szqy8n/</id>
    <published>2020-09-11T03:28:44.000Z</published>
    <updated>2020-09-11T09:04:25.507Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>思维导图</title>
    <link href="https://github.com/future1314/2020/09/07/yogcmu/"/>
    <id>https://github.com/future1314/2020/09/07/yogcmu/</id>
    <published>2020-09-07T14:31:48.000Z</published>
    <updated>2020-09-11T09:04:25.511Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.processon.com/i/5d9497efe4b03d4e28a6a0b2&quot;&gt;https://www.processon.com/i/5d9497efe4b03d4e28a6a0b2&lt;/a&gt;&lt;br&gt;&lt;a</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>雷军与周鸿祎的江湖往事</title>
    <link href="https://github.com/future1314/2020/09/07/sxm775/"/>
    <id>https://github.com/future1314/2020/09/07/sxm775/</id>
    <published>2020-09-07T14:15:27.000Z</published>
    <updated>2020-09-11T09:04:25.639Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;雷军与周鸿祎的江湖往事&lt;br&gt;2019-09-22 15:15&lt;br&gt;&lt;img</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>软件工程师-职业发展路径</title>
    <link href="https://github.com/future1314/2020/09/05/oy20xn/"/>
    <id>https://github.com/future1314/2020/09/05/oy20xn/</id>
    <published>2020-09-04T22:32:50.000Z</published>
    <updated>2020-09-11T09:04:25.687Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;1-关于职业规划&quot;&gt;&lt;a href=&quot;#1-关于职业规划&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="https://github.com/future1314/2020/09/04/isxwy0/"/>
    <id>https://github.com/future1314/2020/09/04/isxwy0/</id>
    <published>2020-09-04T13:45:11.000Z</published>
    <updated>2020-09-11T09:04:25.707Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;状态&quot;&gt;&lt;a href=&quot;#状态&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>锁优化</title>
    <link href="https://github.com/future1314/2020/09/04/xu92ar/"/>
    <id>https://github.com/future1314/2020/09/04/xu92ar/</id>
    <published>2020-09-04T13:34:55.000Z</published>
    <updated>2020-09-11T09:04:25.719Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;垃圾回收会导致上下文切换&quot;&gt;&lt;a href=&quot;#垃圾回收会导致上下文切换&quot; class=&quot;headerlink&quot; title=&quot;垃圾回收会导致上下文切换&quot;&gt;&lt;/a&gt;垃圾回收会导致上下文切换&lt;/h3&gt;&lt;p&gt;很多 &lt;strong&gt;JVM</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>gc 调优</title>
    <link href="https://github.com/future1314/2020/09/04/zgykxe/"/>
    <id>https://github.com/future1314/2020/09/04/zgykxe/</id>
    <published>2020-09-04T13:21:36.000Z</published>
    <updated>2020-09-11T09:04:25.739Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;GC-调优策略&quot;&gt;&lt;a href=&quot;#GC-调优策略&quot; class=&quot;headerlink&quot; title=&quot;GC 调优策略&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#S4gAF&quot;&gt;GC 调优策略&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-降低-Minor-GC-频率&quot;&gt;&lt;a</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>jvm 命令</title>
    <link href="https://github.com/future1314/2020/09/04/dkrt72/"/>
    <id>https://github.com/future1314/2020/09/04/dkrt72/</id>
    <published>2020-09-04T03:59:25.000Z</published>
    <updated>2020-09-11T09:04:25.755Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;jstat&quot;&gt;&lt;a href=&quot;#jstat&quot; class=&quot;headerlink&quot; title=&quot;jstat&quot;&gt;&lt;/a&gt;jstat&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;S1C：年轻代中 From Survivor 的容量（单位</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>常用的数据结构</title>
    <link href="https://github.com/future1314/2020/09/04/csa1em/"/>
    <id>https://github.com/future1314/2020/09/04/csa1em/</id>
    <published>2020-09-04T03:40:10.000Z</published>
    <updated>2020-09-11T09:04:25.783Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;跳跃表&quot;&gt;&lt;a href=&quot;#跳跃表&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>jvm参数</title>
    <link href="https://github.com/future1314/2020/09/04/gc91c3/"/>
    <id>https://github.com/future1314/2020/09/04/gc91c3/</id>
    <published>2020-09-04T03:15:52.000Z</published>
    <updated>2020-09-11T09:04:25.791Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;-XX:+DoEscapeAnalysis 开启逃逸分析（jdk1.8 默认开启，其它版本未测试）&lt;br&gt;-XX:-DoEscapeAnalysis 关闭逃逸分析&lt;br&gt;-XX:+EliminateLocks 开启锁消除（jdk1.8</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>StringBuffer</title>
    <link href="https://github.com/future1314/2020/09/04/gaqcd1/"/>
    <id>https://github.com/future1314/2020/09/04/gaqcd1/</id>
    <published>2020-09-04T03:12:32.000Z</published>
    <updated>2020-09-11T09:04:25.795Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;由于 StringBuffer 中的 append 方法被 Synchronized</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>类</title>
    <link href="https://github.com/future1314/2020/09/04/we5szc/"/>
    <id>https://github.com/future1314/2020/09/04/we5szc/</id>
    <published>2020-09-04T02:57:30.000Z</published>
    <updated>2020-09-11T09:04:25.807Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;类编译，加载，链接，初始化。&lt;/p&gt;
&lt;h3 id=&quot;类连接&quot;&gt;&lt;a href=&quot;#类连接&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>mmap零拷贝</title>
    <link href="https://github.com/future1314/2020/09/04/ailstm/"/>
    <id>https://github.com/future1314/2020/09/04/ailstm/</id>
    <published>2020-09-04T02:43:51.000Z</published>
    <updated>2020-09-11T09:04:25.811Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;DirectBuffer 只优化了用户空间内部的拷贝。&lt;br&gt;MappedByteBuffer，跟 DirectBuffer 不同的是，MappedByteBuffer</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>I/O操作</title>
    <link href="https://github.com/future1314/2020/09/03/rbw833/"/>
    <id>https://github.com/future1314/2020/09/03/rbw833/</id>
    <published>2020-09-03T14:30:26.000Z</published>
    <updated>2020-09-11T09:04:25.839Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;I/O 操作分为磁盘 I/O 操作和网络 I/O 操作。&lt;br&gt;InputStream 的 read 操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JVM 会发出 read()系统调用，并通过 read</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>网络I/O模型优化</title>
    <link href="https://github.com/future1314/2020/09/03/xxtar0/"/>
    <id>https://github.com/future1314/2020/09/03/xxtar0/</id>
    <published>2020-09-03T14:20:34.000Z</published>
    <updated>2020-09-11T09:04:25.859Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;网络-I-O-模型优化&quot;&gt;&lt;a href=&quot;#网络-I-O-模型优化&quot; class=&quot;headerlink&quot; title=&quot;网络 I/O 模型优化&quot;&gt;&lt;/a&gt;网络 I/O 模型优化&lt;/h2&gt;&lt;h3 id=&quot;1-阻塞式-I-O&quot;&gt;&lt;a</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>线程数大小</title>
    <link href="https://github.com/future1314/2020/09/03/hogz4t/"/>
    <id>https://github.com/future1314/2020/09/03/hogz4t/</id>
    <published>2020-09-03T13:46:51.000Z</published>
    <updated>2020-09-11T09:04:25.875Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;一般多线程执行的任务类型可以分为&lt;strong&gt;CPU 密集型和 I/O 密集型&lt;/strong&gt;，根据不同的任务类型，我们计算线程数的方法也不一样。&lt;br&gt;&lt;strong&gt;CPU 密集型任务**&lt;/strong&gt;：&lt;strong&gt;这种任务消耗的主要是 CPU</summary>
        
      
    
    
    
    
  </entry>
  
</feed>

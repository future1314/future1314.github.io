<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>todo 系列</title>
      <link href="/2021/12/03/gruhk2/"/>
      <url>/2021/12/03/gruhk2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==%E2%88%A3=2247486570&idx=1&sn=25afad26c7986aaaf32e0be8de2fc334&chksm=e8c3fb9edfb4728831bd29cbc6b9805baea8b2670401cf54f21f0675c6026811bea511dac811&scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==∣=2247486570&amp;idx=1&amp;sn=25afad26c7986aaaf32e0be8de2fc334&amp;chksm=e8c3fb9edfb4728831bd29cbc6b9805baea8b2670401cf54f21f0675c6026811bea511dac811&amp;scene=21#wechat_redirect</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==%E2%88%A3=2247486570&idx=1&sn=25afad26c7986aaaf32e0be8de2fc334&chksm=e8c3fb9edfb4728831bd29cbc6b9805baea8b2670401cf54f21f0675c6026811bea511dac811&scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==∣=2247486570&amp;idx=1&amp;sn=25afad26c7986aaaf32e0be8de2fc334&amp;chksm=e8c3fb9edfb4728831bd29cbc6b9805baea8b2670401cf54f21f0675c6026811bea511dac811&amp;scene=21#wechat_redirect</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>yy-14.1</title>
      <link href="/2021/09/22/kckkzw/"/>
      <url>/2021/09/22/kckkzw/</url>
      
        <content type="html"><![CDATA[<p>美文插画集：我希望有这么一个人，不嫌弃我的坏脾气，<br>不嫌弃我的坏习惯，不嫌弃我的家境怎样，始终站在我身边，一不小心就白头到老了。</p><p>人一简单就快乐，一世故就变老。保持一颗年轻的心，做个简单的人，<br>享受阳光和温暖。生活就应当如此。</p><p>真的很害怕，有一天会有另外一个人出现，取代了我在你心中的位置。</p><p>有没有试过回过头去看你跟一个人的聊天记录，从一开始到现在。<br>看着看着就笑了，笑着笑着就哭……一个人，从陌生走近你，然后再陌生。</p><p>我们这一生，注定有很多偶遇，偶遇一件事，偶遇某个人，让我们的生<br>活多了许多曲折。不管怎样，总有那么几件事，让你念念不忘，总有那<br>么一个人，让你陡生叹惜。错过的，就当是路过吧，遗忘是彼此最好的<br>怀念。一路走来，偶遇的星光，让我们有遗憾，亦有温暖。</p><p>男人只有穷一次，才知道哪个女人最爱你。 女人只有丑一次，才知道<br>哪个男人不会离开你。 人只有落魄一次，才知道谁最真谁最在乎你。<br>陪伴，不是你有钱我才追随。 珍惜，不是你漂亮我才关注。 时间留<br>下的，不是财富，不是美丽，是真诚。</p><p>只有先让时间有意义，时间才会让你的生命有价值。</p><p>【树的忠告】① 站，要挺拔、自豪；② 观点，要敢于独树一帜；<br>③ 行，要永不忘根；④ 日常，要摄取充足水分；<br>⑤ 请接受你的自然美；⑥ 请享受眼前风景。</p><p>我从不喜欢让别人看见我的眼泪，我宁可让别人觉得我快乐的没心没<br>肺，也不愿让自己看起来委屈可怜。</p><p>一个人爱不爱你，在不在意你，你是感觉得到的。不要骗自己，不要勉强自己。</p><p>女人累了回家撒撒娇，男人累了回家唯有撒泡尿！ 男人这辈子挺难的：<br>1,找个漂亮女人吧，太操心， 2 找个不漂亮的吧，又不甘心；<br>3 光顾事业了，人家说你没责任感， 4 光顾家了，人家又说你没本事；<br>5 专一点吧，人家说你不成熟； 6 花心点吧，人家说你是禽兽；<br>7 有钱，说你是坏人， 8 没有钱，人家骂你窝囊废；<br>9 自己奋斗吧，等有钱了女友也老了，<br>10 让女人养吧，不如自宫练葵花宝典算了。<br>11 不去应酬，怕被老板废了，<br>12 去应酬吧，怕被老婆废了。<br>13 哎！这年月做男人真难。<br>14 女人可以等嫁，俺们等啥呀？<br>15 女人还有个三八节，俺们有啥呀？<br>16 男人累—- 所以才会去敲背，<br>17 男人愁—- 所以才会去洗头，<br>18 男人苦—- 所以经常才去赌， 希望大家能多体谅男人！<br>男人这辈子挺难的：<br>1 帅点吧，太抢手，<br>2 不帅吧，拿不出手，<br>3 活泼点吧，说你太油，<br>4 不出声吧，说你太闷；<br>5 穿西装吧，说你太严肃，<br>6 穿随便一点吧，说你乡吧佬；<br>7 会挣钱吧，怕你包二奶，<br>8 不挣钱吧，又怕孩子断奶；<br>9 结婚吧，怕自己后悔，<br>10 不结婚吧，怕她后悔；<br>11 要个孩子吧，怕出来没钱养，<br>12 不要孩子吧，怕老了没人养。<br>三十岁左右正在打拼事业的男人就像个搬砖工人，他抱着砖，就没法抱你；<br>他放下砖，就没法养你。 —-献给所有正在不断努力，劳动，创业，承受着所有压力的好男人们 ！<br>男人这辈子挺难的： 有同感的爷们赞一下！ —-有同情心的女人们也赞一下！</p><p>看起来毫不在乎，其实你不知道我忍住了多少次想要找你的冲动。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>yy-14</title>
      <link href="/2021/09/22/fh5lku/"/>
      <url>/2021/09/22/fh5lku/</url>
      
        <content type="html"><![CDATA[<p>很多的感情，都因为一厢情愿，最后连朋友都当不成了。<br>一些本来很好的友情，最后却因为对方的一句喜欢你，<br>如果你没有反应，这一段友情似乎也难以维持下去了。<br>表白了之后不是成了男女朋友，要不就连朋友都当不成了。<br>然而你可能永远都不甘心只是朋友。</p><p>爱的传承：娶一个美女做妻子这只能看到一个男人的本能<br>，帮助自己的妻子变得越来越美丽这才能看出一个男人的本事<br>；嫁给一个成功的男人最多只能证明这个女人找到了宝藏，<br>帮助自己的男人变得越来越成功却能够证明这个女人本身就是宝藏。<br>好的婚姻是通过造就对方来成就自己，<br>不好的婚姻是通过消耗对方来满足自己。<br>＂——爱，会让彼此更加优秀！中国第一对婆媳首席。</p><p>【如何让自己进步更快】1、 永远不说不可能。<br>2、凡事第一反应找方法，不是找借口。3、养成记录习惯，不太依赖脑袋。<br>4、每天出门照镜子，给自己自信的微笑。5、每天自我反省。<br>6、用心倾听，不打断别人的话，作个倾听高手。7、节俭定期存钱。<br>8、遵守诚信，说到做到。9、时刻微笑待人处事。</p><p>把买十件衣服的钱拿来买一件衣服，你的衣柜就经典了、 把做十件事的精力拿来做一件事<br>，你的事业就经典了、你把零乱复杂的情感聚集在一个值得聚焦的人身上，你的爱情就经典了<br>…生活的现实告诉女人：你若把自己经营成女皇，自然吸引来帝王，你若把自己经营成公主，<br>自然吸引到王子，你若把自己经营成美女，自然吸引来英雄，你若把自己经营成妖精，<br>自然吸引来流氓！你把自己经营到什么层面，就能吸引到什么层面的另一半！<br>你若盛开，蝴蝶自来、你若精彩，老天自有安排！</p><p>有些事，不是不在意，而是在意了又能怎样。</p><p>不要让那个喜欢你的人，撕心裂肺地为你哭那么一次。因为，你能把她伤害到那个样子的机会，<br>只有一次。那一次以后，你就从不可或缺的人，变成可有可无的人了。即使，她还爱你，<br>可是，总有一些，真的东西改变了！</p><p>没有哪种爱情，需要你放弃尊严作践自己，要你去受罪吃苦。爱情或许会让你不知所措，<br>会让你嫉妒生气，会让你伤心流泪。但它最终是温暖的，能给你愉悦，能给你安全感。<br>如果不是这样，那要么爱错人，要么用错方法。与其受罪，还不如单身。<br>没有你想要的拥抱，那就先学会一个人坚强吧。</p><p>当我们懂得珍惜平凡的幸福时，就已经成了人生的赢家。</p><p>恋爱潜规则：婚姻的难处在于我们是和对方的优点谈恋爱，<br>却要和对方的缺点生活在一起。所以，聪明的男人说一半，<br>留一半，而聪明的女人睁一只眼，闭一只眼！</p><p>有时候，一个人想要的只是一只可握的手和一颗理解的心。</p><p>其实你是幸福的：1.大早被闹钟吵醒，说明还活着; 2.不得不从被窝里爬起来上班，说明没有失业； 3.收到一些短信，搓搓麻将吃饭聚聚，说明还有朋友想咱； 4.上司的话十分刺耳，说明老板在关注我； 5.衣服越来越紧，说明吃得还算营养； 6.很想休息但没批准，说明还有一定位置离不开你</p><p>珍惜现在所拥有的一切，感谢上天！感恩爸妈！</p><p>一批成功的美国人 50 岁接受采访时给年轻人的人生忠告中说得最多的三句话：<br>1）不要被世俗教条蒙蔽，追随你的心和梦想；<br>2）关注你的家庭和你爱的人；<br>3）享受人生体验和珍惜快乐时光。</p><p>我喜欢在伤心的时候听伤心的歌，喜欢在开心的时候和在乎的人分享。<br>我常常口是心非，想拒绝却开不了口；朋友挺多，但懂我的不多；<br>不喜欢主动联系别人，但绝不是不在乎。<br>我不喜欢欠别人，也不喜欢别人欠我。我很安静，也可以很疯癫<br>我就是我，不要觉得我没心没肺，我只是对很多事看得很开。</p><p>真正的爱，是接受，不是忍受；是支持，不是支配；<br>是慰问，不是质问；真正的爱，要道谢也要道歉。<br>要体贴，也要体谅。要认错，也好改错；真正的爱，<br>不是彼此凝视，而是共同沿着同一方向望去。<br>其实，爱不是寻找一个完美的人。<br>而是，要学会用完美的眼光，欣赏一个并不完美的人。</p><p>有时候，我们愿意原谅一个人，并不是我们真的愿意原谅他，<br>而是我们不愿意失去他。道歉并不总意味着你是错的，<br>它只是意味着你更珍惜你们之间的关系。</p><p>人生看透不如看淡。人生很多人事，不是不懂，只是无奈。<br>一辈子，就图个心里痛快。那些想不通头疼，<br>想通了心疼的人事，不如淡然视之。<br>我们真实地活着，但不是每个人，<br>每件事都要较真到底.<br>。真实的背后，往往隐藏着一场心痛。开心地活着，<br>如花自然开，自然落，不难过。花非花，雾非雾，看淡者优雅。</p><p>不要在一件别扭的事上纠缠太久。纠缠久了，你会烦，会痛，<br>会厌，会累，会神伤，会心碎。实际上，到最后，你不是跟<br>事过不去，而是跟自己过不去。无论多别扭，你都要学会抽<br>身而退。不要因为去绝美风景的路上偶遇了一条臭水沟，而<br>坏了欣赏美的心境，而耽误了其它的美，要想想你为什么来这里。</p><p>关于婚姻。杨澜对于王菲婚变的一段话：婚姻需要爱情之外的另一种纽带，<br>最强韧的一种不是孩子，不是金钱，而是关于精神的共同成长，<br>那是一种伙伴的关系。在最无助和软弱时候，在最沮丧和落魄的时候，<br>有他托起你的下巴，扳直你的脊梁，命令你坚强， 并陪伴你左右，<br>共同承受命运。那时候，你们之间的感情除了爱，还有肝胆相照的义气，<br>不离不弃的默契，以及铭心刻骨的恩情。</p><p>要记住每一个对你好的人， 因为他们本可以不这么做的。</p><p>是那个人，不说他也懂；不是那个人，说了也没用。是那个人，不解释也没关系；<br>不是那个人，解释也多余。是那个人，不留他也不走；不是那个人，留也留不住。<br>是那个人，不等自然会遇到；不是那个人，原地也会走丢。</p><p>今天的生活是由 3 年前决定的，但是如果你今天还过着和 3 年前一样的生活，<br>3 年后你一样得这样过着。生活不是用来重复，亲爱的，你需要改变，<br>今天就开始改变，从现在开始找到你想要的。</p><p>1 不努力的男人只有两种结果，抽不完的低档烟和干不完的体力活，不努力的女人只有两种结果，穿不完的地摊货和逛不完的菜市场！(学会奋斗)<br>2 不要奢望别人给你经济上的任何帮助，钱对任何人都是不够用的，有一万元的 人想干两万元的事，有 10 万元的人想干 20 万元的事。（ 学会给与）<br>3 朋友帮你是善事，是道义；朋友不帮你也无可厚非，不该心怀怨尤。 （学会理解）<br>4 要知道没有人必须在你需要的时候帮你，只有你自己，所以让自己独立、坚强、快乐、幸福，才是你需要做的，毕竟只有自己必须和你生死与共，<br>息息相关。明白？（学会坚强）<br>5 不要看贫富交朋友，他有亿万家财跟你一毛钱关系都没有，别把自己弄成哈巴狗。他也许一无所有却可以把唯一的馒头分给你。 （学会分辨）<br>6 不要为了经济富有的朋友疏远了精神富有的朋友，慢慢你会明白，经济上富裕的朋友可以带你吃喝玩乐，也可以带给你复杂纷乱的世俗烦恼，<br>精神富有的朋友也许只能带你去田野里，去溪流畔，没有美酒佳肴，没有香槟、咖啡、没有舞池，可是她能陪你一起奔跑、一起笑的像傻子。（学会自重）<br>7 可以相信世上真的有美好坚贞的爱情，不要憧憬那么浪漫的事会发生在你身上，它只属于牛郎织女、梁山伯祝英台、还有外国的罗密欧和朱丽叶。<br>因为他们都没有活很久。而我们是要活很久的。（学会珍惜 ）<br>8 不管你因为什么结婚，只要你有了孩子，你就要爱这个家，不管它多么简陋多么寒冷，你都有义务让它温馨起来，因为你是父母！（学会承担）<br>9 我们的青春眨眼间就没有了，皱纹一条一条的爬到眼角，我们阻止不了岁月破坏我们的容颜，可是我们可以让心在岁月中慢慢磨砺，如蚌中的沙，<br>慢慢的光润起来，等到我们发苍齿摇、步履蹒跚的时候，还可以让珍珠的光泽晕红最后的行程，不是吗？ （学会成长）<br>10 不要执着，人生有很多不如意，世界不会迎合你，地球不是为你转的，所以不要执着于拥有，连我们都只是红尘的过客，生是赤条条的来，<br>死又能带走什么呢？（学会放手）</p><p>这几年，累是一定的。但我相信我的人生不可能就止于此了。我不想长大变成街上一抓一把的庸人，我不想以后为钱发愁，<br>我不想以后每天做的都是不喜欢却必须做的事，我不想成为那种人。我有我的梦想，所以我要努力。只有坚持这阵子，<br>才不会辛苦一辈子。我发誓会努力，我会让自己过得很好。</p><p>走吧，走吧，人总要学着自己长大；走吧，走吧，人生难免经历苦痛挣扎；走吧，走吧，为自己的心找一个家，<br>也曾伤心流泪，也曾黯然心碎，这是爱的代价。</p><p>心理学家认为，判断男女两个人是否适合,应考虑以下 10 个因素。<br> 第一、彼此都是对方的好朋友，不带任何条件，喜欢与对方在一起。<br> 第二、彼此很容易沟通、互相可以很敞开地坦白任何事情，而不必担心被对方怀疑或轻视。<br> 第三、两人在心灵上有共同的理念和价值观，并且对这些观念有清楚的认识与追求。<br> 第四、双方都认为婚姻是一辈子的事，而且双方都坚定地愿意委身在这个长期的婚姻关系中。<br> 第五、当发生冲突或争执的时候可以一起来解决，而不是等以后来发作。<br>第六、相处可以彼此逗趣，常有欢笑，在生活中许多方面都会以幽默相待。<br> 第七、彼此非常了解，并且接纳对方，当知道对方了解了自己的优点和缺点后，仍然确信被他所接纳。<br> 第八、从最了解你、也是你最信任的对方处得到支持的肯定。<br> 第九、有时会有浪漫的感情，但绝大多数的时候，你们的相处是非常满足而且是自由自在的。<br> 第十、有一个非常理性和成熟的交往，并且双方都能感受到，在许多不同的层面上你们是很相配的.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql 客户端</title>
      <link href="/2021/09/15/bi96sb/"/>
      <url>/2021/09/15/bi96sb/</url>
      
        <content type="html"><![CDATA[<p><a href="https://sequelpro.com/download#auto-start">https://sequelpro.com/download#auto-start</a><br><a href="https://sequelpro.com/download#auto-start">https://sequelpro.com/download#auto-start</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jmx 系统监控</title>
      <link href="/2021/08/17/vgafpo/"/>
      <url>/2021/08/17/vgafpo/</url>
      
        <content type="html"><![CDATA[<ul><li><p>在<a href="https://time.geekbang.org/column/article/159487">19 讲</a>中，我提到可以<strong>使用 JMX 监控 Kafka 队列的堆积数</strong>，再比如，你也可以通过<strong>JMX 监控 JVM 内存信息和 GC 相关的信息。</strong></p></li><li><p>你所熟知的 Tomcat 和 Nginx 的<strong>访问日志</strong>，都是重要的监控日志。你可以通过<strong>开源的日志采集工具</strong>，将这些日志中的数据发送给监控服务器。目前，常用的日志采集工具有很多，比如，<a href="http://flume.apache.org/">Apache Flume</a>、<a href="https://www.fluentd.org/">Fluentd</a>和<a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-overview.html">Filebeat</a>，你可以选择一种熟悉的使用。在我的项目中，<strong>我倾向于使用 Filebeat 来收集监控日志数据</strong>。</p></li><li><p>目前业界比较常用的<strong>时序数据库有 InfluxDB、OpenTSDB、Graphite</strong>，各大厂的选择均有不同，你可以选择一种熟悉的来使用。</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1629157426308-fabd2219-29b6-4e20-981a-3411d045fed4.png#clientId=u5d35200a-940b-4&from=paste&height=224&id=u5636ce21&originHeight=224&originWidth=751&originalType=binary%E2%88%B6=1&size=72428&status=done&style=none&taskId=u6929e232-4538-4121-a75f-099725b5355&width=751" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>idea 2018.1.5</title>
      <link href="/2021/08/13/vc3w1q/"/>
      <url>/2021/08/13/vc3w1q/</url>
      
        <content type="html"><![CDATA[<pre><code>ThisCrackLicenseId-&#123;“licenseId”:”11011”,“licenseeName”:”Wechat”,“assigneeName”:”tree-deep-see-deer”,“assigneeEmail”:”2378437815@qq.com”,“licenseRestriction”:””,“checkConcurrentUse”:false,“products”:[&#123;“code”:”II”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”DM”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”AC”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”RS0”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”WS”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”DPN”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”RC”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”PS”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”DC”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”RM”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”CL”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”PC”,”paidUpTo”:”2099-12-31”&#125;],“hash”:”2911276/0”,“gracePeriodDays”:7,“autoProlongated”:false&#125;</code></pre><pre><code>ThisCrackLicenseId-&#123;“licenseId”:”11011”,“licenseeName”:”Wechat”,“assigneeName”:”tree-deep-see-deer”,“assigneeEmail”:”2378437815@qq.com”,“licenseRestriction”:””,“checkConcurrentUse”:false,“products”:[&#123;“code”:”II”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”DM”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”AC”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”RS0”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”WS”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”DPN”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”RC”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”PS”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”DC”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”RM”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”CL”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”PC”,”paidUpTo”:”2099-12-31”&#125;],“hash”:”2911276/0”,“gracePeriodDays”:7,“autoProlongated”:false&#125;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1628861779766-8af83e5a-4353-418f-acb0-df5520f0859c.png#clientId=u3a948a1e-cca8-4&from=ui&id=u8a22975c&originHeight=384&originWidth=620&originalType=binary%E2%88%B6=1&size=265361&status=done&style=none&taskId=u4eb891e1-7a0f-4728-95cd-c54b3b57ec2" alt="截屏2021-08-13 下午9.35.35.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>源码</title>
      <link href="/2021/06/19/ygkwfv/"/>
      <url>/2021/06/19/ygkwfv/</url>
      
        <content type="html"><![CDATA[<p>org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo#bindToThread<br>事务<br><a href="https://www.toutiao.com/a6966917901601309217/">https://www.toutiao.com/a6966917901601309217/</a><br><a href="https://www.toutiao.com/a6966917901601309217/">https://www.toutiao.com/a6966917901601309217/</a></p><p>token<br><a href="https://www.toutiao.com/a6947245110669099552/">https://www.toutiao.com/a6947245110669099552/</a><br><a href="https://www.toutiao.com/a6947245110669099552/">https://www.toutiao.com/a6947245110669099552/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>源码</title>
      <link href="/2021/06/19/zah639/"/>
      <url>/2021/06/19/zah639/</url>
      
        <content type="html"><![CDATA[<p>SpringBootConfiguration<br>springboot 注解 <a href="https://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==%E2%88%A3=2247517350&idx=1&sn=96ab31817c899bd12254dda46b5c7e2f">注解</a><br><a href="https://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==%E2%88%A3=2247517350&idx=1&sn=96ab31817c899bd12254dda46b5c7e2f">注解</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==%E2%88%A3=2247517350&idx=1&sn=96ab31817c899bd12254dda46b5c7e2f">http://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==∣=2247517350&amp;idx=1&amp;sn=96ab31817c899bd12254dda46b5c7e2f</a></p><hr><p><strong>public void **refresh() **throws **BeansException, IllegalStateException {<br>Object var1 = **this</strong>.startupShutdownMonitor;<br><strong>synchronized</strong>(<strong>this</strong>.startupShutdownMonitor) {<br><strong>this</strong>.prepareRefresh();<br>ConfigurableListableBeanFactory beanFactory = <strong>this</strong>.obtainFreshBeanFactory();<br><strong>this</strong>.prepareBeanFactory(beanFactory);</p><pre><code>    **try **&#123;        **this**.postProcessBeanFactory(beanFactory);        **this**.invokeBeanFactoryPostProcessors(beanFactory);        **this**.registerBeanPostProcessors(beanFactory);        **this**.initMessageSource();        **this**.initApplicationEventMulticaster();        **this**.onRefresh();        **this**.registerListeners();        **this**.finishBeanFactoryInitialization(beanFactory);        **this**.finishRefresh();    &#125; **catch **(BeansException var9) &#123;        **if **(**this**.logger.isWarnEnabled()) &#123;            **this**.logger.warn(**&quot;Exception encountered during context initialization - cancelling refresh attempt: &quot; **+ var9);        &#125;        **this**.destroyBeans();        **this**.cancelRefresh(var9);        **throw **var9;    &#125; **finally **&#123;        **this**.resetCommonCaches();    &#125;&#125;</code></pre><p>}</p><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Object var1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">;</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> var9<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - cancelling refresh attempt: "</span> <span class="token operator">+</span> var9<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancelRefresh</span><span class="token punctuation">(</span>var9<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> var9<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>refresh</strong>()–&gt;**onRefresh()–&gt;**createWebServer()–&gt;</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   WebServer webServer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webServer<span class="token punctuation">;</span>   ServletContext servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>webServer <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> servletContext <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      ServletWebServerFactory factory <span class="token operator">=</span> <span class="token function">getWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>webServer <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>servletContext <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> ex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"Cannot initialize servlet context"</span><span class="token punctuation">,</span>               ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>心语</title>
      <link href="/2021/03/20/mdib2d/"/>
      <url>/2021/03/20/mdib2d/</url>
      
        <content type="html"><![CDATA[<p>【心语】最使人颓废的往往不是前途的坎坷，而是我们信心的丧失。当全世界都在说放弃的时候，坚定地告诉自己：再试一次！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客同步～格式测试</title>
      <link href="/2021/03/06/gegpst/"/>
      <url>/2021/03/06/gegpst/</url>
      
        <content type="html"><![CDATA[<p>title: <strong>博客同步～格式测试</strong><br>author: 机器人<br>top: true<br>cover: false<br>coverImg: /medias/featureimages/12.jpg<br>toc: true<br>mathjax: false<br>summary: 有效 categories tags top author title date。<br>categories:</p><ul><li>测试</li><li>test</li></ul><p>tags:</p><ul><li>Github Actions</li><li>持续集成</li><li>语雀[,]</li><li>Hexo</li><li>CI/CD</li><li>tags</li></ul><p>urlname: charging</p><p>date: 2021-03-02 23:15:33</p><p>img:</p><p>password:123</p><p>updated:2021-03-05 23:15:33</p><hr><p>tags: [Hexo, Github]<br>categories: [Blog]<br>description: 重复不起作用！</p><hr><p>手机电池不耐用，很多人觉得似乎要换电池了。现在分享一波苹果电池实用技巧,可延长 iPhone 手机电池寿命哦！<br><strong>1.不要过夜充电</strong><br>锂电池充电快速，从零到充满大约只需要 1 小时。而现在的智慧型手机内建的芯片都有保护机制，一旦电量充满，便会停止充电器的电流流入电池内。因此如果电池充满之后，即使没有拔下充电插头，也不会有多余的电流流入电池，造成电池的伤害。<br>但坏消息是，当充电器电流不再流入电池内，电量便会开始自然流失，这时充电器的电流又会开始流入手机内，直到电量达 100％。换句话说，如果不拔下充电插头，一整晚手机便会重复这个过程，这会导致手机温度升高，会降低电池容量。<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1607495673205-c0a253f2-a327-477c-b0ef-0c4672f6053a.jpeg#align=left&display=inline&height=260&originHeight=260&originWidth=401&size=0&status=done&style=none&width=401"><br><strong>2.电量长期维持在 65%～ 75％之间手机电池的寿命最长</strong><br>**<img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1607495673246-6ddc606c-330e-4d74-a374-ea5a89c09d57.jpeg#align=left&display=inline&height=276&originHeight=276&originWidth=369&size=0&status=done&style=none&width=369">**<br>实际上很难做得到。你可以退而求其次，尽可能让电量维持在 45％～ 75％之间，再差的情况是不要低于 25％。如同前文提及，千万不要等到电力过低或完全没电时才充电。<br><strong>3.使用合理化软件控制充电</strong><br>**<img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1607495673196-1ae2e126-804e-4c31-ba4d-9a4795df8a50.jpeg#align=left&display=inline&height=261&originHeight=261&originWidth=396&size=0&status=done&style=none&width=396">**<br>一般锂电池充电状态下，电量达到 90%就会默认充满，可以在手机中下载一些软件，进行控制电流进行【涓流充电】，来达到让电池充到满额的程度，保护手机电池的安全。<br><strong>4.必须选用专用充电器</strong><br>锂离子电池必须选用专用充电器，否则可能会达不到饱和状态，影响其性能发挥。充电完毕后，应避免放置在充电器上超过 12 小时以上，长期不用时应使电池和手机分离。<br><strong>5.注意手机温度</strong><br>**<img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1607495673222-fc99f9bf-72f0-499b-b984-e4ef1a8012bd.jpeg#align=left&display=inline&height=310&originHeight=310&originWidth=335&size=0&status=done&style=none&width=335">**<br>一般情况下，手机使用的电池都有一个活性问题，而电池的活性又与环境的温度有关，一般来说，手机电池在-10℃~50℃ 之间能正常工作。<br>我们应尽量避免手机在温度高于 50℃ 或低于-10℃ 的环境下工作，否则使用时间和寿命会大大缩短。<br><strong>6.不要彻底用完电量后再去充电</strong><br>**<img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1607495673251-ced4ddc6-7be2-465e-bad6-37f1d2351692.jpeg#align=left&display=inline&height=276&originHeight=276&originWidth=441&size=0&status=done&style=none&width=441">**<br>频繁的浅度充放电会比深度充放电有助于延长电池的寿命，千万不要以为充电次数多会损坏电池，这个说法对锂离子电池并不适用。<br>应该尽量减少电池满电状态的时间。充满电后不拔掉电源，会让电池一直保持满电状态，虽然不会爆炸，但是会加快电池容量的损失速度。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小米面试题</title>
      <link href="/2021/03/06/utq0ds/"/>
      <url>/2021/03/06/utq0ds/</url>
      
        <content type="html"><![CDATA[<p><strong>小米面试题</strong><br>1.  二分<br>2.  四次挥手中的  TIME_WAIT  状态存在的意义 3. TCP  为什么可靠<br>4.  滑动窗口是什么 5. HTTP  和  HTTPS  的区别 6. TCP  三次握手和四次挥手的各种状态 7. Linux  中的网络  IO<br>8.  各种索引的理解<br>9.  各种日志的理解 10. Redis  的持久化 11. Redis  和  Mem***的区别 12. go  的协程怎么实现的与  c++的区别<br>13.  进程并发和并行 14. tcp  是什么层协议 15. tcp  和  udp  区别<br>16.  讲一下  tcp  连接三次握手 为什么是三次 17. http  底层是什么协议<br>18.  为什么<br>19.  讲一下  tcp  流量控制和拥塞控制<br>20.  两个链表的第一个公共结点：输入两个链表，找出它们的第一个公共结<br>点。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小米 Java 岗位面经汇总</title>
      <link href="/2021/03/06/ryv68p/"/>
      <url>/2021/03/06/ryv68p/</url>
      
        <content type="html"><![CDATA[<p><strong>小米 Java 岗位面经汇总</strong><br><strong>目录</strong><br>小米  java  社招面试记录…………………………………………………………………………………1<br>小米  java  岗位秋招面经…………………………………………………………………………………3<br>小米  Java  开发岗面试经常会问什么？ ……………………………………………………….4<br>小米  Java  开发  2017  面经 暑期实习+秋招  ,附备战总结………………………..5<br>小米  2019  秋招面经……………………………………………………………………………………. 11<br>小米面经  Java  开发…………………………………………………………………………………….. 12<br>小米软件开发工程师（Java  方向）面经…………………………………………………. 14<br>小米软开  java  一面………………………………………………………………………………………. 16<br><strong>小米  java  社招面试记录</strong><br>链接：<br><a href="https://www.nowcoder.com/discuss/360604?type=2%E2%84%B4=0&pos=4&page=1">https://www.nowcoder.com/discuss/360604?type=2ℴ=0&amp;pos=4&amp;page=1</a><br>来源：牛客网<br>一面<br>二分查找（递归和非递归）<br>反转链表（递归和非递归）<br>常用  Java  集合类<br>HashMap  为什么长度是  2  的  n  次幂，数据结构，扩容（包括元素移动的细节），<br>线程不安全的问题<br>ConcurrentHashMap  怎么保证线程安全，1.7  和  1.8  有什么变化，为什么要要这<br>么优化<br>CopyOnWriteList  怎么保证线程安全，为什么这么做<br>Java synchronized  关键字的作用，原理，锁升级、锁粗化、锁消除<br>volatile  关键字的作用，原理 MVCC<br>事务的  ACID，每一项是如何保证的<br>MySQL  的索引结构，为什么是  B+树而不是  B  树<br>二面<br>先升序后降序的数组排序<br>求递增数组中相加等于  10  的元素对<br>17^400 - 19100  计算结果能不能被  10  整除<br>一个  url  对应一个  random  值，要求设计一个系统，根据  url  查询  random  值，<br>具体到表怎么设计，索引怎么加，代码怎么写<br>讲项目，画架构图，为什么这么设计，哪一块是你做的，为什么这么做，做了多<br>久<br>后面的记不住了… <br>三面<br>自我介绍<br>镜像二叉树（递归和非递归）<br>删除二叉搜索树的某一个节点<br>给定数组，求第  k  大的数字<br>单例模式的几种写法，解释为什么<br>tcp  握手挥手过程，以及  socket  的状态变化<br>线程的状态，以及变化的时机<br>Java  内存模型，堆的组成，gc  过程<br>synchronized  修饰同一个类的两个静态方<strong>*同步吗，为什么<br>线程池设置了  coreSize  和  maxSize  之后，如果线程数量已经达到了  coreSize，这<br>个时候进来一个任务，会怎么处理<br>SQL  查询优化怎么做<br>你的优点是什么，缺点是什么<br>最快什么时间入职，薪资要求<br>你有什么要问我的吗</strong>小米  java  岗位秋招面经**<br>链接：<br><a href="https://www.nowcoder.com/discuss/341905?type=2%E2%84%B4=0&pos=9&page=1">https://www.nowcoder.com/discuss/341905?type=2ℴ=0&amp;pos=9&amp;page=1</a><br>来源：牛客网<br>小米: <br>一面：<br>1、String,Stringbuffer,StringBuilder  的区别，为什么被  final  修饰就不能被继承。<br>2、讲一下  volitale  关键字，说一下为什么不保证原子性。<br>3、抽象类和接口的区别。<br>4、用没有用过多线程？讲一下多线程的实现方式，call  和  run  的区别。<br>5、讲一下线程池的执行步骤，以及参数设置。<br>6、将数组里面非  0  的元素移到前面，0  元素移到后面（不改变相对位置）。<br>二面：<br>1、 用两个栈实现一个队列。<br>2、 对你之前写的代码进行一些修改，写成泛型。<br>3、 对  1  中的方法进行线程安全的改造。<br>4、 Synchronized  用法，锁。<br>5、 数据结构，树的遍历，排序算法复杂度分析。<br>6、 TCP，UDP，Http,Http  请求头，Https。 <br>7、 项目细节，思考。<strong>小米  Java  开发岗面试经常会问什么？</strong><br>自我介绍<br>聊项目<br>SpringBoot  的优缺点<br>mybatis  支持的数据类型<br>序列化的优缺点<br>StringBuffer  和  StringBuilder  区别。<br>熟悉的集合框架<br>有序的集合有<br>ArrayList  和  LinkedList  的区别。<br>static  加载机制<br>oracle  和  mysql  的分页查询<br>手写单例模式，线程安全<br>手写两个  Arraylist  合并，O(n)<br>有两个文件，每个都有  500w  个单词，找出他们共同的单词。<br>kafka  为什么能高效的持久化到本地，并从本地高效的读取数据。<br>为什么要用  impala<br>常用的  linux  命令：ps、netstate、pwd、$<br>查看某个特定的进程打开的文件数：lsof -p pid | wc -l<strong>小米  Java  开发  2017  面经 暑期实习+秋招  ,附备战总结</strong><br>秋招结束，总结了一下从寒假回来开始的实习生招聘和秋招面经，过来回馈一下<br>牛客网。<br>上学期寒假回来就开始投简历，找人内推的小米，过几天后约时间面试，部门未<br>知。<br>1、一面  1  小时  7  分钟<br>上来先自我介绍，然后开始问项目<br>说说你最近做的一个项目吧，用到了哪些技术<br>然后我就说了当时做的一个网站，我做了哪些模块<br>你们这个网站部署了吗，网址给我，打开以后又问了哪些模块是你做的？<br>我就又大概讲了一些<br>你们这个架构用的是  strust2，你能讲一下你对这个框架的理解吗？<br>这个我不的很懂，我大概说了一点，然后说我对  Spring  了解一些<br>那你说一下你对  Spring  的认识吧。<br>然后我说了源码里  IOC  容器的初始化的整个过程<br>那你觉得  IOC  最大的好处是什么呢？<br>我说是代码解耦合，然后说了下控制反转和依赖注入之类的<br>这块应该就这么多<br>接下来是数据库<br>你对  sql  了解怎么样？<br>我说我本科不是计算机的，没有学过数据库这门课，但是写一些简单的  sql  应该<br>也是可以的。那你本科是什么专业的?<br>我说是自动化的，然后他也没说什么<br>网络<br>然后他问那你对网络了解怎么样？<br>我说还可以吧<br>那你说说吧，你了解的网络协议相关的知识，TCP、IP  的<br>然后我就说了  TCP  和  UDP  的区别，TCP  的报文结构，三次握手过程流量控制和<br>拥塞控制<br>然后他问了你知道  CLOSE_WAIT  这个状态吗<br>我说这个状态应该是四次挥手过程中的吧，他说你确定？ 我说应该就是四次挥<br>手过程中的状态的。他说那你说一下四次挥手吧，我又说了四次挥手的过程<br>你知道长连接与短连接吗？<br>当时这块我有点蒙了一时没想起来，我就问你指的是  HTTP  中的长连接吗？<br>都可以，那你就说说  HTTP  中的长连接吧<br>我就说了  keep-alive  相关的扯了会<br>然后应该就是看我的简历开始问了<br>我看你简历上写了了解  JDK  容器类库的实现，那你说说常用的吧，这里他停顿<br>想了一会然后说讲讲  HashMap  吧<br>然后我就开始讲  HashMap  怎么怎么实现的。中间的一些细节说的不明白他会直<br>接指出来问<br>说到红黑树的时候他问你有没有用过红黑树或者看过  Java  里的红黑树是怎么实<br>现的吗？<br>我说没有<br>然后又问说哈希碰撞以后链表转为红黑树是一直就有的吗？<br>我说以前貌似没有，是  Java8  以后加进去的。<br>然后又问我  HashMap  是线程安全的吗？我说不是，HashTable  是线程安全的，但是  HashMap  不是，如果要线程安全要<br>用  ConcurrentHashMap，ConcurrentHashMap  的源码我也简单了解过<br>那你说一下  ConcurrentHashMap  是怎么实现的吧<br>我又大致讲了一下，期间表达不清楚的地方他也详细的问了<br>最后又问，那  ConcurrentHashMap  就一定是线程安全的吗<br>我说是啊，除了获取  size  属性的时候是估计值而不是准确值，但是操作就是线<br>程安全的。<br>那你在平时写过多线程的程序吗，写过什么<br>我说自己写过一点，像  wait、notify  之类的。<br>那也就是说只是自己学习过，而没有实际用过呗<br>我说是，实际使用就在上面说的网站的排行榜上更新的时候用到了锁。然后说了<br>一下具体的实现<br>他貌似没什么兴趣，估计是觉得我实际经验太少了也没有继续问下去。<br>然后应该又看了看简历，又来一波<br>你简历上写你熟悉常见的设计模式，那你都了解哪些模式呢，实际用过什么？<br>我说我用的比较多的就是工厂模式和单例模式，在网站的缓存那块自己实现过<br>那你说说单例模式，单例模式有很多种写法吧，你用的是哪种<br>我说单例模式确实有很多种写法，我知道的就有  5  种，我用的是  Enum  方式是实<br>现的，因为我看  EFFECTIVE JAVA  这本书上是推荐这种方法的<br>那你说说其他的几种写法都怎么写？<br>我就说了懒汉式，饿汉式和他们各自的改进，<br>然后说到双重检测保证线程安全的时候，他又问你确定双重检测就能保证线程安<br>全吗？<br>我说对啊。<br>他说不对，这个也无法完全保证，在实际使用中，会有可能获取正在创建的实例<br>还是怎么来的我没有太明白。然后就是问算法，一共问了三道题<br>最大堆怎么实现<br>我讲了怎么筛选法建堆，不知道是不是我没表述清楚这里他问的特别细。说了很<br>长时间<br>然后问我时间复杂度是多少？我说应该是  nlogn  吧<br>他说不对，实际上应该是  O(n)。通过数学证明是可以证出来的。后来又补充说<br>你按照算法的思路分析出  nlogn  是没错的，但是如果通过数学证明，应该是  O(n)<br>的。<br>然后我恍然大悟的样子说好像以前在算法课上是学过这个证明，但是具体的忘记<br>了。他也没说什么，就像上面告诉我单例模式那块一样，就像讨论问题一样告诉<br>我了，感觉面试官还是很好的。<br>在一个数组中，统计出现频率最高的元素<br>这题也是答的最失败的地方，可能是有点大意了，因为编程之美上有类似的题，<br>leetcode  上也有原题，但是有一个前提条件是频率最高的元素超过一半。<br>我忘记了他有没有加这个条件，我说了摩尔投票法找出频率最高的，然后再判断<br>这个频率是不是超过数组一半了。然后他举出反例说你这样有问题啊，比如我给<br>你个数组  1,2,1,2,1,2,3,3.那么你返回的数字就是  3  了，明显不对啊。<br>这时候我有点懵逼了，但是其实是他偷换了概念，因为他出的题就是返回超过一<br>半的元素，所以如果是他给的这个数组，那么就是不存在超过一半的元素，返回<br>null  就可以了。但是我完全懵逼，和他争论了一会以后就放弃了。<br>最后一道题是把字符串转换成  int  型。<br>我说了自己是思路，感觉这题主要考察的就是边界条件。<br>后来又延伸了一下说如果转换成  16  进制的呢?我想了一下说那就把乘  10  改成乘<br>16，他说对这样没问题。<br>然后就完事了。<br>2、总结<br>面试官很和蔼，大部分情况下都是自己知道什么就讲什么，遇到细节会提问，所以在回答的时候引导话题很重要，自己知道什么就一定要往那上面引导，不知道<br>什么也要往知道的上面引导，面试官一般不会纠结一个知识点，而是看你对了解<br>的知识点到底掌握到什么程度<br>在具体的知识点上被提出了几点问题：<br>·  单例模式的双重检测其实也并不能保证线程安全<br>· ConcurrentHashMap  的线程安全性是有局限性的<br>·  建堆有两种方法，自顶像下建堆也就是像堆排序那样的时间复杂度是  nlogn，<br>而如果采用筛选法建堆，那么时间复杂度应该是  O(n)，而不是  nlogn<br>·  最后我问面试官表现如何在哪些方面还需要提高呢？他的原话是：基础知识很<br>好，注重细节，加强实战经验<br>这次面试虽然范围很广且时间很长，但仔细回想一下其实也并没有很难，问的问<br>题确实都是必须要掌握的。<br>关于那个算法题，我后来还是发短信给面试官解释说我当时的算法并没有错，快<br>10  点的时候回复我和我讨论了一会最后应该是被我说服了或者不耐烦了，说没<br>问题让我再想想有没有更好的方法。我说不好意思因为一道题打扰这么久。它说<br>没事，做技术就需要你这种精神。<br>之后就没有任何通知了。<br>以上是实习生招聘。在北京实习的时候又找人内推了小米，打电话约到现场面试，<br>MIUI  部门<br>一面<br>自我介绍<br>Java  中的集合类有哪些了解呢？<br>垃圾回收机制<br>项目中用到过哪些缓存？<br>数据库联合表<br>linux  了解怎么样。各个用户之间的权限了解吗<br>手写代码：求两个链表相交。<br>提示；链表可能有环。需要考虑几种情况。二面<br>类加载机制<br>新建线程的方式，有什么区别<br>Thread  的  run  方法和  start  方法的区别是什么<br>怎么关闭线程<br>对线程安全是怎样理解的<br>项目中提到反射技术，反射在哪些情况是获取不到参数的呢？<br>写  sql，获取一列中最大的数。<br>数据库建立索引的原则有哪些？<br>先写个简单的代码：不用额外空间交换  AB  的值<br>手写代码：顺时针打印矩阵<br>三面<br>写个代码，括号匹配。<br>写好之后，改一下，如果能匹配的不止大括号小括号，还有自己定义的符号呢<br>写好之后，再改一下，如果括号之间有优先级呢<br>写好之后，再改一下，如果加一个限制，相同的括号不能超过指定数目呢？<br>再写的代码，m*n  的矩阵，从左上角到右下角一共有多少种走法，每次只能向右<br>或者向下走<br>再来个问题，MIUI  每次用户升级都会有一个打点信息，包括：用户  id，原来的<br>版本，升级到的版本，升级的时间等等。要求是，我需要频繁统计出:1.某个用户<br>所有的升级记录。2.指定一段时间内从某个版本升级到某个版本最多的。3.  某个<br>版本的所有用户<br>针对这个情况，给出合理的存储和解决方案。<br>总结<br>前两面都是女面试官，三面是男的，这样的配置还是第一次遇见<br>每次面试都  50  分钟左右<br>三面都要手写代码，一面基础知识多一些，二面更加深入，三面感觉是看代码风<br>格，扩展性和系统设计经验。<br>中午没睡觉连续面了三面，感觉有点累，回去就发烧了。小米，为发烧而生。<br>过了大概两周通知面试通过，不用再参加校招了。<strong>小米  2019  秋招面经</strong><br>小米的面试官喜欢突击，晚上八点多收到小米电话，问什么时候有时间面试，我<br>说都可以，然后说现在？我：？？？，还是改到其他时间了。二面也是突击，刚<br>想跟小伙伴吃鸡，就打电话直接面试。<br>一面<br>解释  goroutine，channel<br>c++  和  go  对比<br>java  和  go  对比<br>几种基本排序算法说一下，问了堆的时间复杂度，稳定性，为什么不稳定<br>topk  问题，海量数据  topk（回答成切分多次加载内存，然后用维持  k  长度的有<br>序链表，然后被说时间复杂度不好，提示说还是用堆，然后哦哦哦对）<br>最长连续字串和，这里我说的解决方案没用  dp（对  dp  不熟），面试官一直引导<br>我  dp，还是不会<br>什么是主键<br>联合索引和唯一索引<br>越多的索引越好吗？<br>建立索引要注意什么？<br>进程和线程区别？<br>死锁？<br>tcp  三次握手<br>http，https<br>状态码  401,301,302,201<br>项目我说只有一台机子，所以用的单机部署，面试官说单机也可以部署多个，有<br>什么方法吗？我说  docker，问  docker  有哪些网络，不熟，dockerfile  关键字，<br>只答几个。顺便扯了下  nginx  转发。<br>二面<br>数据库隔离级别，提交读会造成什么<br>go  调度<br>goroutine  泄漏有没有处理，设置  timeout，select  加定时器<br>项目<strong>小米面经  Java  开发</strong><br>链接：<br><a href="https://www.nowcoder.com/discuss/304436?type=2%E2%84%B4=0&pos=11&page=">https://www.nowcoder.com/discuss/304436?type=2ℴ=0&amp;pos=11&amp;page=</a><br>1<br>来源：牛客网<br>09.02  小米面试  35min <br>1.  自我介绍 2. final  关键字 3. static  关键字<br>4.  实习项目中的并发操作（这里答错了，把并发操作答成了异步操作，跟面试<br>官的问题有点差别）<br>5.  对线程池的了解<br>6.  为什么会产生死锁 7. java  并发  wait  和  sleep  的区别<br>8.  设计模式，观察者模式<br>9.  写反转链表<br>问题  15min ，代码大概十几分钟，最后问我有什么问题<br>10.11  小米 二面  33min<br>隔了一个多月，以为凉了呢<br>竟然又通知了二面<br>1.  自我介绍<br>2.  排序算法了解么，写一下快排<br>3.  还有什么排序算法，插入排序如何改进为  nlogn  的时间复杂度，什么排序算<br>法效率最高呢<br>4.  什么情况下要用什么排序算法？ 5. java  接口和抽象类<br>6.  为什么  java  要有抽象类和接口这两种？7. GC  讲一讲<br>8.  可达性分析中  gc root  都包括哪些？<br>没有了？？？<br>话说小米的面试可能是秋招面的很烂，也很简单的了。<br>一面准备很充分，毕竟九月正是集中面试的时候自己复习的也很充分；二面的时<br>候已经半个月没复习过了，一度以为秋招已经结束呢<br>小米的面试安排也是很神奇。。。二面面试官说可能是因为你一面表现不太好？可<br>是一面结束的时候面试官说表现的很好呀，让我耐心等二面<br>隔天下午  oc，hr  也是很硬气，上来就问有什么  offer  给多少钱。没给我议价的<br>机会（好吧，菜鸡不配  argue）<strong>小米软件开发工程师（Java  方向）面经</strong><br>链接：<br><a href="https://www.nowcoder.com/discuss/252340?type=2%E2%84%B4=0&pos=19&page=">https://www.nowcoder.com/discuss/252340?type=2ℴ=0&amp;pos=19&amp;page=</a><br>1<br>来源：牛客网<br>一面（9  月  5  日）<br>为什么研究生做  CV，现在找研发岗位；<br>描述进程控制块  PCB，进程控制块中进程的哪些信息；<br>http  与  https  的区别，https  为什么能保证安全，客户端与服务端通过  https  进行<br>交互的过程；<br>SQL  中的几个基本命令，使用哪个命令可以在数据存在时进行更新数据，数据不<br>存在的话则插入数据；<br>两个链表，找链表是否有交点，怎么找到交点；我说了自己思路后，面试官说让<br>我使用栈来做一下（两个链表分别压入两个栈，如果栈顶元素相同的话说明有交<br>点，然后同时  pop，直到  pop  到两个栈的栈顶元素不相同的，说明刚才  pop  出<br>来的结点是两个链表的交点）；<br>讲一下自己对  Java  的理解，Java  最大的特点，和其他语言相比有哪些鲜明的优<br>势；<br>简单介绍一下单例模式、工厂模式、装饰着模式；<br>Java  中注解是干嘛用的，这个我没回答好，面试官应该是想让我讲一下对  Java<br>注解的理解；<br>输入一个  URL，URL  中有个要调用的方法的字符串，那从输入  URL  到服务端调<br>用相应的方法，都经过了哪些过程，用到了什么技术；<br>面试官问我个人对哪些技术了解的比较深入，有什么优势，对于哪些内容有比较<br>独特深入的理解；<br>我做一个项目的时候，会怎么着手去做，会去如何完成好一个项目；<br>写代码：（1）从一个数组中找连续子数组的最大和；（2）两个字符串的最长公<br>共子串的长度；这两个都是动态规划里面的基础题目，从了  leetcode  上可以找<br>到对应的题目；<br>描述  Dijkstra  算法；问我有什么问题；<br>二面（9  月  9  日）<br>开始就先聊聊项目，项目多是  CV  相关的，简单聊了聊；<br>然后  ConcurrentHashMap  的实现原理；<br>AtomicInteger  的实现原理，自己简单实现一下  AtomicInteger  中的  increase()方<br>法，写代码；<br>写代码实现一个装饰者模式；<br>两个一组翻转链表，写代码实现；<br>写代码，算法题：给定一个非负数组，A、B  俩人轮流从数组头部或尾部取元素，<br>AB  俩人都会以对自己最有利的方式取元素，直到数组元素取完，取到元素和最<br>大的玩家赢，求先手能否赢得游戏。<br>二面的内容基本就是这些，算是写了  4  个代码题，基础知识方面基本没问。面试<br>官看着帅气而且友善（都说小米面试官帅，还真是），让我见一见下一轮面试官<br>吧，哈哈。*<em>小米软开  java  一面\</em>*<br>链接：<br><a href="https://www.nowcoder.com/discuss/236594?type=2%E2%84%B4=0&pos=16&page=">https://www.nowcoder.com/discuss/236594?type=2ℴ=0&amp;pos=16&amp;page=</a><br>1<br>来源：牛客网<br>很年轻的面试官。<br>先说项目：我先  blabla  说了一下，面试官说：要不你说一下和软开无关的项目<br>吧，你转行的不可能和  cs  的死磕项目吧，说一下和这个无关但是能反应你能力<br>的项目吧。我：呃。。。面试官：好那我们就跳过这部分直接刷题吧。<br>第一题求两个字符串最长公共子序列长度，硬做全  ac  没啥问题。<br>第二题求一个数组中和为  sum  的组合个数，我一开始用的  dfs，过了  50%<br>面试官：行，没事，我们再来一道。<br>我：我想换  dp  做优化一下。<br>面试官笑着说：我就是想给你找一道必须用  dp  的题。<br>然后第三题求一个数组里和最大的子序列。<br>做完之后，稍微问了点基础，也没细问，就问我各部分了解程度如何，我说我操<br>作系统和计算机系统结构这块了解比较弱。<br>最后笑着给我总结：行，刷题没问题，项目太弱了，要回国的话赶紧回来实习吧。<br>我：毕业前实习不太现实。。。<br>面试官：我这边让你过了，下一轮自求多福吧。<br>我：好的好的，谢谢谢谢。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小米</title>
      <link href="/2021/03/06/dgk2gr/"/>
      <url>/2021/03/06/dgk2gr/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>美团点评 2020 面经汇总-Java 工程师</title>
      <link href="/2021/03/06/veld20/"/>
      <url>/2021/03/06/veld20/</url>
      
        <content type="html"><![CDATA[<p><strong>美团点评 2020 面经汇总-Java 工程师</strong><br><strong>目录</strong><br>美团 JAVA 一面………………………………………………………………………………………………………………………….1<br>新鲜校招美团面经（一面凉）………………………………………………………………………………………………..2<br>菜逼的坎坷之路（JAVA 后台研发）………………………………………………………………………………………3<br>美团-金融…………………………………………………………………………………………………………………………..3<br>美团-数据平台…………………………………………………………………………………………………………………..4<br>美团-到家…………………………………………………………………………………………………………………………..5<br>美团-餐饮…………………………………………………………………………………………………………………………..6<br>美团后台面经…………………………………………………………………………………………………………………………….7<br>美团点评二面、三面、hr 面社招 java 面经…………………………………………………………………………8<br>【美团】后台开发一面面经（凉凉）…………………………………………………………………………………11<br><strong>美团 JAVA 一面</strong><br>作者：蓝风铃<br>链接：<a href="https://www.nowcoder.com/discuss/362152?type=2%E2%84%B4=3&pos=2&page=1">https://www.nowcoder.com/discuss/362152?type=2ℴ=3&amp;pos=2&amp;page=1</a><br>来源：牛客网</p><ol><li>介绍项目（瞎说我用了分布式锁）</li><li>分布式锁的实现</li><li>分布式锁过期解决</li><li>前缀树是什么 前缀树的使用场景</li><li>分布式数据库主从复制（我说我不会分布式的，我会主从复制，然后面试官叫我讲讲）</li><li>MySQL 死锁发生的原因和解决</li><li>MySQL 分别建立索引 a,b,c ，语句 select …where b=x,c=x,a=x 能不能用到索引，建立<br>联合索引能不能用到，a=x,b&gt;x，能不能用到，用到几个索引</li><li>B 树和 b+ 树的区别 b+ 树的优点</li><li>Linux cpu 满了怎么排查（进程相关的我是真的不会啊，平时没接触，看几天博客也不<br>明白）</li><li>怎么查看占 cpu 最多的线程</li><li>Linux 怎么搜索文件中的字符串，写到另一个文件中</li><li>liunx 网络相关命令（具体啥问题我忘了，反正我不会）</li><li>如何判断链表是否有环</li><li>Java = 和 equals 的区别 15. Java contentMap 和 HashMap 什么区别，线程安全怎么实现</li><li>HashMap 怎么解决哈希冲突，哈希冲突还有什么解决方法</li><li>Java 运行时异常和检查性异常</li><li>Java 类加载</li><li>什么是泛型 泛型的使用场景</li><li>面向过程和面向对象（一紧张差点三大特性的多态想了十秒才说出来）</li><li>多态是什么 父类如何调用子类的方法</li><li>问我看了啥书（设计模式，图解 HTTP，Modern PHP…被打断然后开始问设计模式）</li><li>单例模式的用途 静态内部类实现单例模式的方式</li><li>工厂模式的用途</li><li>策略模式的用途</li><li>Get 和 post 请求的区别</li><li>网页请求的整个过程</li><li>说说自己的优缺点，对缺点的改进（缺点太明显了，表达能力不行，面试官问我个啥东<br>西我心里知道啥意思但不知道怎么给他解释）<br><strong>新鲜校招美团面经（一面凉）</strong><br>作者：我也来求 offer<br>链接：<a href="https://www.nowcoder.com/discuss/361998?type=2%E2%84%B4=3&pos=3&page=1">https://www.nowcoder.com/discuss/361998?type=2ℴ=3&amp;pos=3&amp;page=1</a><br>来源：牛客网<br>1 月 13 日 14:00 美团面经（一面凉）<br>内推的简历，半天之后约的面试<br>60min 1.上来先写代码，两个线程交替输出 1-100<br>2.JAVA 锁机制（synchronize，ReentrantLock 等） 3.乐观悲观锁<br>4.sql 语句慢查询如何调优（这个贯穿了下面二十分钟，我数据库弱点，凉在此） 5.主键索引和普通索引区别 6.项目用的什么数据库，什么引擎，底层是什么（很底） 7.说一下 B+树和 B 树<br>8.B+树索引都能查到叶子节点么（联系第五题）<br>9.mvcc 多版本并发控制（不造） 10.隔离级别了解么，说一下<br>11.JVM 调过么，用的什么垃圾回收器（G1） 12.讲一下新生代老年代（这里给我挖了个坑，等我说完，告我 G1 不分新生代老年代，我还<br>没学到啊可惜）<br>13.TCP,UDP 区别 14.输入 URL 会发生什么<br>15.Linux 常用操作 16.线程进程区别 17.用过什么中间件或者消息队列么（了解过，但没用过，也没接着问了） 18.还有继续考研的想法么 19.有什么问题想问我<br>总的来说还是挺不错的一次面试经历，回答上来百分之八十吧，不会的主要集中在了数据库<br>那里，问的还深，<br>问到了底层调的一些 C++本地方法了，还有就是太诚实了，把自己就学了 20 天 JAVA 的事<br>实告诉了面试官，所以最后<br>HR 给的答复是，实践少了一点，么得下一面了。<br><strong>菜逼的坎坷之路（JAVA 后台研发）</strong><br>作者：YY 的晕<br>链接：<a href="https://www.nowcoder.com/discuss/352030?type=2%E2%84%B4=3&pos=4&page=2">https://www.nowcoder.com/discuss/352030?type=2ℴ=3&amp;pos=4&amp;page=2</a><br>来源：牛客网<br><strong>美团-金融</strong><br><strong>一面</strong><br>JVM<br>JVM 的结构<br>新生代和老年代的垃圾回收算法<br>虚拟机栈和本地方法栈的区别<br>类信息会加载到 JVM 哪个区域<br>JAVA 基础<br>HashMap 和 ConcurrentHashMap 的区别<br>final 的作用，加在变量、方法、类的区别<br>新建一个 string 会创建几个对象<br>哪些类是线程安全的<br>线程池的参数;为什么需要超出最大容量的策略<br>ThreadLocal 了解吗<br>Spring<br>AOP 的实现原理<br>@Autowired 和@Resource 的区别<br>什么情况下会用@ResourceMySQL<br>B+树的优势<br>悲观锁和乐观锁了解吗<br>数据库如何实现乐观锁<br>设计模式<br>工厂模式怎么理解<br>单例模式有哪几种实现方式<br>懒汉和饿汉的区别，懒汉的缺点<br>算法<br>反转链表<br><strong>二面</strong><br>JAVA 基础<br>HashMap 和 ConcurrentHashMap 的区别<br>hash 冲撞怎么办？如何 rehash<br>HashMap 的遍历方式<br>为什么 HashMap 是线程不安全的<br>volatile 和 synchronized 的区别<br>Spring<br>SpringBoot 的优势<br>SpringMVC 的 MVC 指什么？好处呢<br>Redis<br>主从结构了解吗<br>宕机之后如何恢复数据<br>消息队列<br>rabbitmq 和 kafka 的区别<br>rabbitmq 如何保证事务<br>消息队列的优势<br><strong>美团-数据平台</strong><br><strong>一面</strong><br>JAVA 基础<br>ConcurrentHashMap 的特点<br>JUC 包下其他并发类了解过吗<br>多个消费者生产者，如何处理同一段数据（消费者-生产者模型）操作系统<br>线程间通信的方式<br>JVM<br>阐述 JMM 内存模型<br>垃圾回收算法有哪些<br>标记-整理会触发 Stop The World 吗<br>什么情况下触发 mirror GC<br>JVM 结构<br>新建的字符串会存到哪<br>消息队列<br>设计时应该考虑什么问题<br>如何保证高可用<br>算法<br>n 个有序数组，找出 Top k<br><strong>美团-到家</strong><br><strong>一面</strong><br>JVM<br>JVM 存在的优势<br>通过什么方式来判断是否回收<br>哪些对象可以当 GC root<br>虚拟机栈的对象为什么能当 root<br>堆和栈区别<br>JAVA 基础<br>ArrayList 和 LinkedList 区别<br>HashMap 的底层数据结构<br>JDK 1.8 中 HashMap 有哪些变化<br>静态变量和非静态变量的区别<br>类和对象的区别<br>Synchronized 和 Lock 区别<br>Lock 底层实现<br>Exception 和 Error 的区别<br>线程池常用参数<br>在什么情况下使用这些参数（线程池工作流程）<br>设计模式<br>手撕单例模式的双重检验锁为什么要有两次检验<br>Redis<br>Redis 为什么快<br>Redis 如何保证可用<br>MySQL<br>B 树索引和 hash 索引区别<br>聚簇索引和非聚簇索引<br>计算机网络<br>HTTPS 建立连接流程<br>算法<br>LeetCode11 water<br>给定一个数，通过调换顺序，找到比这个数大的最小数<br><strong>美团-餐饮</strong><br><strong>一面</strong><br>Spring<br>循环依赖，可以初始化成功吗<br>其他问题比较简单没印象了<br><strong>二面</strong><br>JVM<br>CMS 和 G1<br>JAVA 基础<br>HashMap 和 HashTable 区别<br>ConcurrentHashMap 和 HashMap 有什么不同<br>阐述乐观锁，悲观锁<br>阐述 CAS<br>MySQL<br>B+和 B 树的区别<br>Innodb 和 Mysiam 索引区别<br>left join, right join 区别<br>联合索引和普通索引的区别<br>事务隔离等级<br>事务特性（ACID）慢查询如何排查<br>explain 中 index 和 ref 区别<br><strong>美团后台面经</strong><br>作者：lvsw<br>链接：<a href="https://www.nowcoder.com/discuss/343031?type=2%E2%84%B4=3&pos=5&page=1">https://www.nowcoder.com/discuss/343031?type=2ℴ=3&amp;pos=5&amp;page=1</a><br>来源：牛客网<br><strong>一面</strong><br>1、自我介绍，介绍一下项目，缓存是什么，给个秒杀场景，如何防止超卖？<br>2、hashmap 底层数据结构，hastable,concurrenthashmap 如何实现线程安全的<br>3、用过线程池吗？线程池的参数，提交一个任务时的过程，核心线程会被回收吗？拒绝策<br>略<br>4、看过什么源码？讲一下 spring，aop 和 ioc，会什么设计模式？单例，写一个<br>5、写了个 dcl,为什么进行两次判空，为什么用 volatile？ <br>6、jvm 内存模型，存放什么，什么线程私有，线程共享，如何判断一个对象需要被回收，<br>可以作为 GCRoot 的对象有哪些？<br>7、写个题吧，判断一个字符串的大括号中括号小括号的格式是否正确，比如字符串是一段<br>代码，最后写的不完美，面试官说还行，知道用栈。<br>8、工作地点是北京可以接受吗？<br>9、你了解美团吗？回答，知名互联网公司（裁团），中国 top5,面试官：不是，是 top3；<br>10、你还有什么想问的吗？<br><strong>二面</strong><br>问项目，抠细节，被问到哑口无言，表现极差<br>生产者消费者模式<br>讲一下 NIO、AIO,这个被问得很难受，抠的太细，具体不记得了，了解的不深<br>最后还是问了意向，搞不懂<strong>三面</strong><br>上午二面，下午收到的三面通知，下午六点面试<br>1、问研究方向，本人做天线的，面试官好像很感兴趣，一直问，问了接近 20 分钟，聊得<br>2、问项目，问的不深，不问技术，给各种场景题，我严重怀疑面试官不是可能是产品经理；<br>3、你有什么想问吗？我：（感觉过的可能性很小，就随便问了）这是 hr 面吗？我有下一面<br>吗？面试官：额，是技术面，我只是不深问<br><strong>美团点评二面、三面、hr 面社招 java 面经</strong><br>作者：leetcode_java<br>链接：<a href="https://www.nowcoder.com/discuss/342094?type=2%E2%84%B4=3&pos=6&page=1">https://www.nowcoder.com/discuss/342094?type=2ℴ=3&amp;pos=6&amp;page=1</a><br>来源：牛客网<br><strong>美团点评社招 java 一面面经</strong><br>1、做一下自我介绍吧，简单说一下你的项目？<br>2、有遇到过内存泄漏吗？你们是怎么解决的？这个前阵子确实遇到过一次，还算运气比较<br>好。<br>3、java 的基本类型有哪几个？String 是不是 java 的基本类型？String 为什么要是 final 类型<br>的？<br>4、反射机制的底层实现是什么？动态<strong><em>呢？动态</em></strong>的实现原理？<br>5、hashmap 了解吗？说一下 hashmap 相关的一些东西？hashmap 是线程安全的吗？为什<br>么是线程安全的？concureenthashmap 了解吗？他是如何实现线程安全的？你刚才说 1.8 基  <br>于 cas？cas 的 ABA 问题怎么解决？<br>6、说一下 JVM 的线程模型？这些区域都分别是干啥用的？java 线程模型和 jvm 线程模型注<br>意区分、总结下，网上很多文章都是错的。<br>7、说一下 java 类加载器的工作机制？类加载在那个区域进行的？<br>8、说一下 java 的线程模型？violate 了解吗？他的原理是什么？violate 是线程安全的吗？为<br>什么不是？<br>9、保证线程安全的解决方法有哪些？说一说读写锁吧，读写锁的读<br>10、数据库的索引有哪几种？为什么要用 B+树来做索引？组合索引和几个单个的索引有什<br>么区别？数据库的大表查询优化了解吗？MVCC 机制了解不？MVCC 机制有什么问题？怎<br>么去解决这个问题？mysql 慢语句调优做过吗？说说你是怎么做的？<br>11、redis 了解吗？你说说怎么用 redis 实现分布式锁？<br>12、spring 中 Bean 的作用域，springMVC 的 controller 是线程安全的吗？怎么去保证线程<br>安全呢？13、消息队列有用过吗？说说你怎么用的？你这么用感觉不大对吧。。大写的尴尬。。<br>14、计算机网络了解吗？说一说 TCP 三次握手和四次挥手吧，感觉这个真的是计算机网络<br>必考知识点啊，每次问到计算机网络都会问这个。time_wait 状态产生的原因是什么？，有<br>什么危害？可以如何避免？<br>15、leetcode153. 寻找旋转排序数组中的最小值<br>假设按照升序排序的数组在预先未知的某个点上进行了旋转。<br>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。<br>请找出其中最小的元素。<br>你可以假设数组中不存在重复元素。<br>示例 1:<br>输入: [3,4,5,1,2]<br>输出: 1<br>示例 2:<br>输入: [4,5,6,7,0,1,2]<br>输出: 0<br>你手里有哪些 offer 了？最快什么时候能入职呢？还有什么问题想问的？然后说会有 hr 联<br>系你，第二天就接到了 hr 约二面时间的通知。<br>总结下来，面试问的东西还是挺宽的，而且问的很细，一个知识点基本都是问到答不上来为<br>止。还是有很多东西需要加强？在美团的面试中还是学到了一些东西。<br><strong>美团点评二面</strong> 1.首先还是问项目。问的比较细，比较全。<br>String，StringBuffer，StringBuilder 的区别，为什么 String 是不可变的，StringBuffer 和<br>StringBuilder 哪个是线程安全的，他们分别适用于什么场景。<br>java 类加载过程是怎么样的，说一下 volatile。<br>并发包了解吗？假如几个线程之间相互等待，可以用哪个并发类来实现，他的原理是什么？<br>数据库慢查询优化了解哪些？说了很多，面试官说假如这些都已经做好了还是很慢怎么办？<br>最后不清楚问了下面试官，面试官主要想了解数据库分区的知识。<br>说一下 spring 容器的启动过程？<br>讲一下分布式锁，基于 zookeeper 实现和 redis 实现在性能上有什么差异？<br>kafka 如何保证不丢消息又不会重复消费。了解大数据相关的一些技术吗？<br>最后写了道题，leetcode55. 跳跃游戏<br>给定一个非负整数数组，你最初位于数组的第一个位置。数组中的每个元素代表你在该位置可以跳跃的最大长度。<br>判断你是否能够到达最后一个位置。<br>示例 1:<br>输入: [2,3,1,1,4]<br>输出: true<br>解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一<br>个位置。<br>示例 2:<br>输入: [3,2,1,0,4]<br>输出: false<br>解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永<br>远不可能到达最后一个位置。<br>最快什么时候能过来？有什么问题想问的？然后说后面有 hr 再和你联系。<br><strong>美团点评三面</strong><br>面试官首先问了很多简历中的一些基本信息.画一下你这个项目与哪些工程交互，它在你们<br>的产品中处于什么样一个位置<br>画一下你们这个项目的架构图，挑一个你觉得比较难的业务场景来讲一下，<br>你们这个项目中都遇到了哪些问题呢？说说你们最后都怎么解决的<br>写了一段代码，问这个代码最后输出什么？申请多大的内存空间，都在什么位置申请的<br>public class Test {<br>public static void main(String[] args) {<br>String str = “hello”;<br>test(str);<br>System.out.println(str);<br>}<br>public static void test(String str){<br>str = str + “world”;<br>System.out.println(str);<br>int[] a = new int[1024];<br>}<br>}<br>hashmap 了解吗？他的 set 和 get 的时间复杂度是多少？为什么是 O(1),说下详细过程，hashmap 是线程安全的吗？<br>Jvm 了解吗？jvm 中哪些可以作为垃圾回收的 gcroot?为什么呢？<br>什么时候能过来上班？然后就说等会 hr 面。<br><strong>美团点评 hr 面</strong><br>问了下基本情况，什么时候能过来，为什么想换工作？在上家的绩效和薪水情况，期望工资<br>是多少。<br><strong>【美团】后台开发一面面经（凉凉）</strong><br>作者：丞之不可以喝<br>链接：<a href="https://www.nowcoder.com/discuss/335487?type=2%E2%84%B4=3&pos=8&page=1">https://www.nowcoder.com/discuss/335487?type=2ℴ=3&amp;pos=8&amp;page=1</a><br>来源：牛客网<br>面试大概七十分钟，问的东西很全面，需要做充足准备，就是除了概念以外问的有点懵逼了。<br><strong>网络相关</strong></li><li>OSI 七层模型都是什么</li><li>举例网络协议，都在哪个层</li><li>TCP UDP 区别</li><li>TCP 如何实现可靠连接</li><li>Time_Wait 中 2*msl 为什么</li><li>如果 TCP 突然接收方故障 会发生什么</li><li>HTTP 状态码 含义，503 504,200</li><li>GET POST 区别</li><li>一个 url 从输入到访问经过了哪些过程<br><strong>数据库相关</strong></li><li>MySQL 有哪些锁？</li><li>解释一下 ACID 都是什么</li><li>Innodb 中索引的实现</li><li>B+树</li><li>AUTO_INCREMENT 原理（考察并发情况）</li><li>索引有哪些缺点？<br><strong>操作系统、Linux 相关</strong></li><li>死锁产生的原因</li><li>进程、线程区别，什么时候用线程</li><li>如何实现一个线程池，Java 中线程池如何进行配置</li><li>linux 中有哪些常见的指令，进行介绍</li><li>select、poll、epoll 有没有了解过，讲解一下 6. 线程切换，引申到 Java 阻塞 运行</li><li>页面置换算法有哪些 介绍一下<br><strong>Java 相关</strong></li><li>JVM 内存模型</li><li>GC 垃圾回收算法</li><li>讲解新生代 老年代</li><li>Java 这块问的其他问题有点忘了<br><strong>Redis</strong></li><li>Redis 是怎么实现的</li><li>Redis 常用数据结构及底层数据结构实现<br><strong>思维、算法（或者应该说是脑筋急转弯）</strong></li><li>给出一个 rand5()，实现一个分布均匀的 rand7()生成器</li><li>有一个点，向北走 5 公里、东走 10km、向南走 5 公里，回到原点。这样的点有几个，<br>证明。</li><li>有一个 n 克的物体、一个天平和若干砝码，这个天平没有刻度，试问最少用多少个什么<br>样的砝码可以将这个物体的质量称出。砝码的质量和个数自行指定。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>美团点评 2020 面经汇总-算法工程师</title>
      <link href="/2021/03/06/fpiwe9/"/>
      <url>/2021/03/06/fpiwe9/</url>
      
        <content type="html"><![CDATA[<p><strong>美团点评 2020 面经汇总-算法工程师</strong><br><strong>目录</strong><br>美团秋招面试…………………………………………………………………………………………………………………….1<br>【美团】2021 届 cv 算法实习面经…………………………………………………………………………………2 <br>8 月初美团北斗计划…………………………………………………………………………………………………………3<br>美团算法岗面经 ………………………………………………………………………………………………………………..3<br>美团点评北斗计划（机器学习岗） 宣讲会结束面试…………………………………………………4<br>美团（上海）…………………………………………………………………………………………………………………….5<br>美团机器学习岗完整面经………………………………………………………………………………………………..6<br>美团机器学习算法岗北京现场三面凉经……………………………………………………………………….7<br>美团机器学习/数据挖掘一二面面经………………………………………………………………………………8<br>美团 配送 算法岗 面经………………………………………………………………………………………………….9<br><strong>美团秋招面试</strong><br>作者：huasdahadi<br>链接：<a href="https://www.nowcoder.com/discuss/366802?type=2%E2%84%B4=3&pos=1&page=1">https://www.nowcoder.com/discuss/366802?type=2ℴ=3&amp;pos=1&amp;page=1</a><br>来源：牛客网<br><strong>美团一面</strong><br>自我介绍<br>说到 xgb，说说优点<br>梯度怎么用的，体现在哪里，怎么求<br>lr 的公式以及梯度求解<br>过拟合，l1,l2，分别有什么用，怎么做到的效果（特征选择和防过拟合）<br>场景题：一个 query，一些结果商品，怎么做点击率模型，怎么处理商家恶意点击<br>概率题：一个硬币，一直到一个人为正面停止，分别计算先手后手赢的概率，2/3，1/3<br>算法题 1：两个有序数组，求中位数<br>算法题 2: 翻转数组，找一个值<br>平面一些点，距离近的算一类，输出可以有几类（我用的 dfs，复杂度高了点）<br>希望复杂度降下来，怎么办，提出用树，这个树怎么用？参考 knn<br><strong>美团 二面</strong>自我介绍<br>介绍项目<br>项目亮点<br>为什么异常检测没有异常数据训练<br>随机森林怎么计算特征重要性<br>分词方案个数：给了分词，给一个句子，有多少种分法，dfs 2^n<br>说动态规划方案，简单写一下代码<br><strong>【美团】2021 届 cv 算法实习面经</strong><br>作者：猫弟<br>链接：<a href="https://www.nowcoder.com/discuss/368554?type=2%E2%84%B4=3&pos=1&page=1">https://www.nowcoder.com/discuss/368554?type=2ℴ=3&amp;pos=1&amp;page=1</a><br>来源：牛客网<br>一面（电话面试）：50min 1.对感受野的理解？例如 VGG 网络，最后一层卷积网络输出图片对于输入图片的感受野的<br>大小？<br>参考链接：<a href="https://blog.csdn.net/program_developer/article/details/80958716">https://blog.csdn.net/program_developer/article/details/80958716</a><br>ps：之前一直没有关注这个问题，以前理解的感受野都是针对上一层的，感受野就是卷积核<br>的尺寸。 2.神经网络中的偏置项（b）尺寸应该是什么样的？<br>参考链接：<a href="https://blog.csdn.net/machinerandy/article/details/79632748">https://blog.csdn.net/machinerandy/article/details/79632748</a><br>ps：了解 b 的作用，但是对它的 shape 已经不太记得怎么算的了，基础知识有待加强。 3.简述 Cascade R-CNN 的提出为了解决什么问题？<br>为了解决提高阈值容易造成的训练数 IOU 阈值分布变化的问题—-过拟合和 mismatch<br>4.Resnet 为什么有效果？<br>参考链接：<a href="https://cloud.tencent.com/developer/news/221146">https://cloud.tencent.com/developer/news/221146</a><br>5.1<em>1 卷积核的作用？<br>升降维度；增加非线性因素<br>6.MTCNN 使用的损失函数？<br>参考链接：<a href="https://blog.csdn.net/just_sort/article/details/80898251">https://blog.csdn.net/just_sort/article/details/80898251</a><br>ps：当时不记得 MTCNN 的损失函数了，不过基于对 loss 的认识，一般分类都用交叉熵损<br>失，回归用 L2 LOSS（距离一般也是，关键点同理）7.如何结果过拟合的问题？<br>数据增强，增大数据量 / 换更大更深的网络，更好的 backbone / dropout / L1 L2 正则化/ <br>early stop / BN<br>8.SEnet 的结构？SEnet 如何放到 Resnet 的 backbone 里？ 9.算法题<br>阶乘后 0 的个数 leetcode 172<br><a href="https://leetcode-cn.com/problems/factorial-trailing-zeroes/solution/xiang-xi-tong-su-de%02">https://leetcode-cn.com/problems/factorial-trailing-zeroes/solution/xiang-xi-tong-su-de</a><br>si-lu-fen-xi-by-windliang-3/<br>ps：刷题量不够，没有做过这个题，在面试官引导下也没有完全解答清楚，有点遗憾。<br><strong>8 月初美团北斗计划</strong><br>作者：快淹死了啊<br>链接：<a href="https://www.nowcoder.com/discuss/342038?type=2%E2%84%B4=3&pos=4&page=1">https://www.nowcoder.com/discuss/342038?type=2ℴ=3&amp;pos=4&amp;page=1</a><br>来源：牛客网<br>秋招的开始。第一次面试，贼紧张，去的火车上把西瓜书又看了一遍。。然而还是去学习的。<br>看似好像挺好，北斗都面过。。实则是去学习的<br>主要问题：<br>讲项目。介绍了两个简历上的项目，问了一些细节，大约二十分钟。还比较顺利。<br>项目里用到了 XGBoost，问了一些相关问题，损失函数、节点划分依据、并行怎么做的、和<br>GBDT、LightGBM 的区别和各自的优势等。。答得不好。。<br>LR 的损失函数写一下，极大似然和最大后验的区别？<br>深度学习了解吗？CNN 1</em>1 卷积核的作用？<br>最新的模型了解哪些？提了 BERT。BERT 里 Transformer 的多头 attention 是怎么做的？不知<br>道。。<br>编程题：数组的最大连续子数组和。<br>印象比较深的有这些。。其他忘记了。持续一个小时。之后整个秋招再也没收到来自美团的<br>任何消息。。。问题基本上都没答出来。。面试官人还是挺好的，临走还给说了点需要准备的<br>东西。。学习了。。<br><strong>美团算法岗面经</strong><br>作者：ddggf 链接：<a href="https://www.nowcoder.com/discuss/338662?type=2%E2%84%B4=3&pos=5&page=1">https://www.nowcoder.com/discuss/338662?type=2ℴ=3&amp;pos=5&amp;page=1</a><br>来源：牛客网<br>一面（技术面，时长 50+min)： <br>1、围绕项目在问，问了一个实习项目还有一个竞赛项目；<br>2、写代码：写 topk 排序，以及分析时间复杂度。<br>二面（技术面，时长 20+min） <br>1、围绕项目问，你觉得做的最好的项目是哪个，带来了哪些价值；<br>2、平时用的编程语言，我说了 c++和 Java； <br>3、问 c++和 Java 的区别，从内存管理上说。</p><hr><hr><p>重新换了一个部门<br>一面（技术面，时长 50+min）：<br>1、围绕项目在问；<br>2、场景题：在北京，有一个配***心，5000 个配送点分布在北京各处，应该采用什么算法求<br>解；<br>3、最喜欢的智能算法是哪个，为什么<br>4、手写代码：1、输入一个字符串，判断其是否是“（”和“）”的一 一配对。2、合并两个排<br>好序的链表。<br>二面（技术面，时长 20+min） <br>1、围绕项目问；<br>2、介绍他们那边的业务。<br>三面（HR 面，时长 10+min）<br>常见的 HR 问题</p><hr><hr><p>总结美团的面试套路是：<br>1、项目问的比较清楚，所有的东西都是由简历的内容进行拓展<br>2、一般都会有手写代码题，所以常见的一定得刷一刷<br><strong>美团点评北斗计划（机器学习岗） 宣讲会结束面试</strong><br>作者：牛客杨超越-<br>链接：<a href="https://www.nowcoder.com/discuss/319551?type=2%E2%84%B4=3&pos=9&page=1">https://www.nowcoder.com/discuss/319551?type=2ℴ=3&amp;pos=9&amp;page=1</a><br>来源：牛客网<br>简述风控实习内容<br>风控业务上的一个知识点<br>简历 SMO 并行的内容<br>什么是对偶问题？？？手写！手写题识别的项目介绍<br>树的右视图<br>概率题，一根木棍随机砍两道，构成三角形的概率<br>有 100 万条诈骗电话黑名单，现在有个电话来了，快速判断这个电话是否在黑名单里，要求<br>查询 1000 条和 100 万条所消耗的时间一样（我不会了）<br>问了好多数学题，求我内心的阴影面积。<br>20190821 美团点评<br>一面：<br>简历风控项目<br>深挖了项目内容包括：label 哪里来的？<br>谱聚类<br>两种层次聚类的优缺点<br>GBDT 和 GD 的联系<br>深度遍历非递归<br>二面：<br>实习的风控项目特征工程怎么做的<br>推导 XGB<br>RF 和 GBDT 的区别<br>归并排序<br>三面（部门老板面）：<br>纯业务面（我不是一个校招生吗？）<br>概率题：某村庄的的习惯是一直生到男生为止，求村庄的男女比例<br><strong>美团（上海）</strong><br>作者：16huakai<br>链接：<a href="https://www.nowcoder.com/discuss/290749?type=2%E2%84%B4=3&pos=13&page=1">https://www.nowcoder.com/discuss/290749?type=2ℴ=3&amp;pos=13&amp;page=1</a><br>来源：牛客网<br>（机器学习方向）<br>一面：46 分钟 1.自我介绍 2.围绕简历实习问：场景，方法，指标，样本，……（20 分钟） 3.随便说一个算法（说的决策树——特征选择方法区别，分类和回归，） 4.大数据 and 分布式<br>5.auc 的作用 6.编程题：一维数组[1,n],n 可以认为正无穷，然后输入无数个区间[a,b],保证 b&gt;a，求所有区<br>间长度。<br>（按照 a 对区间排序） 7.最后一个智力题：扔鸡蛋问题。<br>二面：1 小时 10 分钟 1.自我介绍 2.直接一个场景题：怎么做搜索中的联想页——方案设计，怎么落地，什么指标。。。（怎么得<br>到字典树） 3.然后又一个场景题：怎么做美团 app 的猜你喜欢，只能用 LR 模型，（特征，那些特征，怎<br>么获取，怎么处理）<br>特征怎么离散化、怎么设计整个逻辑，在线怎么获取用户的特征… 4.然后实习项目：模型，场景，（介绍优缺点，cnn 作用，esim 模型的优缺点），point wise <br>和 pair wise 的优缺点<br>5.GBDT 怎么处理类别特征，例如 ID 特征<br>6.word embedding 的 api 原理 7.最后一个智力题：一个无穷的数列，一直输入，直到收到停止的命令为止，怎么使得返回<br>一个数的概率是<br>1/n，因为是无穷的，不能存数字（蓄水池算法）<br>HR 面：20 分钟 1.大学做过自己觉得有成就的事情？ 2.怎么学习课外知识？ 3.比赛经历？实习经历？ 4.阿里和美团怎么选择？为什么还投递美团？ 5.能不能承受大的工作压力？<br><strong>美团机器学习岗完整面经</strong><br>作者：<em>猪突猛进</em><br>链接：<a href="https://www.nowcoder.com/discuss/287277?type=2%E2%84%B4=3&pos=14&page=1">https://www.nowcoder.com/discuss/287277?type=2ℴ=3&amp;pos=14&amp;page=1</a><br>来源：牛客网<br>共三面（一面 1 小时、二面 1 小时、三面 30 分钟）<br>一面<br>全排列<br>问项目，查得很细，所有的点都问了一遍，基本上围绕简历来问的质疑了一下交互时间取值<br>使用深度模型的话为啥使用 deepfm 而不使用 wide&amp;deep 之类的<br>二面<br>问我为什么坚定的想做推荐？<br>问了 precision recall，问了 bagging boosting<br>xgboost 和 lightgbm 之间区别<br>场景题，如果输入某关键词进行搜索 对于返回的结果可以从哪些方面进行设计？这个是开<br>放题大家见仁见智<br>再有就是问了一些基本的分类指标 AUC/F1score/Precision/Recall/MAP/NDCG 等 等<br>（ MAP:<a href="https://blog.csdn.net/u014203453/article/details/77598997">https://blog.csdn.net/u014203453/article/details/77598997</a>, NDCG: <br><a href="https://blog.csdn.net/u010670689/article/details/73196054">https://blog.csdn.net/u010670689/article/details/73196054</a>）<br>以及 usercf itemcf 相应的知识（<a href="https://blog.csdn.net/xmu_jupiter/article/details/48029165">https://blog.csdn.net/xmu_jupiter/article/details/48029165</a>）<br>再有就是 DNN 与 DeepFM 之间的区别<br>Wide&amp;Deep 与 DeepFM 之间的区别<br>问了 auc 的时间复杂度<br>连续特征如何进行离散化？<br>最近新看了哪些前沿算法<br>三面<br>自我介绍，问专业<br>最打动面试官的项目亮点？<br>有没有得到一些方法论上的东西？（说了特征构建上的心得）<br>介绍了一下 Fß score（precision/recall 的 tradeoff）<br>质疑了一下训练数据时间窗口的选取<br>场景题，问只有 key-click 数量-order 数量，问如何进行条图的推荐，设计一个指标。这个<br>也是见仁见智<br>介绍了整个部门的情况，问了一下日常工作<br>hr 面 9.17<br>就是一些基本的问题，工作城市意向，对未来职业的规划之类的，自己的优缺点等等<br><strong>美团机器学习算法岗北京现场三面凉经</strong><br>作者：wxzzzz<br>链接：<a href="https://www.nowcoder.com/discuss/284006?type=2%E2%84%B4=3&pos=15&page=1">https://www.nowcoder.com/discuss/284006?type=2ℴ=3&amp;pos=15&amp;page=1</a><br>来源：牛客网<br>一面技术面：<br>简单自我介绍+介绍项目+机器学习相关算法介绍、理解，例如：逻辑回归、支持向量机，神<br>经网络，欠拟合和过拟合，GBDT、XGB 等手撕代码：求 2^N 次方（当时想了用移位），求 N 的阶乘有多少个 0（这个简单，N // 5）<br>开放性问题，怎么处理特征、怎么选择模型<br>平时用什么开发，python 或者 C++<br>二面技术面：<br>简单自我介绍+介绍项目<br>项目问了很多细节<br>智力题：一个小时平均闯红灯 5 次，问一个小时闯红灯 6 次的概率，这个就泊松分布。一家<br>人两个孩子，已知一个是女儿，问两个都是女儿的概率，这个简单，条件概率而已<br>代码题：区间合并，这个按区间左边界排序，再一次遍历就可以了<br>三面 leader 面：<br>中间被鸽了两次<br>简单自我介绍+介绍项目<br>项目问了很多细节<br>代码题：判断一个链表是否有环，这个快慢指针就可以解决。<br>基础题：LR 和 SVM 的区别，SVM 核函数如何选择<br>顺便聊了一下意向和未来规划<br>感觉跟面试官谈笑风生，最后把我挂了，我也是无语。<br><strong>美团机器学习/数据挖掘一二面面经</strong><br>作者：雲水謡<br>链接：<a href="https://www.nowcoder.com/discuss/270180?type=2%E2%84%B4=3&pos=16&page=1">https://www.nowcoder.com/discuss/270180?type=2ℴ=3&amp;pos=16&amp;page=1</a><br>来源：牛客网<br>一面：<br>１. 五年以内的职业规划<br>２. 介绍最有成就感的项目（图像、ＣＶ项目）<br>３. 分条概括项目的难点，怎么尝试解决的<br>４. 解决过拟合的方法有哪些<br>５. ｄｒｏｐｏｕｔ的随机失活因子以及怎么反向传播<br>６. 池化层如何反向传播<br>７. ＢＮ底层如何计算，手撕ＢＮ，ＢＮ在训练、测试阶段的计算有什么区别<br>８. ＳＶＭ的松弛因子作用<br>９. 树模型节点划分的依据，如何理解基尼系数的概念<br>１０.并发和并行的区别<br>１１.第一范式、第二范式<br>１２.手撕２的Ｎ次方<br>二面：１．聊项目（图像、ＣＶ项目），难点怎么解决的<br>２. ＲｅｓＮｅｔ为什么能够保证很深的网络具备不错的效果？<br>３. 问一些一面聊过的ＤＬ、ＭＬ基础知识<br>４. ＧＡＮ、ＬＳＴＭ、ＧＲＵ、ＮＬＰ相关的大概聊聊，主要我是图像背景，文本、推荐<br>相关的不咋懂，聊不下去<br>５. ＸＧＢｏｏｓｔ、ＧＢＤＴ<br>６. 手撕如何使用ｒａｎｄ７（）生成ｒａｎｄ１０（）<br>７. 个人的规划，是不是一定要做图像相关的？<br>８. 平时如何进行技术的学习、积累，用哪些途径？<br>９. 在实验室的出勤作息，每天除实验室工作外，个人进行自我技术学习、提升的有效时间<br>能够保证多少？<br><strong>美团 配送 算法岗 面经</strong><br>作者：超级小玄<br>链接：<a href="https://www.nowcoder.com/discuss/264276?type=2%E2%84%B4=3&pos=20&page=1">https://www.nowcoder.com/discuss/264276?type=2ℴ=3&amp;pos=20&amp;page=1</a><br>来源：牛客网<br>一面（70min）<br>1 介绍一下你的研究方向<br>2 这两个项目讲一下<br>3 实习说一下<br>4 我觉得很适合，那我们做两道题吧，最长递增序列<br>5 五个外卖，先取后送，一共十个点，有多少种排列组合情况<br>6 java 里 static 意味着什么<br>7 final 意味着什么，final 标记的类实体中属性值是否可以修改？<br>8 你还有什么问题吗<br>二面（75min）<br>1 介绍一下你的研究方向<br>2 如何看待 simulation 与实际情况的 gap<br>3 你觉得外卖配送难点在哪<br>4 压单合包问题你有什么想法<br>5 记不清了，主要围绕他们组的合包问题在讨论<br>三面（80min）<br>1 介绍下研究方向<br>2 讲一下你这篇论文<br>3 你的这种方法怎么和高级方法结合，你这个 1 秒内求得解，但我现在只要求五秒，剩下 4<br>秒你做什么<br>4 做一个优化项目你的套路是什么，经验是什么 5 你觉得项目中最大的问题是什么<br>6 围绕运筹学和配送里面的订单骑手匹配问题聊了很久<br>7 你还有什么问题？<br>8 加一下你微信吧？<br>HR 面（30min） <br>1 自我介绍<br>2 实习经历说一下<br>3 说一下你最拿得出手的事<br>4 说下你在项目中遇到的最大困难，你怎么解决的，学到了什么<br>5 导师怎么评价你<br>6 还跟哪几个公司再谈<br>7 意向工作地点<br>8 能来实习吗？何时毕业<br>技术加面（60min）<br>1 自我介绍<br>2 方法详细讲一下<br>3 你大件仿真模型的经验和心得<br>4 做学术遇到的最大困难，怎么解决的<br>5 项目和学术结合怎么做<br>6 问题中的随机性怎么处理，gps 不准，天气多变？<br>7 你未来两年内的规划<br>8 怎么实现你的规划，你都准备做哪些事<br>9 现在还在跟哪些公司谈<br>10 你还有什么问题吗</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>美团点评企业文化</title>
      <link href="/2021/03/06/rrovdv/"/>
      <url>/2021/03/06/rrovdv/</url>
      
        <content type="html"><![CDATA[<p>美团点评企业文化<br>美团的使命是“帮大家吃得更好，生活更好”。作为中国领先的生活服务电子商务平台，公司<br>拥有美团、大众点评、美团外卖等消费者熟知的 App，服务涵盖餐饮、外卖、打车、共享单<br>车、酒店旅游、电影、休闲娱乐等 200 多个品类，业务覆盖全国 2800 个县区市。截至 2019<br>年 9 月 30 日止十二个月，美团年度交易用户总数达 4.4 亿，平台活跃商户总数达 590 万，<br>用户平均交易笔数为 26.5 笔。<br>2018 年 9 月 20 日，美团点评（股票代码：3690.HK）正式在港交所挂牌上市。<br>当前，美团战略聚焦 Food +Platform，正以“吃”为核心，建设生活服务业从需求侧到供给侧<br>的多层次科技服务平台。与此同时，美团正着力将自己建设成为一家社会企业，希望通过和<br>党政部门、高校及研究院所、主流媒体、公益组织、生态伙伴等的深入合作，构建智慧城市，<br>共创美好生活。<br><strong>帮大家吃得更好，生活更好</strong><br>美团点评作为一家吃、喝、行、游、购、娱一站式的平台，我们要创造的价值不仅是帮大家<br>吃得更好，还要为人们的生活创造更多的价值，帮大家日常生活的方方面面变得更好，帮大<br>家的旅行生活变得更好。<br>吃得更好 Eat Better<br>吃得更好是所有人的需求，因此美团点评终极目标是希望消费者吃得好一点。不仅在广度上<br>去涵盖亿万人的需求，也致力于长久地帮大家吃得更美味、更便捷、更健康。因此餐饮是我<br>们的重中之重，美团点评将做深做透做大餐饮的战略布局，从营销、配送、IT 系统、供应链<br>等多角度全方位服务餐饮行业。<br>生活更好 Live Better<br>消费者需要吃饭，需要看电影，需要旅游，需要住酒店，需要理发， 需要各种各样的生活<br>服务。美团点评将在更多的消费场景中为用户和商户创造价值，实现我们的企业使命：帮大<br>家吃得更好，生活更好。<br><strong>美团点评价值观</strong><br>我们相信有一些简单朴素的理念，吸引着和我们相似的人，共同完成一件件平凡而伟大的事<br>情，这就是我们的价值观。<strong>以客户为中心</strong><br>客户需求是公司所有策略、行动的最重要的输入，帮客户解决问题，借此创造价值，公司才<br>有存在的理由。<br><strong>正直诚信</strong><br>诚信经营是公司持续发展的根本。在原则问题面前，我们宁愿牺牲短期利益，来换取长期的<br>成功。<br>“德才兼备，以德为先”也是公司干部选拔任用的导向。<br><strong>合作共赢</strong><br>我们的业务，相比绝大多数互联网公司，业态复杂多样，流程环节多，只有各平台及各业务<br>线，线上线下各团队，包括生态链上的合作伙伴，一起高效合作才能服务好我们的客户。<br><strong>追求卓越</strong><br>我们的业务需要我们持续改进的卓越服务赢得客户口碑，低毛利的行业特点要求我们极致的<br>追求流程改进及效率优化以构筑成本领先的竞争壁垒，这些都需用我们用精益求精的产品和<br>技术提供支撑。<br>我们所处的行业一日千里，要求我们是一个学习型组织，持续进化，也需要我们每个人持续<br>学习成长，超越自我。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>百度企业文化</title>
      <link href="/2021/03/06/zvgfoi/"/>
      <url>/2021/03/06/zvgfoi/</url>
      
        <content type="html"><![CDATA[<p><strong>百度企业文化</strong><br><a href="http://talent.baidu.com/external/baidu/index.html#/museum/p2">http://talent.baidu.com/external/baidu/index.html#/museum/p2</a><br><strong>百度使命</strong><br>让人们最平等便捷地获取信息，找到所求<br>“不管你是边陲小镇的农民，还是残障人士，通过百度搜索每个人离信息的距离都是一<br>样的。 互联网不仅是一个技术的互联网，更多的是人的互联网。我们希望让所有中国<br>人，以至亚洲， 以至全世界的人类，最平等便捷地获取信息，找到所求“<br>——李彦宏<br><strong>百度核心价值观</strong><br>简单，可依赖。<br><strong>百度人才观</strong><br>招最好的人，给最大的空间，看最后的结果，让优秀人才脱颖而出。<br>互联网公司，最有价值的就是人。 我们的办公室服务器会折旧，但一个公司，始终在<br>增值的就是公司的每一位员工。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里巴巴内部级别和薪资待遇</title>
      <link href="/2021/03/06/dgxcw5/"/>
      <url>/2021/03/06/dgxcw5/</url>
      
        <content type="html"><![CDATA[<p><strong>阿里巴巴内部级别和薪资待遇</strong><br><strong>级别划分：</strong><br>P  为  Profession  的首字母，是阿里巴巴技术岗位的序列号。<br>分为  P1-P12，P1、P2  一般空缺，为非常低端岗位预留，P3-助理，P4-专员，P5-高级<br>工程师，P6-资深工程师，P7-技术专家，P8-高级专家，P9-资深专家，P10-研究员，<br>P11-高级研究员，P12-科学家。<br>其中  P6、P7、P8  需求量最大，也是阿里占比最大的级别。<br>M  是  manager  的首字母，是阿里巴巴管理岗位的序列号。<br>分为  M1-M10，M1-主管，M2  经理，M3-高级经理，M4-总监，M5-高级总监，M6-副总<br>裁，M7-资深副总裁，M8-子公司  CEO，M9-副主席/执行副主席，M10-董事会执行主<br>席。<br><strong>马云属于  M10  级别。</strong><br>P  与  M  也有相关对应关系：P6  相当于  M1，P7  相当于  M2，P8  相当于  M3，P9  相当于<br>M4，P10  相当于  M5，以此类推。<br>你可以专注在技术领域发展，拥有比管理线路更丰厚的薪资回报。<br>**<img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1615011640788-4bbfe490-6881-4832-b721-9851eb339bea.png#align=left&display=inline&height=507&originHeight=1014&originWidth=1312&size=256776&status=done&style=none&width=656" alt="image.png">**<br><strong>薪资结构：</strong><br>一般为  12+1+3=16  薪。<br>年终奖不与工资挂钩，而是根据员工对公司的贡献分配，它由所属子公司、部门、以<br>及员工个人的绩效所决定。<br>股票是工作满  2  年才能开始拿，第一次可以拿  50％，4  年能拿完。<br><strong>薪资水平：</strong><br>职位达到公司中层水平才能拿股票，而  P6（M1）以上才属于中层。P4  以下、P10  以<br>上没有具体数据<br>关于薪酬，阿里的薪酬现金部分，和百度相比变化不大，现金部分与行业相比没优势；</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1615011678743-f5cb4f0a-e26b-4671-8005-9b454164ce26.png#align=left&display=inline&height=188&originHeight=376&originWidth=1272&size=156638&status=done&style=none&width=636" alt="image.png"><br>关于股票期权，上市前，P6  给期权(P6-2000,P7-3000)；上市后，P6  几乎不给了，P7<br>的股票也降了；<br><strong>晋升机制：</strong><br>1、上年度  KPI（关键绩效指标）3.75  及以上；<br>2、主管推荐；<br>3、晋升委员会面试 （晋升委员会成员为合作方业务部门高管、HRG、该业务线高管<br>等）；<br>4、晋升委员会投票选择<br><strong>阿里绩效考核分两块：50%价值观+50%业绩。</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1615011762612-0ba2116b-b567-4082-a160-ffc5a3ca5f3b.png#align=left&display=inline&height=383&originHeight=766&originWidth=1178&size=289162&status=done&style=none&width=589" alt="image.png"><br>在  HR  眼中，员工一般被分成以下几种：<br>1、「WILD DOG」：业绩优秀，但价值观不符。<br>2、「RABBIT 」：没有业绩的老好人。<br>3、「STAR」：有业绩也有团队精神，也常被形容为「猎狗」。<br>4、「BULLRING」：业绩一般达标，价值观基本相符。<br>5、「DOG」：业绩和价值观都不达标。<br>阿里的绩效打分体系有严格的排序，以前是「2-7-1」，现在是「3-6-1」（10  人以上<br>团队），这也是阿里被广受争议的制度之一。<br>也就是说，30%的员工可以评为「最好」，10%的一定会被评为「较差」，60%的人<br>为「一般水平」——这是强制分布的，每次考评，团队的分数都要符合这个「3-6-1」<br>的分布。<br>绩效考评的方法是什么？<br>阿里的考评根据员工的层级划分为两种： 1）M3/P8  及以下，实行通关制<br>通过季度考核、年度总分将依据员工四个季度的平均分和价值观改进趋势给出<br>2）M4/P9  及以上，不执行通关制<br>以述职为主要方式进行直接打总分。<br>⾦字塔型结构，刚开始晋升容易，到更⾼的级别，晋升难。尤其想要升到  P6、P7  很难，<br>因为这两个级别相当管理级别，从被管理者升级为管理者，可以想象是⽐较难的，继<br>续往上会更难。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里巴巴企业文化</title>
      <link href="/2021/03/06/pxie6w/"/>
      <url>/2021/03/06/pxie6w/</url>
      
        <content type="html"><![CDATA[<p><strong>阿里巴巴企业文化</strong><br><a href="http://www.alibabagroup.com/cn/about/culture">http://www.alibabagroup.com/cn/about/culture</a><br><strong>阿里巴巴集团的使命是让天下没有难做的生意。</strong><br><strong>愿景：</strong><br>旨在构建未来的商务生态系统。愿景是让客户相会、工作和生活在阿里巴巴，并持<br>续发展最少  102  年。<br>阿里巴巴集团的文化关乎维护小企业的利益。<br>阿里巴巴经营的商业生态系统，让包括消费者、商家、第三方服务供应商和其他人<br>士在内的所有参与者，都享有成长或获益的机会。<br>阿里巴巴的业务成功和快速增长有赖于我们尊崇企业家精神和创新精神，并且始终<br>如一地关注和满足客户的需求。<br>阿里巴巴相信，无论公司成长到哪个阶段，强大的共同价值观都可以让阿里巴巴维<br>持一贯的企业文化以及公司的凝聚力。<br><strong>阿里巴巴的价值观：</strong><br>阿里巴巴集团的六个价值观对于如何经营业务、招揽人才、考核员工以及决定员工报<br>酬扮演着重要的角色，该六个价值观为：<br>**客户第一  **—— 客户是衣食父母<br>**团队合作  **—— 共享共担，平凡人做平凡事<br>**拥抱变化  **—— 迎接变化，勇于创新<br>**诚信  **—— 诚实正直，言行坦荡<br>**激情  **—— 乐观向上，永不放弃<br>**敬业  **—— 专业执着，精益求精</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿⾥巴巴最新Java笔试题</title>
      <link href="/2021/03/06/uudtih/"/>
      <url>/2021/03/06/uudtih/</url>
      
        <content type="html"><![CDATA[<p><strong>阿⾥巴巴最新 Java 笔试题汇总</strong><br><strong>单选题  **<br>**1.有个特殊的餐厅，对客⼈的要求是如果要离开餐厅⼀定要看下餐厅内有没有⽐你迟进来的  **<br>**⼈，⼀定要所有⽐你迟进来的⼈离开后你才能离开，有⼀天甲，⼄，丙，丁四个客⼈先后进⼊  **<br>**了这家餐厅，那么他们离开的顺序不可能是： **<br>A. 丙，⼄，甲，丁  <br>B.甲，⼄，丙，丁  <br>C. ⼄，甲，丙，丁  <br>D.⼄，丙，甲，丁  <br>E.丁，丙，甲，⼄  <br>F.丁，丙，⼄，甲  <br>**2.在关系型是数据库中，有两个不同的事务同时操作数据库中同⼀表的同⼀⾏，不会引起冲突  **<br>**的是： **<br>A.其中⼀个 DELETE 操作，⼀个是 SELECT 操作  <br>B.其中两个都是 UPDATE <br>C.其中⼀个是 SELECT，⼀个是 UPDATE <br>D.其中⼀个 SELECT <br>E.其中⼀个是 DELETE，另⼀个是 UPDATE <br>F.两个都是 DELETE <br>**3.众所周知我们所处的宇宙的质能公式是 E=mc 2 ，其中 c 是真空中的光速。和我们的宇宙平  **<br>**⾏的另⼀个宇宙 meta，研究显示他们使⽤的质能公式是 E=(2+ √3)m ，当⼀个物体的质量很  **<br>**⼤的时候，对应的能量 E ⾮常⼤，数据也⾮常的⻓。但 meta 宇宙⾥⾯的智慧⽣物⾮常的懒，他  **<br>**们只愿意把 E 取整，然后记录对应的能量 E 的最后⼀位整数，⽐如 m=0 时，他们会记录 1，m=1 **<br>**时，他们会记录 3，m=2 时，他们会记录 3.现在请问当 m=80 时，他们会记录多少？ **<br>A.1B.2 <br>C.3 <br>D.4 <br>E.5 <br>F.6 <br>**4.⻚⾼速缓存是 Linux kerne 使⽤的主要的磁盘缓存技术。它允许系统把存放在磁盘上的⼀些数  **<br>**据保留在内存中，以便减少对磁盘的访问。进程对⻚⾼速缓存区中的数据修改之后，数据⻚被  **<br>**标记为“脏数据”在下列哪些条件下，脏数据不会被写⼊磁盘？ **<br>A.⻚⾼速缓存空间不⾜  <br>B.突然断电  <br>C.变脏以来，太久没有过更新  <br>D.通过系统调⽤（sync（），fsync（），fdataasync（））来强⾏对将对快设备的更新同步  <br>到磁盘  <br>E.内存⾜够⼤  <br>F.磁盘⾜够⼤  <br>**5.设⼀组初始关键字记录关键字为（ 12,15,1,18,2,35,30,11 ），则以  12  为基准记录的⼀趟  **<br>**快速排序结束后的结果为  **<br>A.11，1，2，12，35，18，30，15 <br>B.11，2，1，12，15，18，35，30 <br>C.1，2，11，12，15，18，35，30 <br>D.11，2，1，12，18，35，30，15 <br>E.1，2，11，12，15，18，30，35 <br>F.以上都不是  <br>**6.多项式  P(X)=a+bx+cx^2+dx^3 ，对于任意  x ，计算  P(X)  中最少需要⽤到乘法操作的次数  **<br>**是多少？ **<br>A.3 <br>B.4 <br>C.5 <br>D.6E.1 <br>F.2 <br>**7.有⼀个班 31 ⼈，⼥同学 15 ⼈，男同学 16 ⼈，现在要玩⼀个结组游戏，每组由男⼥两名同学  **<br>**构成，每个同学最多只能在⼀个组。结组的同学可以到⽼师那⾥领 100 元钱，然后按照预先分  **<br>**配的协议进⾏分配，钱最⼩可分单元为 1 元。未能结组的同学⽆法领到钱，不允许在组之间传  **<br>**递利益。那么⼀下命题正确的是： **<br>A.男⽣和⼥⽣可以得到⼀样多的钱  <br>B.男⽣最多得 49 元  <br>C.男⽣最多得 47 元  <br>D.男⽣最多得 46 元  <br>E.男⽣最多得 1 元  <br>F.男⽣最多得 0 元  <br>**8.现代的企业是建⽴在⼤规模协作的基础上的，员⼯之间，团队之间，部⻔之间，企业之间的  **<br>**协作都是成功的重要因素。好的企业在协作上是⾼效的。以下说法中不合适的是（） **<br>A.⼀个项⽬能容纳的⼈员是有限的，当增加到⼀定规模项⽬进度反⽽会变慢。 <br>B.⼀个项⽬协作为了办证信息对称，多⽅参与的情况下直接召集多⽅在⼀起开会就能协调好  <br>C.协作建⽴的条件包括互补和共赢  <br>D.能⼒结构类似的成员之间较多样互补型员⼯之间更容易产⽣竞争关系  <br>E.协作中的权利和责任应当相称  <br>F.如果有可能的话，信息交互较多的事务更合适在⼀个团队内或有⼀个⼈完成，相较于进⾏分  <br>⼯。<br>**9.以下程序的运⾏结果是？</strong>A.foobar <br>B.barfoo <br>C.foobar 或者 barfoo 都有可能  <br>D.Bar <br>E.Foo <br>F.程序⽆法正常运⾏  <br><strong>10.输⼊图⽚⼤⼩为 200×200，依次经过⼀层卷积（kernel size 5×5，padding 1，stride **<br>**2），pooling（kernel size 3×3，padding 0，stride 1），⼜⼀层卷积（kernel size 3×3， **<br>**padding 1，stride 1）之后，输出特征图⼤⼩为： **<br>A.95 <br>B.96 <br>C.97 <br>D.98 <br>E.99 <br>F.100 <br>**11.⼀个⼆叉树有 100 个⼦节点数为 2 的节点，100 个⼦节点数为 1 的节点，那么个⼦节点数为 0 **<br>**的节点（叶节点）的个数为： **<br>A.101 <br>B.100 <br>C.200 <br>D.300E.99 <br>F.1 <br>**12.某种类型的双核  CPU  的性能提升了  1/3 ，假定该提升是通过对每条指令缩短执⾏时间实  **<br>**现的，那么它每条指令执⾏时间缩短了  () 。 **<br>A.1/4 <br>B.1/8 <br>C.1/3 <br>D.1/6 <br>E.1/5 <br>F.1/2 <br>**13.⼀个 map-reduce 任务由 m 个 mapper 和 r 个 reducer 构成，计算的效率可以认为正⽐于 mr 的  **<br>**乘积（数据管道的个数），在限定任务的 mr 乘积约等于 10000 的情况下，假定每个 mapper 和  **<br>**每个 reducer 的成本分别为 1 和 7，那么最佳的资源分配最接近于以下哪个⽅案？ **<br>A.mapper100 个，reducer100 个  <br>B.Mapper200 个，reducer50 个  <br>C.Mapper264 个，reducer38 个  <br>D.Mapper316 个，reducer32 个  <br>E.Mapper500 个，reducer20 个  <br>F.Mapper1000 个，reducer10 个  <br>**14.如果你有相关经验，很多景点的餐馆商铺经营⽅式很有趣。以下描述错误的是： **<br>A.由于景点的⼤部分顾客是⼀次性的，因此商铺的信⽤在其他条件相同时可能更低  <br>B.景点的餐馆为了招揽顾客使⽤托⼉会⽐居⺠区的餐馆使⽤托⼉效果好  <br>C.景点常常卖⼀些当地特产，⽐如⻘岛的海边会有卖⻉壳的，这些⻉壳产⾃附近的海域  <br>D.店铺使⽤托⼉的有效原因是，⼈们常常做出多数⼈做出的选择，⽽忽视⾃⼰⾃然状态下的  <br>决策<br>E.⼀些景点在出⼝位置上安排⼀个商店，商店内的通道曲折，为的是顾客多花些时间看东⻄  <br>F.景点内⼀些玩射箭的场所经营状况会⽐在居⺠区附近设置的类似场所好，原因是景点内的游  <br>⼈玩起来更在状态</strong>15.⼀个机器⼈玩抛硬币的游戏，⼀直不停的抛⼀枚不均匀的硬币，硬币有 A,B 两⾯，A ⾯的概  **<br><strong>率为 3/4，B ⾯的概率为 1/4。问第⼀次出现连续的两个 A 年的时候，机器⼈抛硬币的次数的期  **<br>**望是多少？ **<br>A.9/4 <br>B.11/4 <br>C.15/4 <br>D.4 <br>E.5 <br>F.28/9 <br>**16.⼩ a 和⼩ b ⼀起玩⼀个游戏，两个⼈⼀起抛掷⼀枚硬币，正⾯为 H，反⾯为 T。两个⼈把抛到  **<br>**的结果写成⼀个序列。如果出现 HHT 则⼩ a 获胜，游戏结束。如果 HTT 出现则⼩ b 获胜。⼩ a 想  **<br>**问⼀下他获胜的概率是多少？ **<br>A.3/4 <br>B.1/2 <br>C.2/3 <br>D.5/9 <br>E.1/3 <br>F.1/4 <br>**17.假定某同学使⽤ Naive Bayesian（NB）分类模型时，不⼩⼼将训练数据的两个维度搞重复  **<br>**了，那么关于 NB 的说法中正确的是： **<br>A.这个被重复的特征在模型中的决定作⽤会被加强  <br>B.模型效果相⽐⽆重复特征的情况下精确度会降低  <br>C.如果所有特征都被重复⼀遍，得到的模型预测结果相对于不重复的情况下的模型预测结果  <br>⼀样。 <br>D.当两列特征⾼度相关时，⽆法⽤两列特征相同时所得到的结论来分析问题  <br>E.NB 可以⽤来做最⼩⼆乘回归  <br>F.以上说法都不正确  <br>**18.以下哪个⾏为，不会明显加剧客户端运⾏过程中的卡顿： **<br>A.在主线程集中处理耗时的操作 B.在⼦线程集中处理耗时的操作  <br>C.在其它进程集中处理耗时的操作  <br>D.提⾼后台线程的优先级  <br>E.降低主线程的优先级  <br>F.⻚⾯存在多个重叠显示的控件  <br>**19.以下程序的输出是： **<br>A.1，6 <br>B.2，5 <br>C.2，4 <br>D.3，5 <br>E.4，7 <br>F.1，1 <br>**问答题  **<br>**20.题⽬描述</strong>学校图书馆共有 300 万册图书，想统计其中 Computer ， Science ，计算机，科学这⼏个词  <br>出现的次数，并按照⾃然年度分类，如 2016 年出版的书籍中这⼏个词各⾃出现的次  <br>数， 2015 年······依次类推。 <br>**21.题⽬描述  **<br>设计接⼝并且实现⼀个多线程安全的堆，并且要求可以删除堆中任意元素（⾮堆顶元素），要  <br>求尽量⾼效，假设已有标准的 mutex 实现可以使⽤。 <br>**22.题⽬描述  **<br>淘宝上的每个宝⻉⼀般都有个默认的全国邮费（也可能没有），同时也⽀持到特定省份有特定  <br>的邮费，如果到特定的省份没有特别的邮费就⽤默认的全国邮费。请：  1.设计⼀个存储结构来保存⼀个宝⻉的所有邮费信息；（简单⽤⽂字阐述⼀下做法）  2.给定⼀个宝⻉的邮费存储信息和⼀个省份，编程快速得出宝⻉到此省的邮费。 注意：邮费  <br>的类型是 uint32_t，此外由于商品数量⾮常⼤（假定⼗亿量级），查询量也⾮常⼤，对存储和  <br>查询的效率要求⾮常⾼，因此存储效率和查询效率是考察的重点。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里巴巴面经合集</title>
      <link href="/2021/03/06/kaz11q/"/>
      <url>/2021/03/06/kaz11q/</url>
      
        <content type="html"><![CDATA[<p><strong>阿里巴巴面经合集</strong><br><strong>一、Java  研发工程师</strong><br>一面（1h+）<br>对简历进行  DFS，每个地方都问到不会为止。手撕了一道剑指原题。最后对实习项目<br>没有上线表示有点不足。<br>二面（50mins）<br>基本全是  JAVA  基础，还有一道智力题：三点十五分，时针和分针的夹角。<br>三面（20mins）<br>被鸽了一次，隔了两天。<br>实习项目（第一次碰到面试官比我还懂我们项目在做啥的，被问懵了，最后被指导了<br>十几分钟，有醍醐灌顶的感觉）。JAVA  基础，计算机网络基础。<br>四面，交叉面（20mins）<br>被鸽了两次，第三次才面上试，时隔两周。。。<br>实习项目，计算机网络基础（前面学的很多都不记得细节了，答得不太好，没想到也<br>过了）<br>HR  面（30mins）<br>不便透漏<br><strong>二、算法工程师</strong><br>一面：（一小时）<br>自我介绍，问项目，项目问了很多<br>如果向领导汇报，通俗易懂介绍反向传播<br>还有一些比较基础的问题忘记了。。。<br>你有什么一直坚持的习惯么？<br>觉得女生做程序员是否适合？<br>会什么语言？<br>在线写了一道非常简单的数组相关代码题。。很简单。。。<br>有什么想问的问题<br>总结——应该是简历面。可能因为没笔试或者性格测评一类的，所以问了一些人生相<br>关问题，还写了一下代码看看大致的代码基础。二面：（一小时）<br>自我介绍，项目相关<br>问了一些数据结构相关的知识，排序算法，堆一类<br>场景题，海量数据前  k  大<br>CNN  网络介绍，卷积核<br>GBDT  原理，是回归树还是分类树<br>GBDT  跟  xgboost  对比<br>xgboost  怎么并行化<br>激活函数相关，激活函数应该有什么性质<br>…(忘了，琐碎的知识点有点多) <br>会  ETL  工具么<br>会用什么语言<br>布隆过滤器知道吗？用在什么场景下？推导会么（加分项）<br>有什么问题？<br>总结——这一面可能是对基础知识的一个排查，考察知识面广度深度，问的不是表面<br>的问题，感觉需要对模型原理本质了解清楚。<br>三面：（一小时）<br>自我介绍，项目，问项目又问了很多<br>两个思考题？<br>怎么改善用户搜索后显示的内容的一个排序质量？说说有什么特征可以构建，用什么<br>模型？<br>单调递增数组，尽可能想一些方法将它们压缩。<br>总结——考查的是更深一点的吧。。看你有没有解决实际问题的一些能力，业务水平<br>怎么样。。。但是我是实在没做过多少项目，所以这一面回答的很差、、、<br>交叉面：（半个小时）<br>自我介绍，简历，有个项目问的很细，细化到那一步的代码是怎么实现的<br>最后简单问了几个问题，TFIDF  相关的啥的<br>Hr  面：（四十多分钟）<br>聊人生，没有按顺序，只想到了这些问题<br>对前面哪个面试官印象最好<br>有了解自己过来后会做什么方面的吗？<br>有没有思考过自己适合做什么，研究还是落地的工程？<br>想留在哪里？杭州考虑吗？家人什么态度<br>对你成长影响最大的人，除了父母，为什么周围有没有什么学术方面特别敬佩的人？你觉得是什么本质的原因支撑他这份热爱<br>（什么狗。。。）<br>自己导师什么风格的？最忙的时候是你什么样的状态？<br><strong>三、前端工程师</strong><br>一面<br>了解  es6  的那些特性<br>js  闭包是什么，什么是内存泄漏，如何解决内存泄漏问题<br>js  垃圾回收机制<br>js  基本数据类型（包括  es6  新增的  Symbol）<br>原生  ajax  原理，ajax  和  fetch  的区别，fetch  支持  http  的哪些方法<br>option  方法可以发送那些内容<br>CORS  原理<br>网络安全了解哪些？如何预防  sql  注入，XSS，CSRF <br>w3c  标准盒子模型和  IE  模型有什么区别<br>CSS  的  display  有哪些取值<br>iso  七层模型，每一层模型的经典协议<br>http1.0  和  http1.1  和  http2.0  的区别<br>es6  新增的数组方法<br>数组的  reduce  方法<br>js  中找到一个数组最大值的方法，分析复杂度<br>MVC  和  MVVM  的区别，MVVM  的优点<br>flex  布局用在哪些场景下<br>如何适配不同的屏幕<br>当时投了阿里一个多月了突然被捞了起来，很兴奋，答得也还算不错，面试官说后续<br>会有更深入的二面，然而一周后官网状态显示已结束…<br><strong>四、数据分析师</strong><br>一面<br>1、介绍一下  Hive；一道  Hive  题（A，B  两表，查询  B  表中没有，A  表中有的；关键字<br>段：学号，课程号）<br>2、反转字符串有哪几种方法<br>3、数据仓库的  ETL  怎么做<br>4、Python  用什么包 5、介绍一下词嵌入，one-hot  和  word2vec  的区别，word2vec  如何实现的<br>6、什么是维度建模<br>7、bagging  和  boosting  的区别<br>8、Arima  介绍，Arima  和  LSTM <br>9、如果数据量极大，怎么去定  Arima  的参数<br>10、平时怎么学习的<br>11、平时会读  paper  么/英文的  paper <br>12、接触  Python，Java，Hadoop  多久<br>13、运筹学了解么，动态规划用过么<br>14、运筹优化问题，有一堆大小，密度不一的石头，放入  4  个箱子，要求每个箱子的<br>石头的数量，质量，体积差不多，怎么做<br>15、会  Linux  么，会用  Class  么<br>16、Python  的编程规范知道多少<br>二面<br>1、自我介绍<br>2、编程中最喜欢哪门课，说明原因<br>3、喜欢运筹学么<br>4、国外交流学习中获得了什么<br>5、Python  用过哪些包<br>6、有没有读博的打算<br>7、发过什么论文<br>8、一道有关集群的运筹优化问题，留了  2  小时做<br>三面<br>1、自我介绍<br>2、介绍一下项目，你在团队中的作用，有什么结果么？<br>3、爬虫用的什么包<br>4、对于  Hive，Impala  的了解<br>5、介绍一下  OLAP；OLAP  的工具<br>6、对于算法了解么；介绍一下聚类分析有哪几种，之间的区别是什么<br>HR  面  <br>1、自我介绍(从本科到研究生的经历) <br>2、数据分析的项目<br>3、职业规划<br>4、可实习时间 5、对于工作内容的了解<br><strong>五、Java  工程师</strong><br>一面： 1.自我介绍 2.项目（怼哭的那种，很厉害，很多我没想到的地方） 3.事务传播<br>4.hashMap  和  hashTable<br>5.java1.8  新特性<br>6.hashMap  和  ConcurrentHashMap<br>7.java  内存回收机制<br>二面： 1.自我介绍 2.项目  1 3.项目  2<br>三面： 1.自我介绍 2.项目 3.变量的初始化顺序 4.类加载顺序 5.类加载机制 6.垃圾回收机制 7.异常的集成体系即捕捉异常的情况<br><strong>六、C++工程师</strong><br>一面：（30  分钟）<br>撕代码，反转链表<br>设计支持很多数据库的同步备份系统（开放性问题，阅读源码、学习别人的设计思路<br>很重要）<br>二面：（60  分钟）<br>muduo  网络库<br>自己的项目介绍<br>slect、epoll  区别网络编程流程<br>https  和连接建立过程<br>B+树<br>TOPk  的问题<br>hash  冲突解决<br>虚函数定义<br>实验室的项目（问了好久，大约  20  多分钟）<br>三面：（30  分钟）<br>实验室的项目<br>自己的项目介绍<br>看过那些源码<br>原子行操作<br>底层实现<br>高并发访问网站设计<br>大量已排序数据进行合并说明优化思路<br>set  和  map  底层数据结构实现，为啥用红黑树<br>HR  面:（20  分钟）<br>谈人生谈理想<br><strong>七、大数据开发工程师</strong><br>一面：<br>1、HDFS DataNode  死了怎么办，NameNode  发生了什么变化？<br>2、JVM GC  回收算法，各自优缺点，什么场景使用？<br>3、HashMap get  和  put  源码，为什么红黑而非平衡树？<br>4、CHM  结构，1.7/1.8  区别？<br>5、排序时间复杂度/空间复杂度，插入，归并等，很大的绝大部分有序的数组已经在<br>内存，选择什么排序算法，时间复杂度？<br>6、大数据问题，10G  的文件里面的数字排序<br>7、HA HDFS Zookeeper  什么作用，为什么要  Zookeeper？<br>二面：<br>1、小白鼠问题。16  瓶正常水，1  瓶毒水，小白鼠喝下毒水后一小时死亡，只给一小时<br>时间，最少用多少只小白鼠可以检测出  14  瓶正常水？<br>2、两根质地不均匀但是燃烧时间与绳子长度无关的一样的绳子，燃烧完一根绳子耗时<br>一个小时，只能用这两根绳子，如何准确烧出  15  分钟？3、数据库隔离级别，哪些导致脏读，哪些导致幻行？<br>4、分代收集算法<br>5、G1  垃圾回收器<br>6、线程池的核心参数，几种队列，分别干啥的<br>7、大数据流处理技术之间的实现原理以及区别<br>8、Hadoop1.x  和  2.x  之间的区别<br>9、你的实习经历中  ES  怎么调优的？<br>10、详细问项目（背景，职责）<br>11、生活上爱干啥<br>三面：这是部门老大<br>1、HBase  架构，为什么其随机查询很快？<br>2、ES  如何调优？<br>3、项目中让你出乎意料的收获？<br>4、小学的时候印象很深刻的事？正反面各一个<br>5、总结本科的学习，有什么方<strong>*？自己认为做的好的一点是什么？<br>其他还聊天聊了很久。<br>交叉面：（阿里云的高  P  大佬）<br>1、科研，问的很详细，背景、技术架构、意义<br>2、科研落地的话，要考虑什么问题，有什么不足？<br>3、ES  查询机制？<br>4、一个分布式系统，为什么测试的时候响应很快，而到实际线上部署时响应就会变慢？<br>分析可能原因并给出理由<br>5、分布式系统  CAP  理论，重点解释分区容错性的意义<br>6、大数据的特性<br>7、对虚拟内存的理解<br>8、有啥想问他的<br>Hr  面：<br>1、除了简历中的技术，还对什么技术感兴趣<br>2、城市选择<br>3、职业规划<br>4、怎么看待之前的面试官？有留下深刻影响的吗？<br>**八、安卓工程师</strong><br>电面：1.你常用的设计模式<br>2.listView  或  Recycler  上学滑动时卡顿的原因<br>UI  线程进行费时操作；GC  时暂停所有工作线程（这个真忽略了。。） 3.打开浏览器输入一个网址的背后发生了什么（这个真的很常见，大家一定要记住，<br>TCP  三次握手没让我说）<br>4.Https  比  Http  多的流程（这个感觉也很常见）<br>5.Https  流程很复杂，怎么简化（简化完全没有思路，然后面试官也就没让我说了）<br>6.Android  线程间通信（Handler  机制一定要弄懂）<br>7.Java  异常分类，举例。发生异常和  Error  有什么不同？<br>8.Rxjava（我就说自己只是写过  demo，这是函数式编程）<br>9.JVM GC  的种类和流程（Minor GC  和  Full GC，我***。。。电话打来我正在看，只回<br>答上  Minor GC，气死我了！！） 10.你还有什么想问吗？<br>笔试重要吗？不重要<br>计算机操作系统和编译原理这些重要吗？不重要<br>希望能收到二面电话。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里</title>
      <link href="/2021/03/06/caoqe4/"/>
      <url>/2021/03/06/caoqe4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>美团</title>
      <link href="/2021/03/06/iifou4/"/>
      <url>/2021/03/06/iifou4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>百度最新面经-Java 工程师</title>
      <link href="/2021/03/06/vacfrr/"/>
      <url>/2021/03/06/vacfrr/</url>
      
        <content type="html"><![CDATA[<p><strong>百度最新面经-Java  工程师</strong><br><strong>一、</strong><br><strong>百度一面：</strong>60  分钟<br>1、基础模块<br>java  中  Object  类有哪些方法，分别在什么场景下使用，== equals（）的异同<br>java  基础类型与所占的长度<br>hash  的时间复杂度<br>String  不可变性与  Stringbuild Stringbuffer  的使用<br>set  和  list  的区别，你是如何选择的<br>基本类抽象类接口的异同<br>设计模式，如何使用的，讲了一下我对设计模式的理解<br>2、数据库模块<br>mysql  的使用<br>聚簇索引，非聚簇索引，回表<br>联合索引，最左匹配原则，联合索引不回表的情况<br>多表联查强制使用某一个索引<br>mysql  事务隔离级别，如何选定<br>缓存数据库  memcache  的集群模式，一致性  hash <br>redis  的基本数据类型<br>3、网络模块<br>一个  url  请求的过程<br>http502 406 302  的意义<br>三次握手 四次挥手<br>4、vi  编辑器  nginx linux  命令<br>vi  编辑器的两种模式，跳转到最后一行<br>nginx  的模块化，break continu  的区别，<br>linux  查看大文件，查看负载命令<br>5、项目<br>介绍了我在京东做的项目的一些优化思路，设计思路<br><strong>百度二面：</strong>30  分钟 1、java  基础<br>java  并发包的一些问题，队列，线程池的设计，为什么这么设计<br>gc  的模式，算法，内存模型等<br>类加载，自己实现类加载 问的都比较实用，如果不是自己操作过，基本上不好回答<br>2、数据库<br>主从复制  mvcc  原理 索引类型<br>redis  持久化 这块问的比较多，记不清了<br>3、框架<br>spring  框架的使用，使用了哪些注解<br>spring  如何如何解决他们的  bean  循环依赖的（这个忘了，三级缓存）<br>springmvc  请求流程<br>还有一些也记不清了，没问我的项目<br>一面结束就通知我第二天二面，但是二面感觉还行，有两个问题没回答好，其他觉得<br>都不错，时间只有  30  分钟，不知道时间这么短 是什么意思，希望这次能过吧。<br><strong>二、</strong><br><strong>电话面试</strong>，面试官说话憨憨的哈哈哈哈（褒义词，很逗）<br>45min  1.自我介绍 2.介绍一下项目（15min） 3.设计题：用户关注和粉丝功能：（一，关注 二，取消关注 三，查看关注列表<br>和粉丝列表）10min <br>4.JAVA  基础  10min  4.算法题（挺简单两道）： 1.查找两链表公共节点（记着答案直接说了） 2.有序列表，每一位都平方后去重后的个数<br>：例【-1,1,2,3】——&gt;【1,4,9】 3  个数<br>第一反应哈希表，但空间复杂度有点高了，然后想了一会用头尾双指针往  0  逼近，找<br>绝对值相等的个数<br>5min  后  hr  来电话约晚上二面，希望有好运气哈<br><strong>三、自我介绍</strong><br>http  常用的代码<br>502  和  504  区别<br>mysql  索引<br>mysql  的  ACID <br>InnoDB  和  MyISAM  的区别<br>乐观锁悲观锁<br>HTTP  的特点<br>mysql  事务隔离级别及其作用<br>mysql  的主从同步<br>Java  的基本数据类型和占用字节<br>最左匹配原则<br>nginx  了解么<br>redis  的同步<br>redis  数据淘汰<br>RDB  和  AOF  的优缺点<br>AOF  是阻塞的么<br>分片数据会丢失么<br>一致性哈希算法<br>String  可以被继承么<br>final  的作用<br>阻塞队列<br>IO  模型和它们的使用场景 有几种  buffer <br>都会什么数据结构<br>分布式同步<br>平常用过什么设计模式？<br>OSI  模型第  4  层和第  7  层的区别，有什么协议<br>干过什么项目 项目用了什么框架 有没有分布式 大数据的经验<br>git  如何使用<br>常用  linux  命令<br>如何查看进程<br>awk <br>压缩包的命令是什么<br>使用过  memcache  么<br>都使用什么操作系统<br>mybatis  和  jdbc  的区别除了  Java  还用什么语言<br>大数据了解么<br>前端了解么<br>分布式了解么<br>项目的并发量是多少<br>有用什么框架么<br>上述问题由于没有经验所以都不会。。<br><strong>算法</strong><br>跳格子一次  2  到  3  格<br>excel  表格 第几行的行号是多少  1-26  行  abc…z  然后是  aa ab ac…az  以此类推<br><strong>四、</strong><br><strong>百度凤巢  Java  开发一面</strong><br>面试时间大约一个小时<br>问项目、实习<br>hashmap jdk7  和  8  的区别，链表长度大于  8  转成红黑树，put  源码，和  hashtable  区  <br>别<br>hashset  实现<br>concurrenthashmap  原理  7  和  8  的区别，深问细节<br>Java  内存模型，解释下各分区，A a = new A();a  存在哪（区分成员变量个局部变量）<br>垃圾回收算法，详细说分带算法，可作为  roots gc  的对象<br>类加载过程，双亲委派原则<br>线程状态<br>wait  和  sleep  啥区别<br>线程池，各种细节，参数，原理，阻塞队列，拒绝策略<br>三个线程  ABC，怎样保证顺序执行（我说了  join，信号量，最后让我用锁实现下）<br>synchronized  和  lock  啥区别，原理，公平锁与非公平如何实现（说到  AQS）<br>synchronized  锁升级<br>volatile  作用，实现原理<br>cas  原理，cas  产生的问题（ABA，占用  cpu）<br>索引有几种，聚簇和非聚簇，回表操作<br>索引失效情况<br>如何优化  mysql <br>mysql  存储引擎，区别索引用什么数据结构，为什么用  b+ <br>事务特性<br>隔离级别<br>脏读，不可重复读，幻读，解释<br>mvcc  是啥，如何实现的？<br>redis  数据类型<br>redis  持久化方式，原理，效率，区别<br>AOF  持久化是否包含查指令<br>spring  说几个注解<br>ioc  和  aop  原理及解释<br>动态代理，jdk  代理和  cglib  代理区别，实现<br>spring  事务<br>tcp  三次握手，为什么，两次有什么问题<br>https  请求过程<br>最后说电面就不问算法了，最近会再联系你，等二面了再来更<br><strong>五、</strong><br><strong>技术一面</strong><br>时间：40m；<br>形式：现场；<br>自我介绍；<br>问题：<br>Thread；<br>equals  和  hashCode  等；<br>volatile；<br>JMM；<br>垃圾回收，分代等；<br>synchronized；<br>单例模式；<br>ThreadLocal；<br>jvm  栈空间分配；<br>TCP/IP  五层模型；<br>各层常见协议；<br>HTTP  的报文结构；<br>HTTP  和  HTTPS；常见的  HTTP  头；<br>数据库隔离级别等；<br>快排特点等；<br>堆排怎么找左子节点；<br>Linux  分割文本的问题；<br>cookie  和  session；<br>简单难度的算法题，LeetCode  有原题；<br>上面那个题怎么优化空间复杂度；<br>反问：<br>部门问题；<br>主要技术栈；<br>是否会存在调岗；<br>后续面试安排；<br><strong>技术二面</strong><br>时间：40m；<br>形式：现场；<br>自我介绍；<br>问题：<br>简单或者中等的算法题，LeetCode  有原题；<br>口述算法题，10  亿个无排序数取最大的  1000  个；<br>阻塞队列；<br>Java  接口抽象类；<br>线程池；<br>ThreadLocal；<br>手写两句  sql  题；<br>Spring Boot；<br>MySQL  两个引擎；<br>优化数据库；<br>Spring  配置数据库驱动，参数类型等；<br>Linux、Docker、Nginx  的几个问题，答的不好；<br>Redis  单线程等；<br>前端的一个问题，并没有复习；<br>反问：<br>为什么会问前端问题（因为简历写了，但我没复习，尴尬）；<br>对我的建议；<br>后续流程；百度技术栈以及对应届生哪方面比较重视；<br><strong>主管面</strong><br>时间：44m；<br>形式：现场；<br>主要问学科发展，项目，设计理念，方法论等较上层面的问题；<br>最后聊了下程序员人生发展的问题等，整体还是挺愉快的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>百度</title>
      <link href="/2021/03/06/gogngr/"/>
      <url>/2021/03/06/gogngr/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>美团点评高频面试题 150 道</title>
      <link href="/2021/03/06/qrzqr3/"/>
      <url>/2021/03/06/qrzqr3/</url>
      
        <content type="html"><![CDATA[<p><strong>美团点评高频面试题 150 道 – Java 工程师</strong><br><strong>目录</strong><br>一、Java 集合 22 题 ………………………………………………………………………………………………………………………….1<br>二、JVM 与调优 21 题………………………………………………………………………………………………………………………2<br>三、并发编程 28 题…………………………………………………………………………………………………………………………..3<br>四、Spring 面试专题 ………………………………………………………………………………………………………………………..5<br>五、设计模式 …………………………………………………………………………………………………………………………………….6<br>六、Springboot 面试专题………………………………………………………………………………………………………………..7<br>七、Netty10 题 ………………………………………………………………………………………………………………………………….8<br>八、Redis ……………………………………………………………………………………………………………………………………………9<br><strong>一、Java 集合 22 题</strong></p><ol><li>ArrayList 和 Vector 的区别。</li><li>说说 ArrayList,Vector, LinkedList 的存储性能和特性。</li><li>快速失败 (fail-fast) 和安全失败 (fail-safe) 的区别是什么？</li><li>hashmap 的数据结构。</li><li>HashMap 的工作原理是什么?</li><li>Hashmap 什么时候进行扩容呢？</li><li>List、Map、Set 三个接口，存取元素时，各有什么特点？</li><li>Set 里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用 == <br>还是 equals()? 它们有何区别?</li><li>两个对象值相同 (x.equals(y) == true)，但却可有不同的 hash code，这句话<br>对不对?10. heap 和 stack 有什么区别。</li><li>Java 集合类框架的基本接口有哪些？</li><li>HashSet 和 TreeSet 有什么区别？</li><li>HashSet 的底层实现是什么?</li><li>LinkedHashMap 的实现原理?</li><li>为什么集合类没有实现 Cloneable 和 Serializable 接口？</li><li>什么是迭代器 (Iterator)？</li><li>Iterator 和 ListIterator 的区别是什么？</li><li>数组 (Array) 和列表 (ArrayList) 有什么区别？什么时候应该使用 Array 而<br>不是 ArrayList？</li><li>Java 集合类框架的最佳实践有哪些？</li><li>Set 里的元素是不能重复的，那么用什么方法来区分重复与否呢？是用 == <br>还是 equals()？它们有何区别？</li><li>Comparable 和 Comparator 接口是干什么的？列出它们的区别</li><li>Collection 和 Collections 的区别。<br><strong>二、JVM 与调优 21 题</strong></li><li>Java 类加载过程？</li><li>描述一下 JVM 加载 Class 文件的原理机制?</li><li>Java 内存分配。</li><li>GC 是什么? 为什么要有 GC？5. 简述 Java 垃圾回收机制</li><li>如何判断一个对象是否存活？（或者 GC 对象的判定方法）</li><li>垃圾回收的优点和原理。并考虑 2 种回收机制</li><li>垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么<br>办法主动通知虚拟机进行垃圾回收？</li><li>Java 中会存在内存泄漏吗，请简单描述</li><li>深拷贝和浅拷贝。</li><li>System.gc() 和 Runtime.gc() 会做什么事情？</li><li>finalize() 方法什么时候被调用？析构函数 (finalization) 的目的是什么？</li><li>如果对象的引用被置为 null，垃圾收集器是否会立即释放对象占用的内存？</li><li>什么是分布式垃圾回收（DGC）？它是如何工作的？</li><li>串行（serial）收集器和吞吐量（throughput）收集器的区别是什么？</li><li>在 Java 中，对象什么时候可以被垃圾回收？</li><li>简述 Java 内存分配与回收策率以及 Minor GC 和 Major GC。</li><li>JVM 的永久代中会发生垃圾回收么？</li><li>Java 中垃圾收集的方法有哪些？</li><li>什么是类加载器，类加载器有哪些？</li><li>类加载器双亲委派模型机制？<br><strong>三、并发编程 28 题</strong></li><li>Synchronized 用过吗，其原理是什么？2. 你刚才提到获取对象的锁，这个“锁”到底是什么？如何确定对象的锁？</li><li>什么是可重入性，为什么说 Synchronized 是可重入锁？</li><li>JVM 对 Java 的原生锁做了哪些优化？48</li><li>为什么说 Synchronized 是非公平锁？49</li><li>什么是锁消除和锁粗化？49</li><li>为什么说 Synchronized 是一个悲观锁？乐观锁的实现原理又是什么？什么<br>是 CAS，它有什么特性？</li><li>乐观锁一定就是好的吗？</li><li>跟 Synchronized 相比，可重入锁 ReentrantLock 其实现原理有什么不同？</li><li>那么请谈谈 AQS 框架是怎么回事儿？</li><li>请尽可能详尽地对比下 Synchronized 和 ReentrantLock 的异同。</li><li>ReentrantLock 是如何实现可重入性的？</li><li>除了 ReetrantLock，你还接触过 JUC 中的哪些并发工具？</li><li>请谈谈 ReadWriteLock 和 StampedLock。</li><li>如何让 Java 的线程彼此同步？你了解过哪些同步器？请分别介绍下。</li><li>CyclicBarrier 和 CountDownLatch 看起来很相似，请对比下呢？</li><li>Java 线程池相关问题</li><li>Java 中的线程池是如何实现的？</li><li>创建线程池的几个核心构造参数？</li><li>线程池中的线程是怎么创建的？是一开始就随着线程池的启动创建好的吗？</li><li>既然提到可以通过配置不同参数创建出不同的线程池，那么 Java 中默认实<br>现好的线程池又有哪些呢？请比较它们的异同 22. 如何在 Java 线程池中提交线程？</li><li>什么是 Java 的内存模型，Java 中各个线程是怎么彼此看到对方的变量的？</li><li>请谈谈 volatile 有什么特点，为什么它能保证变量对所有线程的可见性？</li><li>既然 volatile 能够保证线程间的变量可见性，是不是就意味着基于 volatile <br>变量的运算就是并发安全的？</li><li>请对比下 volatile 对比 Synchronized 的异同。</li><li>请谈谈 ThreadLocal 是怎么解决并发安全的？</li><li>很多人都说要慎用 ThreadLocal，谈谈你的理解，使用 ThreadLocal 需要注<br>意些什么？<br><strong>四、Spring 面试专题</strong></li><li>什么是 Spring 框架？Spring 框架有哪些主要模块？</li><li>使用 Spring 框架能带来哪些好处？</li><li>什么是控制反转(IOC)？什么是依赖注入？</li><li>请解释下 Spring 框架中的 IoC？</li><li>BeanFactory 和 ApplicationContext 有什么区别？</li><li>Spring 有几种配置方式？</li><li>如何用基于 XML 配置的方式配置 Spring？</li><li>如何用基于 Java 配置的方式配置 Spring？</li><li>怎样用注解的方式配置 Spring？</li><li>请解释 Spring Bean 的生命周期？11. Spring Bean 的作用域之间有什么区别？</li><li>什么是 Spring inner beans？</li><li>Spring 框架中的单例 Beans 是线程安全的么？</li><li>请举例说明如何在 Spring 中注入一个 Java Collection？</li><li>如何向 Spring Bean 中注入一个 Java.util.Properties？</li><li>请解释 Spring Bean 的自动装配？</li><li>请解释自动装配模式的区别？</li><li>如何开启基于注解的自动装配？</li><li>请举例解释@Required 注解？</li><li>请举例解释@Autowired 注解？</li><li>请举例说明@Qualifier 注解？</li><li>构造方法注入和设值注入有什么区别？</li><li>Spring 框架中有哪些不同类型的事件？</li><li>FileSystemResource 和 ClassPathResource 有何区别？</li><li>Spring 框架中都用到了哪些设计模式？<br><strong>五、设计模式</strong></li><li>请列举出在 JDK 中几个常用的设计模式？</li><li>什么是设计模式？你是否在你的代码里面使用过任何设计模式？</li><li>Java 中什么叫单例设计模式？请用 Java 写出线程安全的单例模式</li><li>在 Java 中，什么叫观察者设计模式（observer design pattern）？5. 使用工厂模式最主要的好处是什么？在哪里使用？</li><li>举一个用 Java 实现的装饰模式(decorator design pattern)？它是作用于对<br>象层次还是类</li><li>层次？</li><li>在 Java 中，为什么不允许从静态方法中访问非静态变量？</li><li>设计一个 ATM 机，请说出你的设计思路？</li><li>在 Java 中，什么时候用重载，什么时候用重写？</li><li>举例说明什么情况下会更倾向于使用抽象类而不是接口<br><strong>六、Springboot 面试专题</strong></li><li>什么是 Spring Boot？</li><li>Spring Boot 有哪些优点？</li><li>什么是 JavaConfig？</li><li>如何重新加载 Spring Boot 上的更改，而无需重新启动服务器？</li><li>Spring Boot 中的监视器是什么？</li><li>如何在 Spring Boot 中禁用 Actuator 端点安全性？</li><li>如何在自定义端口上运行 Spring Boot 应用程序？</li><li>什么是 YAML？</li><li>如何实现 Spring Boot 应用程序的安全性？</li><li>如何集成 Spring Boot 和 ActiveMQ？</li><li>如何使用 Spring Boot 实现分页和排序？12. 什么是 Swagger？你用 Spring Boot 实现了它吗？</li><li>什么是 Spring Profiles？</li><li>什么是 Spring Batch？</li><li>什么是 FreeMarker 模板？</li><li>如何使用 Spring Boot 实现异常处理？</li><li>您使用了哪些 starter maven 依赖项？</li><li>什么是 CSRF 攻击？</li><li>什么是 WebSockets？</li><li>什么是 AOP？</li><li>什么是 Apache Kafka？</li><li>我们如何监视所有 Spring Boot 微服务？<br><strong>七、Netty10 题</strong></li><li>BIO、NIO 和 AIO 的区别？</li><li>NIO 的组成？</li><li>Netty 的特点？</li><li>Netty 的线程模型？</li><li>TCP 粘包/拆包的原因及解决方法？</li><li>了解哪几种序列化协议？</li><li>如何选择序列化协议？</li><li>Netty 的零拷贝实现？9. Netty 的高性能表现在哪些方面？</li><li>NIOEventLoopGroup 源码？<br><strong>八、Redis</strong></li><li>什么是 redis?</li><li>Reids 的特点</li><li>Redis 支持的数据类型</li><li>Redis 是单进程单线程的</li><li>虚拟内存</li><li>Redis 锁</li><li>读写分离模型</li><li>数据分片模型</li><li>Redis 的回收策略</li><li>使用 Redis 有哪些好处？</li><li>redis 相比 memcached 有哪些优势？4</li><li>redis 常见性能问题和解决方案</li><li>MySQL 里有 2000w 数据，redis 中只存 20w 的数据，如何保证 redis 中的数<br>据都是热点数据 245</li><li>Memcache 与 Redis 的区别都有哪些？</li><li>Redis 常见的性能问题都有哪些？如何解决？</li><li>Redis 最适合的场景</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>百度内部级别和薪资待遇</title>
      <link href="/2021/03/06/qk5ehk/"/>
      <url>/2021/03/06/qk5ehk/</url>
      
        <content type="html"><![CDATA[<h3 id="百度内部级别和薪资待遇"><a href="#百度内部级别和薪资待遇" class="headerlink" title="百度内部级别和薪资待遇"></a>百度内部级别和薪资待遇</h3><h4 id="级别划分："><a href="#级别划分：" class="headerlink" title="级别划分："></a>级别划分：</h4><p>不同职能分为不同序列，各个序列从  1  到  12  不等。<br>不同序列的话语权和地位从高到低是：m(管理层)&gt;t (研发)&gt;p(产品)&gt;p(运营)=u(设  <br>计)&gt;b(商务市场等)。<br>只有  m  有管人的权限。每个序列内，一般应届生入职就是  3  到  5  相当于一线小领导，<br>6  就是比较<br>高级的人才，7  以上很了不起。全公司最高的  p  是  12，只有一个，跻身  est aff。<br>百度的薪资架构分成三条线：<br>第一条：P  级序列，主要针对产品经理和产品运营人员。<br>第二条：T  级序列，技术岗位。还有很奇葩的  S  级，即支持部门，级别和  T  级是一样<br>的，只不过升级非常难，主要是公共、行政、渠道等等。<br>技术岗位为  T  序列。T1-T12。<br>T1  为低端岗位，T2-助理，T3-专员，T4-高级工程师，T5-资深工程师<br>T6-技术专家，T7-高级专家，T8-资深专家，T9-研究员，T10  技术总监，T11  首席科<br>学家。<br>第三条：M  级序列，管理层。从一到五分成九级。<br>M1.1 M1.2 M2.1 M2.2 M3.1 M3.2 M4.1 M4.2 M5<br>最低的是  M1.1，至少是部门二把手了，李明远是  M3.2，以前的汤和松都是这个级别，<br>李彦宏是唯一的  M5，其实从  M3  开始就有机会加入  E-St aff ，类似于阿里的合伙人会<br>议，属于最高战略决策层。</p><h4 id="薪资结构："><a href="#薪资结构：" class="headerlink" title="薪资结构："></a>薪资结构：</h4><p>*<em><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1615010976309-fd9ac210-fb8c-4f4a-8cd7-abd94955be95.png#align=left&display=inline&height=263&originHeight=526&originWidth=1720&size=298568&status=done&style=none&width=860" alt="image.png"><br>月薪 ×14.6（12+0.6+2），其他岗位月薪 ×14 **薪资水平：\</em>*<br>注：关于薪酬，百度的薪酬与职级已经没“太多挂钩”。关于股票期权，T5  给的可能<br>性很小， 很少见；T6  不是全部都有。<br>入职时，起薪倒挂。这个仅限于社会招聘。这意味着，除非是公司花大力气挖你，不<br>然你基本没什么议价能力。原来有多少工资，到了这里，只要比原来的工资有一定增<br>幅(比如  10%)，那 么  hr  就基本不会再让步。<br>入职后，工资每年有一次普涨的机会，在  q1，三月调整，四月公布。一般来说，普涨<br>的幅度在  15%。<br>这就意味着，很多时候税前工资涨了，税后工资却只变了几百块。表现特别好的(如晋<br>升或绩效高)，涨幅会更高。<br>但是，老板的大盘子总数是一定的，甲涨得多，就必然会有一个乙涨得少。</p><h4 id="晋升机制："><a href="#晋升机制：" class="headerlink" title="晋升机制："></a>晋升机制：</h4><p><strong>1、定期考核：</strong>每年进行两次统一的晋升计划考核；<br>入职后，每年有两次升职的机会，三月一次，九月一次。试用期(半年)未过的无法参<br>与职称评定。<br>每半年一次打绩效，由自己的直属领导打分。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1615011054108-30378b9f-b6c5-424d-bf47-6a9c0d7d9308.png#align=left&display=inline&height=329&originHeight=658&originWidth=1768&size=255851&status=done&style=none&width=884" alt="image.png"><br>（决定最终奖金数的系数有很多。即使绩效看着不错，但老板和  hr  也可以通过其他系<br>数调整奖金数）<br>晋升时，除非表现特别优异且老板格外卖力，一般很少有连升两级的情况出现。<br>百度是很唯  KPI（关键绩效指标）至上的，其次部门很核心，再次老大话语权比较高，<br>相对晋升容易些。<br>试用期结束后的第一次升职机会，需要先定级，比如进来是  4，这一次要确定一下确<br>实是  4， 也算占用了一次晋级机会了。<br>3-5  的晋升都比较容易，一般管理自己的  m2  通过就  ok  了。<br>5-6  的晋升需要  m3  推动。6  以上的晋升需要在公司范围内评比。<br><strong>2、不定期考核：</strong>有特殊贡献、表现突出的员工会被晋升<br>应届生足够细致用心、能力够强，入职一年多就可以从  T1  升到  T4。<br>T5  是分水岭，再升到  T5  得花好几年时间（看绩效，如果能力超强，给公司带来的收<br>益很大，可以不用很长时间就能晋升）<br>T6  升  T7  算是一个瓶颈，非常难，往上就更困难。相对来说级别高的话语权重，晋升<br>可能也会比较容易。<br><strong>一般情况是分  2  种：</strong><br><strong>1.自己提名</strong>，当你自己觉得已经具备下一  level  的素质，可以自己提名，提名后进入考<br>察期，主管设定考察期目标，考察通过顺利晋升，考察不通过维持原层级不变；<br><strong>2.主管提名</strong>，如果是主管提名，一般都是直接通过的，但是如果你现层级已经比较高<br>了，那就不是直接提名这么简单。<br>如果能升到  T7，基本上是  TL（Team Leader）的级别，写代码/直接做业务的时间就<br>很少了。<br>在百度，老员工的职位稳定，对业务驾轻就熟，手里的期权、股票数量远超新员工；<br>相比较而言新员⼯（级别低的）基本没有期权和股票，成长空间也是被压缩的，机会<br>较少、往⾼级别上升慢。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>美团点评算法面试题</title>
      <link href="/2021/03/06/hyt4zu/"/>
      <url>/2021/03/06/hyt4zu/</url>
      
        <content type="html"><![CDATA[<p><strong>美团点评算法面试题-2020</strong></p><ol><li>反转链表</li><li>n 个有序数组，找出 Top k</li><li>LeetCode11 water</li><li>给定一个数，通过调换顺序，找到比这个数大的最小数</li><li>leetcode55. 跳跃游戏</li><li>leetcode153. 寻找旋转排序数组中的最小值</li><li>给出一个 rand5()，实现一个分布均匀的 rand7()生成器</li><li>有一个点，向北走 5 公里、东走 10km、向南走 5 公里，回到原点。这样的<br>点有几个，证明。</li><li>有一个 n 克的物体、一个天平和若干砝码，这个天平没有刻度，试问最少用<br>多少个什么样的砝码可以将这个物体的质量称出。砝码的质量和个数自行指<br>定。</li><li>两个有序数组，求中位数</li><li>两个有序数组，求中位数</li><li>阶乘后 0 的个数 leetcode 172</li><li>数组的最大连续子数组和。</li><li>写 topk 排序，以及分析时间复杂度</li><li>输入一个字符串，判断其是否是“（”和“）”的一一配对</li><li>2、合并两个排好序的链表。</li><li>一维数组[1,n],n 可以认为正无穷，然后输入无数个区间[a,b],保证 b&gt;a，求所有区间长度。</li><li>求 2^N 次方</li><li>如何使用ｒａｎｄ７（）生成ｒａｎｄ１０（）</li><li>最长递增序列</li><li>五个外卖，先取后送，一共十个点，有多少种排列组合情况</li><li>有一个整数数组，请你根据快速排序的思路，找出数组中第 K 大的数。<br>给定一个整数数组 a,同时给定它的大小 n 和要找的 K(K 在 1 到 n 之间)，请<br>返回第 K 大的数，保证答案存在。</li><li>给出一个有 n 个整数的数组 S，在 S 中找到三个整数 a, b, c，找到所有使得<br>a + b + c = 0 的三元组。</li><li>实现观察者模式。</li><li>有一个机器人的位于一个 m × n 个网格左上角。<br>机器人每一时刻只能向下或者向右移动一步。机器人试图达到网格的右下角。<br>问有多少条不同的路径？</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>200. 岛屿数量</title>
      <link href="/2021/03/04/migggh/"/>
      <url>/2021/03/04/migggh/</url>
      
        <content type="html"><![CDATA[<h4 id="200-岛屿数量"><a href="#200-岛屿数量" class="headerlink" title="200. 岛屿数量"></a><a href="https://leetcode-cn.com/problems/number-of-islands/">200. 岛屿数量</a></h4><p>难度中等 1006<br>给你一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。<br>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。<br>此外，你可以假设该网格的四条边均被水包围。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>grid = [<br>  [“1”,”1”,”1”,”1”,”0”],<br>  [“1”,”1”,”0”,”1”,”0”],<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“0”,”0”,”0”,”0”,”0”]<br>]<br><strong>输出：</strong>1</p><p><strong>示例 2：</strong><br><strong>输入：</strong>grid = [<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“0”,”0”,”1”,”0”,”0”],<br>  [“0”,”0”,”0”,”1”,”1”]<br>]<br><strong>输出：</strong>3</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span> nr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// int nr = grid.length;</span>        <span class="token comment" spellcheck="true">// int nc = grid[0].length;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> c <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> r <span class="token operator">>=</span> nr <span class="token operator">||</span> c <span class="token operator">>=</span> nc <span class="token operator">||</span> grid<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        grid<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清零0</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//四个方向遍历</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numIslands</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>grid <span class="token operator">==</span> null <span class="token operator">||</span> grid<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        nr <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int</span>        nc <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int</span>        <span class="token keyword">int</span> num_islands <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> nr<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> nc<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token operator">++</span>num_islands<span class="token punctuation">;</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num_islands<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>深度优先搜索</strong></p><p>我们可以将二维网格看成一个无向图，竖直或水平相邻的 1 之间有边相连。<br>为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 1，则以其为起始节点开始进行深度优先搜索。在深度优先搜索的过程中，每个搜索到的 1 都会被重新标记为 0。<br><strong>最终岛屿的数量就是我们进行深度优先搜索的次数</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>5. 最长回文子串</title>
      <link href="/2021/03/04/yq5mru/"/>
      <url>/2021/03/04/yq5mru/</url>
      
        <content type="html"><![CDATA[<h4 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">5. 最长回文子串</a></h4><p>难度中等 3273<br>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>s = “babad”<br><strong>输出：</strong>“bab”<br><strong>解释：</strong>“aba” 同样是符合题意的答案。</p><p><strong>示例 2：</strong><br><strong>输入：</strong>s = “cbbd”<br><strong>输出：</strong>“bb”</p><p><strong>示例 3：</strong><br><strong>输入：</strong>s = “a”<br><strong>输出：</strong>“a”</p><p><strong>示例 4：</strong><br><strong>输入：</strong>s = “ac”<br><strong>输出：</strong>“a”</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> String <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        String ans <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>len<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">+</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> len  <span class="token operator">></span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    ans <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[) 左开右闭 长度是 j-i=len.</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>199. 二叉树的右视图</title>
      <link href="/2021/03/04/siwpn9/"/>
      <url>/2021/03/04/siwpn9/</url>
      
        <content type="html"><![CDATA[<h3 id="199-二叉树的右视图"><a href="#199-二叉树的右视图" class="headerlink" title="199. 二叉树的右视图"></a><a href="https://leetcode-cn.com/problems/binary-tree-right-side-view/">199. 二叉树的右视图</a></h3><p>难度中等 416<br>给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。<br><strong>示例:</strong><br><strong>输入:</strong> [1,2,3,null,5,null,4]<br><strong>输出:</strong> [1, 3, 4]<br><strong>解释:</strong><br>   1            &lt;—<br> /   <br>2     3         &lt;—<br> \     <br>  5     4       &lt;—</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">rightSideView</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> rightmostValueAtDepth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max_depth <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> nodeQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> depthQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nodeQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        depthQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>nodeQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            TreeNode node <span class="token operator">=</span> nodeQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价removeFirst</span>            <span class="token keyword">int</span>     depth <span class="token operator">=</span> depthQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 维护二叉树的最大深度</span>                max_depth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max_depth<span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 由于每一层最后一个访问到的节点才是我们要的答案，因此不断更新对应深度的信息即可</span>                rightmostValueAtDepth<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                nodeQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                nodeQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                depthQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                depthQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> rightView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> depth <span class="token operator">&lt;=</span> max_depth<span class="token punctuation">;</span> depth<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// =</span>            rightView<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rightmostValueAtDepth<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rightView<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h4 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">rightSideView</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将当前层的最后一个节点放入结果列表</span>                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：sweetiee链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>binary<span class="token operator">-</span>tree<span class="token operator">-</span>right<span class="token operator">-</span>side<span class="token operator">-</span>view<span class="token operator">/</span>solution<span class="token operator">/</span>jian<span class="token operator">-</span>dan<span class="token operator">-</span>bfsdfs<span class="token operator">-</span>bi<span class="token operator">-</span>xu<span class="token operator">-</span>miao<span class="token operator">-</span>dong<span class="token operator">-</span>by<span class="token operator">-</span>sweetiee</code></pre><p>####</p><hr><h4 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h4><pre class=" language-java"><code class="language-java">    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">rightSideView</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从根节点开始访问，根节点深度是0</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先访问 当前节点，再递归地访问 右子树 和 左子树。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">==</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果当前节点所在深度还没有出现在res里，说明在该深度下当前节点是第一个被访问的节点，因此将当前节点加入res中。</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        depth<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">///先添加又节点,执行左节点时 不满足if depth== 条件。</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：sweetiee链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>binary<span class="token operator">-</span>tree<span class="token operator">-</span>right<span class="token operator">-</span>side<span class="token operator">-</span>view<span class="token operator">/</span>solution<span class="token operator">/</span>jian<span class="token operator">-</span>dan<span class="token operator">-</span>bfsdfs<span class="token operator">-</span>bi<span class="token operator">-</span>xu<span class="token operator">-</span>miao<span class="token operator">-</span>dong<span class="token operator">-</span>by<span class="token operator">-</span>sweetiee<span class="token operator">/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>912. 排序数组</title>
      <link href="/2021/03/04/sxaxdm/"/>
      <url>/2021/03/04/sxaxdm/</url>
      
        <content type="html"><![CDATA[<h1 id="912-排序数组"><a href="#912-排序数组" class="headerlink" title="912. 排序数组"></a><a href="https://leetcode-cn.com/problems/sort-an-array/">912. 排序数组</a></h1><p>难度中等<br>给你一个整数数组 <code>nums</code>，请你将该数组升序排列。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>nums = [5,2,3,1]<br><strong>输出：</strong>[1,2,3,5]</p><p><strong>示例 2：</strong><br><strong>输入：</strong>nums = [5,1,1,2,0,0]<br><strong>输出：</strong>[0,0,1,1,2,5]</p><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>每一轮选择最小元素交换到未排定部分的开头。ok</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 选择排序：每一轮选择最小元素交换到未排定部分的开头</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环不变量：[0, i) 有序，且该区间里所有元素就是最终排定的样子</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 选择区间 [i, len - 1] 里最小的元素的索引，交换到下标 i</span>            <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> minIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index1<span class="token punctuation">,</span> <span class="token keyword">int</span> index2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>####</p><hr><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>比较两个相邻的元素，将值大的元素交换到右边【超时】。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 冒泡排序：比较两个相邻的元素，将值大的元素交换到右边。</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [5,2,3,1] i索引到3即length-2时 j比较的是3，1 length-2，length-1.</span>            <span class="token comment" spellcheck="true">// 先默认数组是有序的，只要发生一次交换，就必须进行下一轮比较，</span>            <span class="token comment" spellcheck="true">// 如果在内层循环中，都没有执行一次交换操作，说明此时数组已经是升序数组</span>            <span class="token keyword">boolean</span> sorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sorted<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将数组整理成堆</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环不变量：区间 [0, i] 堆有序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 把堆顶元素（当前最大）交换到数组末尾</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 逐步减少堆有序的部分</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 下标 0 位置下沉操作，使得区间 [0, i] 堆有序</span>            <span class="token function">siftDown</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 将数组整理成堆（堆有序）     *     * @param nums     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 只需要从 i = (len - 1) / 2 这个位置开始逐层下移</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">siftDown</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param nums     * @param k    当前下沉元素的下标     * @param end  [0, end] 是 nums 的有效部分     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> end <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index1<span class="token punctuation">,</span> <span class="token keyword">int</span> index2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h4 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h4><pre class=" language-java"><code class="language-java">     <span class="token comment" spellcheck="true">// 快速排序 1：基本快速排序</span>    <span class="token comment" spellcheck="true">/**     * 列表大小等于或小于该大小，将优先于 quickSort 使用插入排序     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INSERTION_SORT_THRESHOLD <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Random RANDOM <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 小区间使用插入排序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&lt;=</span> INSERTION_SORT_THRESHOLD<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">insertionSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pIndex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> pIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> pIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 对数组 nums 的子区间 [left, right] 使用插入排序     *     * @param nums  给定数组     * @param left  左边界，能取到     * @param right 右边界，能取到     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> left <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> randomIndex <span class="token operator">=</span> RANDOM<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> left<span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> randomIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 基准值</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lt <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环不变量：</span>        <span class="token comment" spellcheck="true">// all in [left + 1, lt] &lt; pivot</span>        <span class="token comment" spellcheck="true">// all in [lt + 1, i) >= pivot</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                lt<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> lt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> lt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lt<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index1<span class="token punctuation">,</span> <span class="token keyword">int</span> index2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>基本思路</strong>：快速排序每一次都排定一个元素（这个元素呆在了它最终应该呆的位置），然后递归地去排它左边的部分和右边的部分，依次进行下去，直到数组有序；<br><strong>算法思想</strong>：分而治之（分治思想），与「归并排序」不同，「快速排序」在「分」这件事情上不想「归并排序」无脑地一分为二，而是采用了 partition 的方法（书上，和网上都有介绍，就不展开了），因此就没有「合」的过程。<br><strong>实现细节</strong>（注意事项）：（针对特殊测试用例：顺序数组或者逆序数组）一定要随机化选择切分元素（pivot），否则在输入数组是有序数组或者是逆序数组的时候，快速排序会变得非常慢（等同于冒泡排序或者「选择排序」）；<br><strong>复杂度分析：</strong><br>时间复杂度：O(NlogN)，这里 N 是数组的长度；<br>空间复杂度：O(logN)，这里占用的空间主要来自递归函数的栈空间。</p><hr><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 归并排序</span>    <span class="token comment" spellcheck="true">/**     * 列表大小等于或小于该大小，将优先于 mergeSort 使用插入排序     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INSERTION_SORT_THRESHOLD <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 对数组 nums 的子区间 [left, right] 进行归并排序     *     * @param nums     * @param left     * @param right     * @param temp  用于合并两个有序数组的辅助数组，全局使用一份，避免多次创建和销毁     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 小区间使用插入排序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&lt;=</span> INSERTION_SORT_THRESHOLD<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">insertionSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Java 里有更优的写法，在 left 和 right 都是大整数时，即使溢出，结论依然正确</span>        <span class="token comment" spellcheck="true">// int mid = (left + right) >>> 1;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果数组的这个子区间本身有序，无需合并</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">mergeOfTwoSortedArray</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 对数组 arr 的子区间 [left, right] 使用插入排序     *     * @param arr   给定数组     * @param left  左边界，能取到     * @param right 右边界，能取到     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> left <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 合并两个有序数组：先把值复制到临时数组，再合并回去     *     * @param nums     * @param left     * @param mid   [left, mid] 有序，[mid + 1, right] 有序     * @param right     * @param temp  全局使用的临时数组     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mergeOfTwoSortedArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 注意写成 &lt; 就丢失了稳定性（相同元素原来靠前的排序以后依然靠前）</span>                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// temp[i] > temp[j]</span>                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>基本思路：借助额外空间，合并两个有序数组，得到更长的有序数组。例如：「力扣」第 88 题：合并两个有序数组。<br>算法思想：分而治之（分治思想）。「分而治之」思想的形象理解是「曹冲称象」、MapReduce，在一定情况下可以并行化。<br>个人建议：「归并排序」是理解「递归思想」的非常好的学习材料，大家可以通过理解：递归完成以后，合并两个有序数组的这一步骤，想清楚程序的执行流程。即「递归函数执行完成以后，我们还可以做点事情」。因此，「归并排序」我个人觉得非常重要，一定要掌握。</p><hr><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 插入排序：稳定排序，在接近有序的情况下，表现优异</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环不变量：将 nums[i] 插入到区间 [0, i) 使之成为有序数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 先暂存这个元素，然后之前元素逐个后移，留出空位</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 注意边界 j > 0</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>优化</strong>：「将一个数字插入一个有序的数组」这一步，可以不使用逐步交换，使用先赋值给「临时变量」，然后「适当的元素」后移，空出一个位置，最后把「临时变量」赋值给这个空位的策略（就是上面那张图的意思）。编码的时候如果不小心，可能会把数组的值修改，建议多调试；<br><strong>特点</strong>：「插入排序」可以提前终止内层循环（体现在 nums[j - 1] &gt; temp 不满足时），在数组「几乎有序」的前提下，「插入排序」的时间复杂度可以达到 O(N)；<br>由于「插入排序」在「几乎有序」的数组上表现良好，特别地，在「短数组」上的表现也很好。因为「短数组」的特点是：每个元素离它最终排定的位置都不会太远。为此，在小区间内执行排序任务的时候，可以转向使用「插入排序」。</p><hr><p><a href="https://leetcode-cn.com/problems/sort-an-array/solution/fu-xi-ji-chu-pai-xu-suan-fa-java-by-liweiwei1419/">几大基础排序</a><br><a href="https://leetcode-cn.com/problems/sort-an-array/solution/fu-xi-ji-chu-pai-xu-suan-fa-java-by-liweiwei1419/">https://leetcode-cn.com/problems/sort-an-array/solution/fu-xi-ji-chu-pai-xu-suan-fa-java-by-liweiwei1419/</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>103. 二叉树的锯齿形层序遍历--🀄️</title>
      <link href="/2021/03/04/adauml/"/>
      <url>/2021/03/04/adauml/</url>
      
        <content type="html"><![CDATA[<h4 id="103-二叉树的锯齿形层序遍历"><a href="#103-二叉树的锯齿形层序遍历" class="headerlink" title="103. 二叉树的锯齿形层序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/">103. 二叉树的锯齿形层序遍历</a></h4><p>难度中等 402<br>给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。<br>例如：<br>给定二叉树 <code>[3,9,20,null,null,15,7]</code>,<br>    3<br>   / <br>  9  20<br>    /  <br>   15   7</p><p>返回锯齿形层序遍历如下：<br>[<br>  [3],<br>  [20,9],<br>  [15,7]<br>]</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">zigzagLevelOrder1</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> nodeQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isOrderLeft <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>nodeQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> levelList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> nodeQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode curNode <span class="token operator">=</span> nodeQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isOrderLeft<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    levelList<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    levelList<span class="token punctuation">.</span><span class="token function">offerFirst</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>levelList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            isOrderLeft <span class="token operator">=</span> <span class="token operator">!</span>isOrderLeft<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">zigzagLevelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> nodeQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isOrderLeft <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>nodeQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Deque&lt;Integer> levelList = new LinkedList&lt;Integer>();</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> levelList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> nodeQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode curNode <span class="token operator">=</span> nodeQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                levelList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// if (isOrderLeft) &amp;#123;</span>                <span class="token comment" spellcheck="true">//     levelList.offerLast(curNode.val);</span>                <span class="token comment" spellcheck="true">// &amp;#125; else &amp;#123;</span>                <span class="token comment" spellcheck="true">//     levelList.offerFirst(curNode.val);</span>                <span class="token comment" spellcheck="true">// &amp;#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// ans.add(new ArrayList&lt;Integer>(levelList));</span>            <span class="token comment" spellcheck="true">//isOrderLeft = !isOrderLeft;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Collections<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>levelList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>levelList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>179. 最大数</title>
      <link href="/2021/03/04/kgxa5s/"/>
      <url>/2021/03/04/kgxa5s/</url>
      
        <content type="html"><![CDATA[<h4 id="179-最大数"><a href="#179-最大数" class="headerlink" title="179. 最大数"></a><a href="https://leetcode-cn.com/problems/largest-number/">179. 最大数</a></h4><p>难度中等 477<br>给定一组非负整数 <code>nums</code>，重新排列它们每个数字的顺序（每个数字不可拆分）使之组成一个最大的整数。<br><strong>注意：</strong>输出结果可能非常大，所以你需要返回一个字符串而不是整数。</p><p><strong>示例 1：</strong><br><strong>输入<code>：</code></strong><code>nums = [10,2]</code><br><strong>输出：</strong><code>&quot;210&quot;</code><br><strong>示例  2：</strong><br><strong>输入<code>：</code></strong><code>nums = [3,30,34,5,9]</code><br><strong>输出：</strong><code>&quot;9534330&quot;</code><br><strong>示例 3：</strong><br><strong>输入<code>：</code>**nums = [1]<br>**输出：</strong>“1”</p><p><strong>示例 4：</strong><br><strong>输入<code>：</code>**nums = [10]<br>**输出：</strong>“10”</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">LargerNumberComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span> String b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String order1 <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            String order2 <span class="token operator">=</span> b <span class="token operator">+</span> a<span class="token punctuation">;</span>           <span class="token keyword">return</span> order2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>order1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">largestNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Get input integers as strings.</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> asStrs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            asStrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串比较</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Sort strings according to custom comparator.</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>asStrs<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LargerNumberComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// If, after being sorted, the largest number is `0`, the entire number</span>        <span class="token comment" spellcheck="true">// is zero.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>asStrs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Build largest number from sorted array.</span>        String largestNumberStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String numAsStr <span class="token operator">:</span> asStrs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            largestNumberStr <span class="token operator">+=</span> numAsStr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数字很大需返回字符串</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> largestNumberStr<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 56 - I. 数组中数字出现的次数--🀄️</title>
      <link href="/2021/03/04/kew28c/"/>
      <url>/2021/03/04/kew28c/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-56-I-数组中数字出现的次数"><a href="#剑指-Offer-56-I-数组中数字出现的次数" class="headerlink" title="剑指 Offer 56 - I. 数组中数字出现的次数"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/">剑指 Offer 56 - I. 数组中数字出现的次数</a></h4><p>难度中等 312<br>一个整型数组 <code>nums</code> 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是 O(n)，空间复杂度是 O(1)。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>nums = [4,1,4,6]<br><strong>输出：</strong>[1,6] 或 [6,1]</p><p><strong>示例 2：</strong><br><strong>输入：</strong>nums = [1,2,10,4,1,4,3,3]<br><strong>输出：</strong>[2,10] 或 [10,2]</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">singleNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ret <span class="token operator">^=</span> n<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> div <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>div <span class="token operator">&amp;</span> ret<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            div <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>div <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                a <span class="token operator">^=</span> n<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                b <span class="token operator">^=</span> n<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">,</span> b<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>解析</strong></p><p>先对所有数字进行一次异或，得到两个出现一次的数字的异或值。</p><p>在异或结果中找到任意为 1 的位。</p><p>根据这一位对所有的数字进行分组。</p><p>在每个组内进行异或操作，得到两个数字。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题 02.01. 移除重复节点</title>
      <link href="/2021/03/03/rgsi0n/"/>
      <url>/2021/03/03/rgsi0n/</url>
      
        <content type="html"><![CDATA[<h4 id="面试题-02-01-移除重复节点"><a href="#面试题-02-01-移除重复节点" class="headerlink" title="面试题 02.01. 移除重复节点"></a><a href="https://leetcode-cn.com/problems/remove-duplicate-node-lcci/">面试题 02.01. 移除重复节点</a></h4><p>难度简单 90<br>编写代码，移除<strong>未排序链表</strong>中的重复节点。保留最开始出现的节点。<br><strong>示例 1:</strong><br>** 输入<strong>：[1, 2, 3, 3, 2, 1]<br>** 输出</strong>：[1, 2, 3]</p><p><strong>示例 2:</strong><br>** 输入<strong>：[1, 1, 1, 1, 2]<br>** 输出</strong>：[1, 2]</p><p><strong>提示：</strong></p><ol><li>链表长度在[0, 20000]范围内。</li><li>链表元素在[0, 20000]范围内。</li></ol><p><strong>进阶：</strong><br>如果不得使用临时缓冲区，该怎么解决？</p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> ListNode <span class="token function">removeDuplicateNodes</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> occurred <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        occurred<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 枚举前驱节点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 当前待删除节点</span>            ListNode cur <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>occurred<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>15. 三数之和--🀄️</title>
      <link href="/2021/03/03/ra03u8/"/>
      <url>/2021/03/03/ra03u8/</url>
      
        <content type="html"><![CDATA[<h4 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/">15. 三数之和</a></h4><p>难度中等 3030<br>给你一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <em>a，b，c ，</em>使得 _a + b + c = _0 ？请你找出所有和为 <code>0</code> 且不重复的三元组。<br><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>nums = [-1,0,1,2,-1,-4]<br><strong>输出：</strong>[[-1,-1,2],[-1,0,1]]</p><p><strong>示例 2：</strong><br><strong>输入：</strong>nums = []<br><strong>输出：</strong>[]</p><p><strong>示例 3：</strong><br><strong>输入：</strong>nums = [0]<br><strong>输出：</strong>[]</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 枚举 a</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> first <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>first<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 需要和上一次枚举的数不相同</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>first <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// c 对应的指针初始指向数组的最右端</span>            <span class="token keyword">int</span> third <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 枚举 b</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> second <span class="token operator">=</span> first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> second <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>second<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 需要和上一次枚举的数不相同</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>second <span class="token operator">></span> first <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 需要保证 b 的指针在 c 的指针的左侧</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>second <span class="token operator">&lt;</span> third <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token operator">--</span>third<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果指针重合，随着 b 后续的增加</span>                <span class="token comment" spellcheck="true">// 就不会有满足 a+b+c=0 并且 b&lt;c 的 c 了，可以退出循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>second <span class="token operator">==</span> third<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>3sum<span class="token operator">/</span>solution<span class="token operator">/</span>san<span class="token operator">-</span>shu<span class="token operator">-</span>zhi<span class="token operator">-</span>he<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><p><strong>没太懂边界问题</strong></p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">///至少一个正数一个负数</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 枚举 a</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> first <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>first<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 需要和上一次枚举的数不相同</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>first <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// c 对应的指针初始指向数组的最右端</span>            <span class="token keyword">int</span> third <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 枚举 b</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> second <span class="token operator">=</span> first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> second <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>second<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 需要和上一次枚举的数不相同</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>second <span class="token operator">></span> first <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// >=</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 需要保证 b 的指针在 c 的指针的左侧</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>second <span class="token operator">&lt;</span> third <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// &lt;=</span>                    <span class="token operator">--</span>third<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果指针重合，随着 b 后续的增加</span>                <span class="token comment" spellcheck="true">// 就不会有满足 a+b+c=0 并且 b&lt;c 的 c 了，可以退出循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>second <span class="token operator">==</span> third<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/// ></span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 53 - II. 0～n-1中缺失的数字</title>
      <link href="/2021/03/03/we4l7q/"/>
      <url>/2021/03/03/we4l7q/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-53-II-0-～-n-1-中缺失的数字"><a href="#剑指-Offer-53-II-0-～-n-1-中缺失的数字" class="headerlink" title="剑指 Offer 53 - II. 0 ～ n-1 中缺失的数字"></a><a href="https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/">剑指 Offer 53 - II. 0 ～ n-1 中缺失的数字</a></h4><p>难度简单 110<br>一个长度为 n-1 的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围 0 ～ n-1 之内。在范围 0 ～ n-1 内的 n 个数字中有且只有一个数字不在该数组中，请找出这个数字。</p><p><strong>示例 1:</strong><br><strong>输入:</strong> [0,1,3]<br><strong>输出:</strong> 2.</p><p><strong>示例  2:</strong><br><strong>输入:</strong> [0,1,2,3,4,5,6,7,9]<br><strong>输出:</strong> 8.</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">missingNumber2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从左到右第一个nums[i] != i的i即为缺失的数</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//若数组遍历到末尾都无不符合的数，说明缺失的数是n</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> m<span class="token punctuation">)</span> i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 作者：jyd</span>        <span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/solution/mian-shi-ti-53-ii-0n-1zhong-que-shi-de-shu-zi-er-f/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>解析</p><p>排序数组中的搜索问题，首先想到 二分法 解决。<br>根据题意，数组可以按照以下规则划分为两部分。<br>左子数组： nums[i]=i ；<br>右子数组： nums[i] !=i ；<br>缺失的数字等于 “右子数组的首位元素” 对应的索引；因此考虑使用二分法查找 “右子数组的首位元素” 。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614784461729-9c5ccba0-6b00-46ff-833a-f0a21a0f18f7.png#align=left&display=inline&height=219&originHeight=374&originWidth=1166&size=154745&status=done&style=none&width=684" alt="image.png"></p><hr><p>终于过了</p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">///????[0] [1] [0,2,3] [0,1,3]</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// if(nums[j-1]!=j-1)&amp;#123;</span>        <span class="token comment" spellcheck="true">//     return j-1;</span>        <span class="token comment" spellcheck="true">// &amp;#125; //err</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> j<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> good </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>217. 存在重复元素</title>
      <link href="/2021/03/03/peaok7/"/>
      <url>/2021/03/03/peaok7/</url>
      
        <content type="html"><![CDATA[<h4 id="217-存在重复元素"><a href="#217-存在重复元素" class="headerlink" title="217. 存在重复元素"></a><a href="https://leetcode-cn.com/problems/contains-duplicate/">217. 存在重复元素</a></h4><p>难度简单 367<br>给定一个整数数组，判断是否存在重复元素。<br>如果存在一值在数组中出现至少两次，函数返回 <code>true</code> 。如果数组中每个元素都不相同，则返回 <code>false</code> 。</p><p><strong>示例 1:</strong><br><strong>输入:</strong> [1,2,3,1]<br><strong>输出:</strong> true<br><strong>示例 2:</strong><br><strong>输入: **[1,2,3,4]<br>**输出:</strong> false</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsDuplicate1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>146. LRU 缓存机制--🀄️</title>
      <link href="/2021/03/03/hp2vam/"/>
      <url>/2021/03/03/hp2vam/</url>
      
        <content type="html"><![CDATA[<h4 id="146-LRU-缓存机制"><a href="#146-LRU-缓存机制" class="headerlink" title="146. LRU 缓存机制"></a><a href="https://leetcode-cn.com/problems/lru-cache/">146. LRU 缓存机制</a></h4><p>难度中等 1209<br>运用你所掌握的数据结构，设计和实现一个   <a href="https://baike.baidu.com/item/LRU">LRU (最近最少使用) 缓存机制</a> 。<br>实现 <code>LRUCache</code> 类：</p><ul><li><code>LRUCache(int capacity)</code> 以正整数作为容量 <code>capacity</code> 初始化 LRU 缓存</li><li><code>int get(int key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> 。</li><li><code>void put(int key, int value)</code> 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</li></ul><p><strong>进阶</strong>：你是否可以在 <code>O(1)</code> 时间复杂度内完成这两种操作？</p><p><strong>示例：</strong><br><strong>输入</strong><br>[“LRUCache”, “put”, “put”, “get”, “put”, “get”, “put”, “get”, “get”, “get”]<br>[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]<br><strong>输出</strong><br>[null, null, null, 1, null, -1, null, -1, 3, 4]</p><p><strong>解释</strong><br>LRUCache lRUCache = new LRUCache(2);<br>lRUCache.put(1, 1); // 缓存是 {1=1}<br>lRUCache.put(2, 2); // 缓存是 {1=1, 2=2}<br>lRUCache.get(1);    // 返回 1<br>lRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}<br>lRUCache.get(2);    // 返回 -1 (未找到)<br>lRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}<br>lRUCache.get(1);    // 返回 -1 (未找到)<br>lRUCache.get(3);    // 返回 3<br>lRUCache.get(4);    // 返回 4</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> <span class="token number">0.75F</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> eldest<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> capacity<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>lru<span class="token operator">-</span>cache<span class="token operator">/</span>solution<span class="token operator">/</span>lruhuan<span class="token operator">-</span>cun<span class="token operator">-</span>ji<span class="token operator">-</span>zhi<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">DLinkedNode</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> key<span class="token punctuation">;</span>        <span class="token keyword">int</span> value<span class="token punctuation">;</span>        DLinkedNode prev<span class="token punctuation">;</span>        DLinkedNode next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">DLinkedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">DLinkedNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> _key<span class="token punctuation">,</span> <span class="token keyword">int</span> _value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>key <span class="token operator">=</span> _key<span class="token punctuation">;</span> value <span class="token operator">=</span> _value<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> DLinkedNode<span class="token operator">></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> DLinkedNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">private</span> DLinkedNode head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用伪头部和伪尾部节点</span>        head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DLinkedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DLinkedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DLinkedNode node <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果 key 存在，先通过哈希表定位，再移到头部</span>        <span class="token function">moveToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DLinkedNode node <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果 key 不存在，创建一个新的节点</span>            DLinkedNode newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DLinkedNode</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 添加进哈希表</span>            cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 添加至双向链表的头部</span>            <span class="token function">addToHead</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>size<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> capacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果超出容量，删除双向链表的尾部节点</span>                DLinkedNode tail <span class="token operator">=</span> <span class="token function">removeTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 删除哈希表中对应的项</span>                cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>tail<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">--</span>size<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果 key 存在，先通过哈希表定位，再修改 value，并移到头部</span>            node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token function">moveToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addToHead</span><span class="token punctuation">(</span>DLinkedNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//node</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//node</span>        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//next.pre</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//3节点4个指针 //head.next</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>DLinkedNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">moveToHead</span><span class="token punctuation">(</span>DLinkedNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> DLinkedNode <span class="token function">removeTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DLinkedNode res <span class="token operator">=</span> tail<span class="token punctuation">.</span>prev<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        <span class="token function">removeNode</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>lru<span class="token operator">-</span>cache<span class="token operator">/</span>solution<span class="token operator">/</span>lruhuan<span class="token operator">-</span>cun<span class="token operator">-</span>ji<span class="token operator">-</span>zhi<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><p>解析</p><p><strong>哈希表 + 双向链表</strong></p><p>算法</p><p>LRU 缓存机制可以通过哈希表辅以双向链表实现，我们用一个哈希表和一个双向链表维护所有在缓存中的键值对。<br>双向链表按照被使用的顺序存储了这些键值对，靠近头部的键值对是最近使用的，而靠近尾部的键值对是最久未使用的。<br>哈希表即为普通的哈希映射（HashMap），通过缓存数据的键映射到其在双向链表中的位置。<br>这样以来，我们首先使用哈希表进行定位，找出缓存项在双向链表中的位置，随后将其移动到双向链表的头部，即可在 O(1) 的时间内完成 get 或者 put 操作。<strong>具体的方法如下</strong>：</p><p>对于 get 操作，首先判断 key 是否存在：<br>如果 key 不存在，则返回 −1；<br>如果 key 存在，则 key 对应的节点是最近被使用的节点。通过哈希表定位到该节点在双向链表中的位置，并将其移动到双向链表的头部，最后返回该节点的值。<br>对于 put 操作，首先判断 key 是否存在：<br>如果 key 不存在，使用 key 和 value 创建一个新的节点，在双向链表的头部添加该节点，并将 key 和该节点添加进哈希表中。然后判断双向链表的节点数是否超出容量，如果超出容量，则删除双向链表的尾部节点，并删除哈希表中对应的项；<br>如果 key 存在，则与 get 操作类似，先通过哈希表定位，再将对应的节点的值更新为 value，并将该节点移到双向链表的头部。<br>上述各项操作中，访问哈希表的时间复杂度为 O(1)，在双向链表的头部添加节点、在双向链表的尾部删除节点的复杂度也为 O(1)。而将一个节点移到双向链表的头部，可以分成「删除该节点」和「在双向链表的头部添加节点」两步操作，都可以在 O(1) 时间内完成。</p><p>小贴士</p><p>在双向链表的实现中，使用一个伪头部（dummy head）和伪尾部（dummy tail）标记界限，这样在添加节点和删除节点的时候就不需要检查相邻的节点是否存在。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>86. 分隔链表--🀄️</title>
      <link href="/2021/03/03/vrdxzx/"/>
      <url>/2021/03/03/vrdxzx/</url>
      
        <content type="html"><![CDATA[<h4 id="86-分隔链表"><a href="#86-分隔链表" class="headerlink" title="86. 分隔链表"></a><a href="https://leetcode-cn.com/problems/partition-list/">86. 分隔链表</a></h4><p>难度中等 367<br>给你一个链表的头节点 <code>head</code> 和一个特定值_ _<code>x</code> ，请你对链表进行分隔，使得所有 <strong>小于</strong> <code>x</code> 的节点都出现在 <strong>大于或等于</strong> <code>x</code> 的节点之前。<br>你应当 <strong>保留</strong> 两个分区中每个节点的初始相对位置。</p><p><strong>示例 1：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/282505/1614774541210-607c1362-0062-41f3-ac9d-8625d2c0660b.jpeg#align=left&display=inline&height=111&originHeight=222&originWidth=662&size=0&status=done&style=none&width=331"><br><strong>输入：</strong>head = [1,4,3,2,5,2], x = 3<br><strong>输出</strong>：[1,2,2,4,3,5]</p><p><strong>示例 2：</strong><br><strong>输入：</strong>head = [2,1], x = 2<br><strong>输出</strong>：[1,2]</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> ListNode <span class="token function">partition</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode small <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode smallHead <span class="token operator">=</span> small<span class="token punctuation">;</span>        ListNode large <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode largeHead <span class="token operator">=</span> large<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                small<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>                small <span class="token operator">=</span> small<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小链表指针后移</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                large<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>                large <span class="token operator">=</span> large<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//大链表指针后移</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历主链表</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        large<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        small<span class="token punctuation">.</span>next <span class="token operator">=</span> largeHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小的指向大的变表头部</span>        <span class="token keyword">return</span> smallHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>解析</strong></p><p>只需维护两个链表 small 和 large 即可，small 链表按顺序存储所有小于 x 的节点，<br>large 链表按顺序存储所有大于等于 x 的节点。遍历完原链表后，我们只要将 small 链表尾节点指向<br>large 链表的头节点即能完成对链表的分隔。</p><p>为了实现上述思路，我们设 smallHead 和 largeHead 分别为两个链表的哑节点，即它们的<br>next 指针指向链表的头节点，这样做的目的是为了更方便地处理头节点为空的边界条件。同时设<br>small 和 large 节点指向当前链表的末尾节点。开始时<br>smallHead=small,largeHead=large。随后，从前往后遍历链表，判断当前链表的节点值是否小于<br>x，如果小于就将 small 的 next 指针指向该节点，否则将 large 的 next 指针指向该节点。</p><p>遍历结束后，我们将 large 的 next 指针置空，这是因为当前节点复用的是原链表的节点，而其 next 指针可能指向一个小于 x 的节点，我们需要切断这个引用。同时将 small 的 next 指针指向 largeHead 的 next 指针指向的节点，即真正意义上的 large 链表的头节点。最后返回 smallHead 的 next 指针即为我们要求的答案。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>92. 反转链表 II--🀄️</title>
      <link href="/2021/03/03/dq0abe/"/>
      <url>/2021/03/03/dq0abe/</url>
      
        <content type="html"><![CDATA[<h4 id="92-反转链表-II"><a href="#92-反转链表-II" class="headerlink" title="92. 反转链表 II"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">92. 反转链表 II</a></h4><p>难度中等 690<br>反转从位置 <em>m</em> 到 <em>n</em> 的链表。请使用一趟扫描完成反转。<br><strong>说明:</strong><br>1 ≤ <em>m</em> ≤ <em>n</em> ≤ 链表长度。<br><strong>示例:</strong><br><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, <em>m</em> = 2, <em>n</em> = 4。<br><strong>输出:</strong> 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL。<br>todo</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> ListNode <span class="token function">reverseBetween</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode dmy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dmy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">int</span> delta <span class="token operator">=</span> n<span class="token operator">-</span>m<span class="token punctuation">;</span>        ListNode pre <span class="token operator">=</span> dmy<span class="token punctuation">,</span>tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//先定位出m节点和m之前的节点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> tail<span class="token punctuation">;</span>            tail <span class="token operator">=</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            m<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>delta <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ListNode next <span class="token operator">=</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            tail<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//tail一直不变，只要修改指针到next.next</span>            next<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//next.next指向pre的next，也就是最新的第m个位置</span>            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新next为最新的第m个位置</span>            delta <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dmy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><p>todo</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//3段合并</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseBetween1</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> m <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ListNode guard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        guard<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode temp <span class="token operator">=</span> guard<span class="token punctuation">;</span>        ListNode prev <span class="token operator">=</span> guard<span class="token punctuation">;</span>        ListNode newNode <span class="token operator">=</span> null<span class="token punctuation">;</span>        ListNode tail <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ListNode tempNext <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                prev <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                tail <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                temp<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>                newNode <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> tempNext<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        tail<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>        prev<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">return</span> guard<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 14- I. 剪绳子</title>
      <link href="/2021/03/03/bdcgvo/"/>
      <url>/2021/03/03/bdcgvo/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-14-I-剪绳子"><a href="#剑指-Offer-14-I-剪绳子" class="headerlink" title="剑指 Offer 14- I. 剪绳子"></a><a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/">剑指 Offer 14- I. 剪绳子</a></h4><p>难度中等 168<br>给你一根长度为 <code>n</code> 的绳子，请把绳子剪成整数长度的 <code>m</code> 段（m、n 都是整数，n&gt;1 并且 m&gt;1），每段绳子的长度记为 <code>k[0],k[1]...k[m-1]</code> 。请问 <code>k[0]*k[1]*...*k[m-1]</code> 可能的最大乘积是多少？例如，当绳子的长度是 8 时，我们把它剪成长度分别为 2、3、3 的三段，此时得到的最大乘积是 18。<br><strong>示例 1：</strong><br><strong>输入: **2<br>**输出: **1<br>**解释: **2 = 1 + 1, 1 × 1 = 1<br>**示例  2:</strong><br>**输入: **10<br>**输出: **36<br>**解释: **10 = 3 + 3 + 4, 3 × 3 × 4 = 36.</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"dp["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">",i="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">",j="</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">",dp["</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>j <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">*</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">",dp["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>解析</strong><br><strong>动态规划</strong></p><p>这题用动态规划是比较好理解的：<br>我们想要求长度为 n 的绳子剪掉后的最大乘积，可以从前面比 n 小的绳子转移而来。<br>用一个 dp 数组记录从 0 到 n 长度的绳子剪掉后的最大乘积，也就是<strong>dp[i]表示长度为 i 的绳子剪成 m 段后的最大乘积，初始化 dp[2] = 1。</strong><br>我们先把绳子剪掉第一段（长度为 j），如果只剪掉长度为 1，对最后的乘积无任何增益，所以从长度为 2 开始剪，<br>剪了第一段后，剩下(i - j)长度可以剪也可以不剪。<strong>如果不剪的话长度乘积即为 j _ (i - j)；如果剪的话长度乘积即为 j _ dp[i - j]。取两者最大值 max(j _ (i - j), j _ dp[i - j])。</strong><br>第一段长度 j 可以取的区间为[2,i)，对所有 j 不同的情况取最大值，因此最终 dp[i]的转移方程为：<br><strong>dp[i] = max(dp[i], max(j _ (i - j), j _ dp[i - j]))。</strong><br><strong>最后返回 dp[n]即可。</strong></p><p>作者：edelweisskoko<br>链接：<a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/solution/jian-zhi-offer-14-i-jian-sheng-zi-huan-s-xopj/">https://leetcode-cn.com/problems/jian-sheng-zi-lcof/solution/jian-zhi-offer-14-i-jian-sheng-zi-huan-s-xopj/</a><br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614767517985-c3cc335c-77fc-43f5-afb0-63f7ffc728c4.png#align=left&display=inline&height=504&originHeight=1008&originWidth=1220&size=415103&status=done&style=none&width=610" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>43. 字符串相乘--🀄️</title>
      <link href="/2021/03/03/tmfpc2/"/>
      <url>/2021/03/03/tmfpc2/</url>
      
        <content type="html"><![CDATA[<h4 id="43-字符串相乘"><a href="#43-字符串相乘" class="headerlink" title="43. 字符串相乘"></a><a href="https://leetcode-cn.com/problems/multiply-strings/">43. 字符串相乘</a></h4><p>难度中等 574<br>给定两个以字符串形式表示的非负整数 <code>num1</code> 和 <code>num2</code>，返回 <code>num1</code> 和 <code>num2</code> 的乘积，它们的乘积也表示为字符串形式。<br><strong>示例 1:</strong><br><strong>输入:</strong> num1 = “2”, num2 = “3”<br><strong>输出:</strong> “6”<br><strong>示例  2:</strong><br><strong>输入:</strong> num1 = “123”, num2 = “456”<br><strong>输出:</strong> “56088”<br><strong>说明：</strong></p><ol><li><code>num1</code> 和 <code>num2</code> 的长度小于 110。</li><li><code>num1</code> 和 <code>num2</code> 只包含数字 <code>0-9</code>。</li><li><code>num1</code> 和 <code>num2</code> 均不以零开头，除非是数字 0 本身。</li><li><strong>不能使用任何标准库的大数类型（比如 BigInteger）</strong>或<strong>直接将输入转换为整数来处理</strong>。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">multiply</span><span class="token punctuation">(</span>String num1<span class="token punctuation">,</span> String num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">||</span> num2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ansArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最多位数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字母转数字 倒序</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> y <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                ansArr<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ansArr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> ansArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            ansArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进位处理</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> ansArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去掉前缀0</span>        StringBuffer ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> m <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ansArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 32 - III. 从上到下打印二叉树 III--🀄️</title>
      <link href="/2021/03/03/ho4g0u/"/>
      <url>/2021/03/03/ho4g0u/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-32-III-从上到下打印二叉树-III"><a href="#剑指-Offer-32-III-从上到下打印二叉树-III" class="headerlink" title="剑指 Offer 32 - III. 从上到下打印二叉树 III"></a><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">剑指 Offer 32 - III. 从上到下打印二叉树 III</a></h4><p>难度中等 76<br>请实现一个函数按照<strong>之字形</strong>顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。</p><p>例如:<br>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,<br>    3<br>   / <br>  9  20<br>    /  <br>   15   7</p><p>返回其层次遍历结果：<br>[<br>  [3],<br>  [20,9],<br>  [15,7]<br>]</p><p>好理解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> Collections<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：jyd链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>cong<span class="token operator">-</span>shang<span class="token operator">-</span>dao<span class="token operator">-</span>xia<span class="token operator">-</span>da<span class="token operator">-</span>yin<span class="token operator">-</span>er<span class="token operator">-</span>cha<span class="token operator">-</span>shu<span class="token operator">-</span>iii<span class="token operator">-</span>lcof<span class="token operator">/</span>solution<span class="token operator">/</span>mian<span class="token operator">-</span>shi<span class="token operator">-</span>ti<span class="token operator">-</span><span class="token number">32</span><span class="token operator">-</span>iii<span class="token operator">-</span>cong<span class="token operator">-</span>shang<span class="token operator">-</span>dao<span class="token operator">-</span>xia<span class="token operator">-</span>da<span class="token operator">-</span>yin<span class="token operator">-</span>er<span class="token operator">--</span><span class="token number">3</span><span class="token operator">/</span></code></pre><p>不太懂</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            LinkedList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> tmp<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 偶数层 -> 队列头部</span>                <span class="token keyword">else</span> tmp<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 奇数层 -> 队列尾部</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：jyd链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>cong<span class="token operator">-</span>shang<span class="token operator">-</span>dao<span class="token operator">-</span>xia<span class="token operator">-</span>da<span class="token operator">-</span>yin<span class="token operator">-</span>er<span class="token operator">-</span>cha<span class="token operator">-</span>shu<span class="token operator">-</span>iii<span class="token operator">-</span>lcof<span class="token operator">/</span>solution<span class="token operator">/</span>mian<span class="token operator">-</span>shi<span class="token operator">-</span>ti<span class="token operator">-</span><span class="token number">32</span><span class="token operator">-</span>iii<span class="token operator">-</span>cong<span class="token operator">-</span>shang<span class="token operator">-</span>dao<span class="token operator">-</span>xia<span class="token operator">-</span>da<span class="token operator">-</span>yin<span class="token operator">-</span>er<span class="token operator">--</span><span class="token number">3</span><span class="token operator">/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>113. 路径总和 II--🀄️</title>
      <link href="/2021/03/03/opmypf/"/>
      <url>/2021/03/03/opmypf/</url>
      
        <content type="html"><![CDATA[<h4 id="113-路径总和-II"><a href="#113-路径总和-II" class="headerlink" title="113. 路径总和 II"></a><a href="https://leetcode-cn.com/problems/path-sum-ii/">113. 路径总和 II</a></h4><p>难度中等 435<br>给你二叉树的根节点 <code>root</code> 和一个整数目标和 <code>targetSum</code> ，找出所有 <strong>从根节点到叶子节点</strong> 路径总和等于给定目标和的路径。<br><strong>叶子节点</strong> 是指没有子节点的节点。</p><p><strong>示例 1：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/282505/1614758699837-043f129a-befe-4813-83b4-d8c9edceb233.jpeg#align=left&display=inline&height=211&originHeight=421&originWidth=592&size=0&status=done&style=none&width=296"><br><strong>输入：</strong>root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22<br><strong>输出：</strong>[[5,4,11,2],[5,8,4,5]]</p><p><strong>示例 2：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/282505/1614758699913-93a91a5f-d392-47ff-89a1-a15ef83121d5.jpeg#align=left&display=inline&height=91&originHeight=181&originWidth=212&size=0&status=done&style=none&width=106"><br><strong>输入：</strong>root = [1,2,3], targetSum = 5<br><strong>输出：</strong>[]</p><p><strong>示例 3：</strong><br><strong>输入：</strong>root = [1,2], targetSum = 0<br><strong>输出：</strong>[]</p><pre class=" language-java"><code class="language-java">    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">pathSum</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">-=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不满足的路径弹出.满足的不会执行到这里(子节点为空时就返回return了)。</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>解析</strong></p><p><strong>深度优先搜索</strong><br>思路及算法<br>我们可以采用深度优先搜索的方式，枚举每一条从根节点到叶子节点的路径。当我们遍历到叶子节点，且此时路径和恰为目标和时，我们就找到了一条满足条件的路径。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>530. 二叉搜索树的最小绝对差</title>
      <link href="/2021/03/03/hq68kg/"/>
      <url>/2021/03/03/hq68kg/</url>
      
        <content type="html"><![CDATA[<h4 id="530-二叉搜索树的最小绝对差"><a href="#530-二叉搜索树的最小绝对差" class="headerlink" title="530. 二叉搜索树的最小绝对差"></a><a href="https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/">530. 二叉搜索树的最小绝对差</a></h4><p>难度简单 233<br>给你一棵所有节点为非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。</p><p><strong>示例：</strong><br><strong>输入：</strong></p><p>1<br>    <br>     3<br>    /<br>   2</p><p><strong>输出：</strong><br>1</p><p><strong>解释：</strong><br>最小绝对差为 1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。</p><p><strong>提示：</strong></p><ul><li>树中至少有 2 个节点。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pre<span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMinimumDifference</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        pre <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val <span class="token operator">-</span> pre<span class="token punctuation">)</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>解析</strong><br>中序遍历<br>思路与算法<br>考虑对升序数组 a 求任意两个元素之差的绝对值的最小值，答案一定为相邻两个元素之差的最小值，即<br>ans= min{a[i+1]−a[i]}.<br>其中 n 为数组 a 的长度。其他任意间隔距离大于等于 2 的下标对 (i,j) 的元素之差一定大于下标对 (i,i+1) 的元素之差，故不需要再被考虑。<br>回到本题，本题要求二叉搜索树任意两节点差的绝对值的最小值，而我们知道二叉搜索树有个性质为二叉搜索树中序遍历得到的值序列是递增有序的，因此我们只要得到中序遍历后的值序列即能用上文提及的方法来解决。<br>朴素的方法是经过一次中序遍历将值保存在一个数组中再进行遍历求解，我们也可以在中序遍历的过程中用<br>pre 变量保存前驱节点的值，这样即能边遍历边更新答案，不再需要显式创建数组来保存，需要注意的是<br>pre 的初始值需要设置成任意负数标记开头，下文代码中设置为 −1。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>todo 剑指 Offer 59 - I. 滑动窗口的最大值</title>
      <link href="/2021/03/03/xbedsg/"/>
      <url>/2021/03/03/xbedsg/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="剑指-Offer-59-I-滑动窗口的最大值"><a href="#剑指-Offer-59-I-滑动窗口的最大值" class="headerlink" title="剑指 Offer 59 - I. 滑动窗口的最大值"></a><a href="https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/">剑指 Offer 59 - I. 滑动窗口的最大值</a></h4><p>难度简单 200<br>给定一个数组 <code>nums</code> 和滑动窗口的大小 <code>k</code>，请找出所有滑动窗口里的最大值。<br><strong>示例:</strong><br><strong>输入:</strong> <em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>, 和 <em>k</em> = 3<br>**输出: **<code>[3,3,5,5,6,7] </code><br>**解释: **</p><p>滑动窗口的位置                 最大值<br>—————        —–<br>[1  3  -1] -3  5  3  6  7       3<br> 1 [3  -1  -3] 5  3  6  7       3<br> 1  3 [-1  -3  5] 3  6  7       5<br> 1  3  -1 [-3  5  3] 6  7       5<br> 1  3  -1  -3 [5  3  6] 7       6<br> 1  3  -1  -3  5 [3  6  7]      7</p><p><strong>提示：</strong><br>你可以假设 *k *总是有效的，在输入数组不为空的情况下，1 ≤ k ≤  输入数组的大小。<br>注意：本题与主站 239 题相同：<a href="https://leetcode-cn.com/problems/sliding-window-maximum/">https://leetcode-cn.com/problems/sliding-window-maximum/</a></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> k<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> deque<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                deque<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除 deque 中对应的 nums[i-1]</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> deque<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                deque<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保持 deque 递减</span>            deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录窗口最大值</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><a href="https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/solution/mian-shi-ti-59-i-hua-dong-chuang-kou-de-zui-da-1-6/">https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/solution/mian-shi-ti-59-i-hua-dong-chuang-kou-de-zui-da-1-6/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>203. 移除链表元素</title>
      <link href="/2021/03/03/ulv9kz/"/>
      <url>/2021/03/03/ulv9kz/</url>
      
        <content type="html"><![CDATA[<h4 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">203. 移除链表元素</a></h4><p>难度简单 540<br>删除链表中等于给定值 <strong>_val _</strong>的所有节点。<br><strong>示例:</strong><br><strong>输入:</strong> 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, <em><strong>val</strong></em> = 6<br><strong>输出:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode &amp;#123; *     int val; *     ListNode next; *     ListNode() &amp;#123;&amp;#125; *     ListNode(int val) &amp;#123; this.val = val; &amp;#125; *     ListNode(int val, ListNode next) &amp;#123; this.val = val; this.next = next; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">removeElements</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode sentinal<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sentinal<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>        ListNode cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        ListNode pre<span class="token operator">=</span>sentinal<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token operator">==</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                pre<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sentinal<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>437. 路径总和 III--🀄️</title>
      <link href="/2021/03/03/gpc9sg/"/>
      <url>/2021/03/03/gpc9sg/</url>
      
        <content type="html"><![CDATA[<h4 id="437-路径总和-III"><a href="#437-路径总和-III" class="headerlink" title="437. 路径总和 III"></a><a href="https://leetcode-cn.com/problems/path-sum-iii/">437. 路径总和 III</a></h4><p>难度中等 763<br>给定一个二叉树，它的每个结点都存放着一个整数值。<br>找出路径和等于给定数值的路径总数。<br>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。<br>二叉树不超过 1000 个节点，且节点数值范围是 [-1000000,1000000] 的整数。<br><strong>示例：</strong><br>root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8</p><p>10<br>     /  <br>    <strong>5</strong>   <strong>-3</strong><br>   <strong>/</strong> <strong>**    *<em>\</em>*<br>  **3</strong>   <strong>2</strong>   <strong>11</strong><br> / \   *<em>\</em>*<br>3  -2   *<em>1\</em>*</p><p>返回 3。和等于 8 的路径有:</p><ol><li>5 -&gt; 3</li><li>5 -&gt; 2 -&gt; 1</li><li>-3 -&gt; 11.</li></ol><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">countPath</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token operator">+</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countPath</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> sum <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result <span class="token operator">+</span> <span class="token function">countPath</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>sum<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">countPath</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：Geralt_U链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>path<span class="token operator">-</span>sum<span class="token operator">-</span>iii<span class="token operator">/</span>solution<span class="token operator">/</span>437lu<span class="token operator">-</span>jing<span class="token operator">-</span>zong<span class="token operator">-</span>he<span class="token operator">-</span>iii<span class="token operator">-</span>di<span class="token operator">-</span>gui<span class="token operator">-</span>fang<span class="token operator">-</span>shi<span class="token operator">-</span>by<span class="token operator">-</span>ming<span class="token operator">-</span>zhi<span class="token operator">/</span></code></pre><p>解析</p><p>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点） 。这就要求我们只需要去求三部分即可：<br>以当前节点作为头结点的路径数量<br>以当前节点的左孩子作为头结点的路径数量<br>以当前节点的右孩子作为头结点啊路径数量<br>将这三部分之和作为最后结果即可。<br>最后的问题是：我们应该如何去求以当前节点作为头结点的路径的数量？这里依旧是按照树的遍历方式模板，每到一个节点让 sum-root.val，并判断 sum 是否为 0，如果为零的话，则找到满足条件的一条路径。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>168. Excel表列名称</title>
      <link href="/2021/03/03/wye5f4/"/>
      <url>/2021/03/03/wye5f4/</url>
      
        <content type="html"><![CDATA[<h4 id="168-Excel-表列名称"><a href="#168-Excel-表列名称" class="headerlink" title="168. Excel 表列名称"></a><a href="https://leetcode-cn.com/problems/excel-sheet-column-title/">168. Excel 表列名称</a></h4><p>难度简单 317<br>给定一个正整数，返回它在 Excel 表中相对应的列名称。<br>例如，<br>    1 -&gt; A<br>    2 -&gt; B<br>    3 -&gt; C<br>    …<br>    26 -&gt; Z<br>    27 -&gt; AA<br>    28 -&gt; AB <br>    …</p><p><strong>示例 1:</strong><br><strong>输入:</strong> 1<br><strong>输出:</strong> “A”</p><p><strong>示例  2:</strong><br><strong>输入:</strong> 28<br><strong>输出:</strong> “AB”</p><p><strong>示例  3:</strong><br><strong>输入:</strong> 701<br><strong>输出:</strong> “ZY”.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">convertToTitle</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">26</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：windliang</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/excel-sheet-column-title/solution/xiang-xi-tong-su-de-si-lu-fen-xi-by-windliang-2/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614736149302-e6bbb373-d5c1-4fa6-b321-66c1334a9d82.png#align=left&display=inline&height=227&originHeight=454&originWidth=570&size=62731&status=done&style=none&width=285" alt="image.png"><br><a href="https://leetcode-cn.com/problems/excel-sheet-column-title/solution/xiang-xi-tong-su-de-si-lu-fen-xi-by-windliang-2/">https://leetcode-cn.com/problems/excel-sheet-column-title/solution/xiang-xi-tong-su-de-si-lu-fen-xi-by-windliang-2/</a><br><a href="https://leetcode-cn.com/problems/excel-sheet-column-title/solution/168-by-ikaruga/">https://leetcode-cn.com/problems/excel-sheet-column-title/solution/168-by-ikaruga/</a><br><a href="https://leetcode-cn.com/problems/excel-sheet-column-title/solution/guan-yu-n-de-li-jie-by-douya0808/">https://leetcode-cn.com/problems/excel-sheet-column-title/solution/guan-yu-n-de-li-jie-by-douya0808/</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>无标题</title>
      <link href="/2021/03/03/miaa3f/"/>
      <url>/2021/03/03/miaa3f/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>189. 旋转数组</title>
      <link href="/2021/03/03/gk9ggn/"/>
      <url>/2021/03/03/gk9ggn/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="189-旋转数组"><a href="#189-旋转数组" class="headerlink" title="189. 旋转数组"></a><a href="https://leetcode-cn.com/problems/rotate-array/">189. 旋转数组</a></h4><p>难度中等 893<br>给定一个数组，将数组中的元素向右移动 <code>k</code>_ <em>个位置，其中 <code>k</code></em> _是非负数。</p><p><strong>进阶：</strong></p><ul><li>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。</li><li>你可以使用空间复杂度为  O(1) 的 **原地  **算法解决这个问题吗？</li></ul><p><strong>示例 1:</strong><br><strong>输入:</strong> nums = [1,2,3,4,5,6,7], k = 3<br><strong>输出:</strong> <code>[5,6,7,1,2,3,4]</code><br><strong>解释:</strong><br>向右旋转 1 步: <code>[7,1,2,3,4,5,6]</code><br>向右旋转 2 步: <code>[6,7,1,2,3,4,5]</code><br>向右旋转 3 步: <code>[5,6,7,1,2,3,4]</code><br><strong>示例  2:</strong><br><strong>输入：</strong>nums = [-1,-100,3,99], k = 2<br><strong>输出：</strong>[3,99,-1,-100]<br><strong>解释:</strong><br>向右旋转 1 步: [99,-1,-100,3]<br>向右旋转 2 步: [3,99,-1,-100]</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            newArr<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>newArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>反转法</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        k <span class="token operator">%=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            start <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            end <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614733676387-fb86ac52-0e63-4f6f-ad8f-66250cc8c834.png#align=left&display=inline&height=340&originHeight=680&originWidth=1314&size=239787&status=done&style=none&width=657" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>283. 移动零</title>
      <link href="/2021/03/03/nlrvsm/"/>
      <url>/2021/03/03/nlrvsm/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode-cn.com/problems/move-zeroes/">283. 移动零</a></h4><p>难度简单968<br>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。<br><strong>示例:</strong><br><strong>输入:</strong> <code>[0,1,0,3,12]</code><br><strong>输出:</strong> <code>[1,3,12,0,0]</code><br><strong>说明</strong>:</p><ol><li>必须在原数组上操作，不能拷贝额外的数组。</li><li>尽量减少操作次数。</li></ol><p>不太好理解</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>双指针</strong></p><p>思路及解法<br>使用双指针，左指针指向当前已经处理好的序列的尾部，右指针指向待处理序列的头部。<br>右指针不断向右移动，每次右指针指向非零数，则将左右指针对应的数交换，同时左指针右移。<br>注意到以下性质：<br>左指针左边均为非零数；<br>右指针左边直到左指针处均为零。<br>因此每次交换，都是将左指针的零与右指针的非零数交换，且非零数的相对顺序并未改变。</p><hr><p><strong>易理解</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moveZeroes1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> indexNow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> indexNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>indexNum<span class="token operator">&lt;</span>m<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>indexNum<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>indexNow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>indexNum<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">++</span>indexNum<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> indexNow<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>都知道是 0，还换啥？覆盖，后面补 0 就行了.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>198. 打家劫舍</title>
      <link href="/2021/03/03/bdveck/"/>
      <url>/2021/03/03/bdveck/</url>
      
        <content type="html"><![CDATA[<h4 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a><a href="https://leetcode-cn.com/problems/house-robber/">198. 打家劫舍</a></h4><p>难度中等 1295<br>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。<br>给定一个代表每个房屋存放金额的非负整数数组，计算你**  不触动警报装置的情况下  **，一夜之内能够偷窃到的最高金额。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>[1,2,3,1]<br><strong>输出：</strong>4<br><strong>解释：</strong>偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>      偷窃到的最高金额 = 1 + 3 = 4 。<br><strong>示例 2：</strong><br><strong>输入：</strong>[2,7,9,3,1]<br><strong>输出：</strong>12<br><strong>解释：</strong>偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。<br>      偷窃到的最高金额 = 2 + 9 + 1 = 12 。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不能连续</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>解析</strong><br>如果房屋数量大于两间，应该如何计算能够偷窃到的最高总金额呢？对于第 k (k&gt;2) 间房屋，有两个选项：<br>偷窃第 k 间房屋，那么就不能偷窃第 k−1 间房屋，偷窃总金额为前 k−2 间房屋的最高总金额与第 k 间房屋的金额之和。<br>不偷窃第 k 间房屋，偷窃总金额为前 k−1 间房屋的最高总金额。</p><hr><p><strong>？？？？？</strong></p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//？</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> first<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> second<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp<span class="token operator">=</span>second<span class="token punctuation">;</span>            second<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>second<span class="token punctuation">,</span>first<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            first<span class="token operator">=</span>temp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> second<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>448. 找到所有数组中消失的数字</title>
      <link href="/2021/03/02/qphr1t/"/>
      <url>/2021/03/02/qphr1t/</url>
      
        <content type="html"><![CDATA[<h4 id="448-找到所有数组中消失的数字"><a href="#448-找到所有数组中消失的数字" class="headerlink" title="448. 找到所有数组中消失的数字"></a><a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/">448. 找到所有数组中消失的数字</a></h4><p>难度简单<br>给定一个范围在   1 ≤ a[i] ≤ <em>n</em> ( <em>n</em> = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。<br>找到所有在 [1, <em>n</em>] 范围之间没有出现在数组中的数字。<br>您能在不使用额外空间且时间复杂度为<em>O(n)*的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。<br>*</em>示例:**<br><strong>输入:</strong><br>[4,3,2,7,8,2,3,1]</p><p><strong>输出:</strong><br>[5,6]</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">findDisappearedNumbers1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> n<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>原地修改<br>思路及解法<br>我们可以用一个哈希表记录数组<br>nums 中的数字，由于数字范围均在 [1,n] 中，记录数字后我们再利用哈希表检查 [1,n] 中的每一个数是否出现，从而找到缺失的数字。<br>由于数字范围均在 [1,n] 中，我们也可以用一个长度为 n 的数组来代替哈希表。这一做法的空间复杂度是 O(n) 的。我们的目标是优化空间复杂度到 O(1)。<br>注意到 nums 的长度恰好也为 n，能否让 nums 充当哈希表呢？<br>由于 <strong>nums 的数字范围均在 [1,n] 中</strong>，我们可以利用这一范围之外的数字，来表达「是否存在」的含义。<br>具体来说，遍历 nums，每遇到一个数 x，就让 nums[x−1] 增加 n。由于 <strong>nums 中所有数均在 [1,n] 中，增加以后，这些数必然大于 n。</strong>最后我们遍历 nums，若 nums[i] 未大于 n，就说明没有遇到过数 i+1。这样我们就找到了缺失的数字。<br>注意，当我们遍历到某个位置时，其中的数可能已经被增加过，因此需要对 n 取模来还原出它本来的值.</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614692448239-fd77ab83-a85d-4c18-b21f-24cfcab7b31b.png#align=left&display=inline&height=531&originHeight=1062&originWidth=870&size=271570&status=done&style=none&width=435" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>169. 多数元素</title>
      <link href="/2021/03/02/xzqpk0/"/>
      <url>/2021/03/02/xzqpk0/</url>
      
        <content type="html"><![CDATA[<h4 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169. 多数元素"></a><a href="https://leetcode-cn.com/problems/majority-element/">169. 多数元素</a></h4><p>难度简单<br>给定一个大小为 <em>n *的数组，找到其中的多数元素。多数元素是指在数组中出现次数 *</em>大于** <code>⌊ n/2 ⌋</code> 的元素。<br>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><p><strong>示例  1：</strong><br><strong>输入：</strong>[3,2,3]<br><strong>输出：</strong>3<br><strong>示例  2：</strong><br><strong>输入：</strong>[2,2,1,1,1,2,2]<br><strong>输出：</strong>2</p><p><strong>进阶：</strong></p><ul><li>尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。</li></ul><p><strong>常规法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">countNums</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>counts<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                counts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                counts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> counts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> counts<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> counts <span class="token operator">=</span> <span class="token function">countNums</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> majorityEntry <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> entry <span class="token operator">:</span> counts<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>majorityEntry <span class="token operator">==</span> null <span class="token operator">||</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> majorityEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                majorityEntry <span class="token operator">=</span> entry<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> majorityEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>排序</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><p><strong>投票算法</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Integer candidate <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                candidate <span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            count <span class="token operator">+=</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> candidate<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> candidate<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>majority<span class="token operator">-</span>element<span class="token operator">/</span>solution<span class="token operator">/</span>duo<span class="token operator">-</span>shu<span class="token operator">-</span>yuan<span class="token operator">-</span>su<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><p><strong>Boyer-Moore 投票算法</strong><br>思路<br><strong>如果我们把众数记为 +1，把其他数记为 −1，将它们全部加起来，显然和大于 0，从结果本身我们可以看出众数比其他数多。</strong><br>算法<br>Boyer-Moore 算法的本质和方法四中的分治十分类似。<br>我们首先给出 Boyer-Moore 算法的<strong>详细步骤</strong>：<br>我们维护一个候选众数 candidate 和它出现的次数 count。初始时 candidate 可以为任意值，count 为 0；<br>我们遍历数组 nums 中的所有元素，对于每个元素 x，在判断 x 之前，如果 count 的值为 0，我们先将 x 的值赋予 candidate，随后我们判断 x：<br>如果 x 与 candidate 相等，那么计数器 count 的值增加 1；<br>如果 x 与 candidate 不等，那么计数器 count 的值减少 1。<br>在遍历完成后，candidate 即为整个数组的众数。<br><strong>复杂度分析</strong><br>时间复杂度：O(n)。Boyer-Moore 算法只对数组进行了一次遍历。<br>空间复杂度：O(1)。Boyer-Moore 算法只需要常数级别的额外空间。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>674. 最长连续递增序列</title>
      <link href="/2021/03/02/thkuuh/"/>
      <url>/2021/03/02/thkuuh/</url>
      
        <content type="html"><![CDATA[<h4 id="674-最长连续递增序列"><a href="#674-最长连续递增序列" class="headerlink" title="674. 最长连续递增序列"></a><a href="https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/">674. 最长连续递增序列</a></h4><p>难度简单 172<br>给定一个未经排序的整数数组，找到最长且**  连续递增的子序列<strong>，并返回该序列的长度。<br>**连续递增的子序列</strong> 可以由两个下标 <code>l</code> 和 <code>r</code>（<code>l &lt; r</code>）确定，如果对于每个 <code>l &lt;= i &lt; r</code>，都有 <code>nums[i] &lt; nums[i + 1]</code> ，那么子序列 <code>[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]</code> 就是连续递增子序列。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>nums = [1,3,5,4,7]<br><strong>输出：</strong>3<br><strong>解释：</strong>最长连续递增序列是 [1,3,5], 长度为 3。<br>尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为 5 和 7 在原数组里被 4 隔开。</p><p><strong>示例 2：</strong><br><strong>输入：</strong>nums = [2,2,2,2,2]<br><strong>输出：</strong>1<br><strong>解释：</strong>最长连续递增序列是 [2], 长度为 1。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findLengthOfLCIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 求数组nums中，最长的递增子数组的长度</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// pre表示dp[i-1]: 必须以i-1位置结尾的递增子数组长度</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> cur <span class="token operator">+=</span> pre<span class="token punctuation">;</span>            ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span><span class="token comment" spellcheck="true">///向下传递</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这不就是一个简单的<strong>动态规划</strong>吗<br>问题：求数组 nums 中，最长递增子数组的长度。<br>子数组问题，一般常用套路：</p><pre><code>子数组必须以 i 位置结尾时的答案是啥；如果每个位置都能结算一个答案，最终的答案必是其中的max。</code></pre><p>所以，定义 DP：</p><pre><code>dp[i]含义：必须以 i 位置结尾的子数组中，最长递增子数组的长度是多少。dp[i] = nums[i] &gt; nums[i-1] ? dp[i-1] + 1 : 1;ans = max &#123; dp[i] &#125;</code></pre><hr><p><strong>自己写的也 ok</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findLengthOfLCIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 求数组nums中，最长的递增子数组的长度</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// pre表示dp[i-1]: 必须以i-1位置结尾的递增子数组长度</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ok</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//return dp[nums.length-1];//这个为什么不行？</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>104. 二叉树的最大深度</title>
      <link href="/2021/03/02/nz0tc6/"/>
      <url>/2021/03/02/nz0tc6/</url>
      
        <content type="html"><![CDATA[<h4 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></h4><p>难度简单 806<br>给定一个二叉树，找出其最大深度。<br>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。<br><strong>说明:</strong> 叶子节点是指没有子节点的节点。<br><strong>示例：</strong><br>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，<br>    3<br>   / <br>  9  20<br>    /  <br>   15   7<br>返回它的最大深度  3 。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth1</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> leftHeight <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rightHeight <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftHeight<span class="token punctuation">,</span> rightHeight<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/solution/er-cha-shu-de-zui-da-shen-du-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>广度优先搜索</strong></p><p>思路与算法<br>我们也可以用「广度优先搜索」的方法来解决这道题目，但我们需要对其进行一些修改，此时我们广度优先搜索的队列里存放的是「当前层的所有节点」。每次拓展下一层的时候，不同于广度优先搜索的每次只从队列里拿出一个节点，我们需要将队列里的所有节点都拿出来进行拓展，这样能保证每次拓展完的时候队列里存放的是当前层的所有节点，即我们是一层一层地进行拓展，最后我们用一个变量 ans 来维护拓展的次数，该二叉树的最大深度即为 ans。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>69. x 的平方根</title>
      <link href="/2021/03/02/htmhva/"/>
      <url>/2021/03/02/htmhva/</url>
      
        <content type="html"><![CDATA[<h4 id="69-x-的平方根"><a href="#69-x-的平方根" class="headerlink" title="69. x 的平方根"></a><a href="https://leetcode-cn.com/problems/sqrtx/">69. x 的平方根</a></h4><p>难度简单 605<br>实现 <code>int sqrt(int x)</code> 函数。<br>计算并返回 <em>x</em> 的平方根，其中 <em>x *是非负整数。<br>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。<br>*</em>示例 1:**<br><strong>输入:</strong> 4<br><strong>输出:</strong> 2</p><p><strong>示例 2:</strong><br><strong>输入:</strong> 8<br><strong>输出:</strong> 2<br><strong>说明:</strong> 8 的平方根是 2.82842…, <br>      由于返回类型是整数，小数部分将被舍去。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> x<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> mid <span class="token operator">*</span> mid <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ans <span class="token operator">=</span> mid<span class="token punctuation">;</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/sqrtx/solution/x-de-ping-fang-gen-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>155. 最小栈</title>
      <link href="/2021/03/02/axq8k3/"/>
      <url>/2021/03/02/axq8k3/</url>
      
        <content type="html"><![CDATA[<h4 id="155-最小栈"><a href="#155-最小栈" class="headerlink" title="155. 最小栈"></a><a href="https://leetcode-cn.com/problems/min-stack/">155. 最小栈</a></h4><p>难度简单 820<br>设计一个支持 <code>push</code> ，<code>pop</code> ，<code>top</code> 操作，并能在常数时间内检索到最小元素的栈。</p><ul><li><code>push(x)</code> —— 将元素 x 推入栈中。</li><li><code>pop()</code> —— 删除栈顶的元素。</li><li><code>top()</code> —— 获取栈顶元素。</li><li><code>getMin()</code> —— 检索栈中的最小元素。</li></ul><p><strong>示例:</strong><br><strong>输入：</strong><br>[“MinStack”,”push”,”push”,”push”,”getMin”,”pop”,”top”,”getMin”]<br>[[],[-2],[0],[-3],[],[],[],[]]</p><p><strong>输出：</strong><br>[null,null,null,null,-3,null,0,-2]</p><p><strong>解释：</strong><br>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin();   –&gt; 返回 -3.<br>minStack.pop();<br>minStack.top();      –&gt; 返回 0.<br>minStack.getMin();   –&gt; 返回 -2.</p><p><strong>提示：</strong></p><ul><li><code>pop</code>、<code>top</code> 和 <code>getMin</code> 操作总是在 <strong>非空栈</strong> 上调用。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> xStack<span class="token punctuation">;</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> minStack<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        xStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        xStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        xStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> xStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/min-stack/solution/zui-xiao-zhan-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your MinStack object will be instantiated and called as such: * MinStack obj = new MinStack(); * obj.push(x); * obj.pop(); * int param_3 = obj.top(); * int param_4 = obj.getMin(); */</span></code></pre><p>解析</p><p><strong>辅助栈</strong><br>要做出这道题目，首先要理解栈结构先进后出的性质。<br>对于栈来说，如果一个元素 a 在入栈时，栈里有其它的元素 b, c, d，那么无论这个栈在之后经历了什么操作，只要 a 在栈中，b, c, d 就一定在栈中，因为在 a 被弹出之前，b, c, d 不会被弹出。<br>因此，在操作过程中的任意一个时刻，只要栈顶的元素是 a，那么我们就可以确定栈里面现在的元素一定是 a, b, c, d。<br>那么，我们可以在每个元素 a 入栈时把当前栈的最小值 m 存储起来。在这之后无论何时，如果栈顶元素是 a，我们就可以直接返回存储的最小值 m。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614667881162-47efa23b-3e43-45a3-974c-c3361f6ceabe.png#align=left&display=inline&height=222&originHeight=634&originWidth=872&size=246619&status=done&style=none&width=306" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>20. 有效的括号</title>
      <link href="/2021/03/02/cin3y5/"/>
      <url>/2021/03/02/cin3y5/</url>
      
        <content type="html"><![CDATA[<h4 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号</a></h4><p>难度简单 2197<br>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code>，判断字符串是否有效。<br>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p><strong>示例 1：</strong><br><strong>输入：</strong>s = “()”<br><strong>输出：</strong>true</p><p><strong>示例  2：</strong><br><strong>输入：</strong>s = “()[]{}”<br><strong>输出：</strong>true</p><p><strong>示例  3：</strong><br><strong>输入：</strong>s = “(]”<br><strong>输出：</strong>false</p><p><strong>示例  4：</strong><br><strong>输入：</strong>s = “([)]”<br><strong>输出：</strong>false</p><p><strong>示例  5：</strong><br><strong>输入：</strong>s = “{[]}”<br><strong>输出：</strong>true</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10</code></li><li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Character<span class="token operator">></span> pairs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Character<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'&amp;#125;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;#123;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Deque&lt;Character> stack = new LinkedList&lt;Character>();</span>        Stack<span class="token operator">&lt;</span>Character<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这两个都可以ok</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pairs<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//🈶️又括号，栈就不能为空(必须有左扩号)。</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> pairs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>141. 环形链表</title>
      <link href="/2021/03/02/nkif1o/"/>
      <url>/2021/03/02/nkif1o/</url>
      
        <content type="html"><![CDATA[<h3 id="categories-Blog-Algorithm"><a href="#categories-Blog-Algorithm" class="headerlink" title="categories: [Blog,Algorithm]"></a>categories: [Blog,Algorithm]</h3><hr><h4 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle/">141. 环形链表</a></h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode fast<span class="token operator">=</span>head<span class="token punctuation">,</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="234"><li>回文链表</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode &amp;#123; *     int val; *     ListNode next; *     ListNode() &amp;#123;&amp;#125; *     ListNode(int val) &amp;#123; this.val = val; &amp;#125; *     ListNode(int val, ListNode next) &amp;#123; this.val = val; this.next = next; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stk <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null<span class="token operator">==</span>head <span class="token operator">||</span> null<span class="token operator">==</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        ListNode p <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">==</span> stk<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：wo-yao-chu-qu-luan-shuo</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/palindrome-linked-list/solution/hui-wen-lian-biao-fu-zhu-zhan-by-wo-yao-ab2uc/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>234. 回文链表</title>
      <link href="/2021/03/02/fh9tkz/"/>
      <url>/2021/03/02/fh9tkz/</url>
      
        <content type="html"><![CDATA[<h4 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="234. 回文链表"></a><a href="https://leetcode-cn.com/problems/palindrome-linked-list/">234. 回文链表</a></h4><p>难度简单 872<br>请判断一个链表是否为回文链表。<br><strong>示例 1:</strong><br><strong>输入:</strong> 1-&gt;2<br><strong>输出:</strong> false<br><strong>示例 2:</strong><br><strong>输入:</strong> 1-&gt;2-&gt;2-&gt;1<br><strong>输出:</strong> true</p><p><strong>进阶：</strong><br>你能否用  O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode &amp;#123; *     int val; *     ListNode next; *     ListNode() &amp;#123;&amp;#125; *     ListNode(int val) &amp;#123; this.val = val; &amp;#125; *     ListNode(int val, ListNode next) &amp;#123; this.val = val; this.next = next; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> vals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将链表的值复制到数组中</span>        ListNode currentNode <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            vals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用双指针判断是否回文</span>        <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> back <span class="token operator">=</span> vals<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>front <span class="token operator">&lt;</span> back<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>front<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>vals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>back<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            front<span class="token operator">++</span><span class="token punctuation">;</span>            back<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/palindrome-linked-list/solution/hui-wen-lian-biao-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>栈</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode &amp;#123; *     int val; *     ListNode next; *     ListNode() &amp;#123;&amp;#125; *     ListNode(int val) &amp;#123; this.val = val; &amp;#125; *     ListNode(int val, ListNode next) &amp;#123; this.val = val; this.next = next; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stk <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null<span class="token operator">==</span>head <span class="token operator">||</span> null<span class="token operator">==</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        ListNode p <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">==</span> stk<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：wo-yao-chu-qu-luan-shuo</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/palindrome-linked-list/solution/hui-wen-lian-biao-fu-zhu-zhan-by-wo-yao-ab2uc/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 58 - II. 左旋转字符串</title>
      <link href="/2021/03/02/hmtv7x/"/>
      <url>/2021/03/02/hmtv7x/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-58-II-左旋转字符串"><a href="#剑指-Offer-58-II-左旋转字符串" class="headerlink" title="剑指 Offer 58 - II. 左旋转字符串"></a><a href="https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">剑指 Offer 58 - II. 左旋转字符串</a></h4><p>难度简单 85<br>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字 2，该函数将返回左旋转两位得到的结果”cdefgab”。</p><p><strong>示例 1：</strong><br><strong>输入:</strong> s = “abcdefg”, k = 2<br>**输出: **”cdefgab”</p><p><strong>示例 2：</strong><br><strong>输入:</strong> s = “lrloseumgh”, k = 6<br>**输出: **”umghlrlose”</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">reverseLeftWords1</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>很骚</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StringBuilder res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">%</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：jyd</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/solution/mian-shi-ti-58-ii-zuo-xuan-zhuan-zi-fu-chuan-qie-p/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>190. 颠倒二进制位</title>
      <link href="/2021/03/02/nuec3c/"/>
      <url>/2021/03/02/nuec3c/</url>
      
        <content type="html"><![CDATA[<h4 id="190-颠倒二进制位"><a href="#190-颠倒二进制位" class="headerlink" title="190. 颠倒二进制位"></a><a href="https://leetcode-cn.com/problems/reverse-bits/">190. 颠倒二进制位</a></h4><p>难度简单 269<br>颠倒给定的 32 位无符号整数的二进制位。</p><p><strong>示例 1：</strong><br><strong>输入:</strong> 00000010100101000001111010011100<br><strong>输出:</strong> 00111001011110000010100101000000<br><strong>解释: **输入的二进制串 **00000010100101000001111010011100 **表示无符号整数</strong> 43261596，**<br>    因此返回 964176192，其二进制表示形式为 <strong>00111001011110000010100101000000</strong>。<br><strong>示例 2：</strong><br><strong>输入：</strong>11111111111111111111111111111101<br><strong>输出：</strong>10111111111111111111111111111111<br><strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 表示无符号整数 4294967293，<br>      因此返回 3221225471 其二进制表示形式为 <strong>10111111111111111111111111111111 。</strong></p><p><strong>提示：</strong></p><ul><li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li><li>在 Java 中，编译器使用<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/5295284">二进制补码</a>记法来表示有符号整数。因此，在上面的 <strong>示例 2</strong> 中，输入表示有符号整数 <code>-3</code>，输出表示有符号整数 <code>-1073741825</code>。</li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            result <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>            n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：xiaowangku链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>reverse<span class="token operator">-</span>bits<span class="token operator">/</span>solution<span class="token operator">/</span>si<span class="token operator">-</span>lu<span class="token operator">-</span>fen<span class="token operator">-</span>xi<span class="token operator">-</span><span class="token number">190</span><span class="token operator">-</span>ti<span class="token operator">-</span>dian<span class="token operator">-</span>dao<span class="token operator">-</span>er<span class="token operator">-</span>jin<span class="token operator">-</span>zhi<span class="token operator">-</span>r3wy6<span class="token operator">/</span></code></pre><p>【一个小细节】<br>由于 1 &amp; n 的值为 0 或者 1，所以返回结果 result 直接加上（1 &amp; n）以更新最后一位数值。<br>这里也可以使用或运算。参与或运算的两个元素，只要有一个为 1，那么结果就为 1，否则为 0。</p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            result <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>            n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>思路分析</strong></p><p>1、对二进制数进行翻转，类似于整数翻转，需要先获得二进制数的末位。可以通过与运算实现（1 &amp; n）。<br>我们知道，1&amp;0=0；1&amp;1=1，因此 0 或 1 与 1 相与，都等于本身。若要求 n 的末位二进制位值，只需将 n 和 1 做与运算。<br>下图所示求 5 的最后一个二进制位值<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614657463347-2c190944-c5e0-468c-a16e-17725eb97ed9.png#align=left&display=inline&height=152&originHeight=304&originWidth=376&size=17796&status=done&style=none&width=188" alt="image.png"><br>类似的求<strong>最后两位二进制值</strong>需要将 n 和 3 做与运算。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614657480229-ac09e79e-b6b1-4edb-a88f-0d22c085a878.png#align=left&display=inline&height=164&originHeight=328&originWidth=400&size=19331&status=done&style=none&width=200" alt="image.png"><br>2、获取末位值后，需要获得倒数第二位数值，这里通过移位即可实现：n&gt;&gt;1，使倒数第二位移至末位。我们只需位移 32 次，就能获得 n 的所有二进制位值。<br>3、使用 result 对各个二进制位进行保存。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 42. 连续子数组的最大和</title>
      <link href="/2021/03/02/grnayf/"/>
      <url>/2021/03/02/grnayf/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-42-连续子数组的最大和"><a href="#剑指-Offer-42-连续子数组的最大和" class="headerlink" title="剑指 Offer 42. 连续子数组的最大和"></a><a href="https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">剑指 Offer 42. 连续子数组的最大和</a></h4><p>难度简单 206<br>输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。<br>要求时间复杂度为 O(n)。</p><p><strong>示例 1:</strong><br><strong>输入:</strong> nums = [-2,1,-3,4,-1,2,1,-5,4]<br><strong>输出:</strong> 6<br><strong>解释:</strong> 连续子数组  [4,-1,2,1] 的和最大，为  6。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：jyd</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/solution/mian-shi-ti-42-lian-xu-zi-shu-zu-de-zui-da-he-do-2/</span></code></pre><p>** 解析**</p><p><strong>动态规划</strong>是本题的最优解法，以下按照标准流程解题。<br>动态规划解析：</p><p>状态定义： 设动态规划列表 dp ，dp[i] 代表以元素 nums[i] 为结尾的连续子数组最大和。<br>为何定义最大和 dp[i] 中必须包含元素 nums[i] ：保证 dp[i] 递推到 dp[i+1] 的正确性；如果不包含 nums[i] ，递推时则不满足题目的 连续子数组 要求。<br>转移方程：<br>若 dp[i−1]≤0 ，说明 dp[i−1] 对 dp[i] 产生负贡献，即 dp[i−1]+nums[i] 还不如 nums[i] 本身大。<br>当 dp[i−1]&gt;0 时：执行 dp[i]=dp[i−1]+nums[i] ；<br>当 dp[i−1]≤0 时：执行 dp[i]=nums[i] ；<br>初始状态： dp[0]=nums[0]，即以 nums[0] 结尾的连续子数组最大和为 nums[0] 。<br>返回值： 返回 dp 列表中的最大值，代表全局最大值。</p><hr><p><strong>易错</strong></p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Integer.MIN_VALUE</span>        <span class="token keyword">int</span> pre<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Integer.MIN_VALUE</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pre<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>pre<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//err Math.max(pre,pre+nums[i])</span>            max<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>922. 按奇偶排序数组 II</title>
      <link href="/2021/03/02/mc69vt/"/>
      <url>/2021/03/02/mc69vt/</url>
      
        <content type="html"><![CDATA[<h4 id="922-按奇偶排序数组-II"><a href="#922-按奇偶排序数组-II" class="headerlink" title="922. 按奇偶排序数组 II"></a><a href="https://leetcode-cn.com/problems/sort-array-by-parity-ii/">922. 按奇偶排序数组 II</a></h4><p>难度简单 191<br>给定一个非负整数数组 <code>A</code>， A 中一半整数是奇数，一半整数是偶数。<br>对数组进行排序，以便当 <code>A[i]</code> 为奇数时，<code>i</code> 也是奇数；当 <code>A[i]</code> 为偶数时， <code>i</code> 也是偶数。<br>你可以返回任何满足上述条件的数组作为答案。</p><p><strong>示例：</strong><br><strong>输入：</strong>[4,2,5,7]<br><strong>输出：</strong>[4,5,2,7]<br><strong>解释：</strong>[4,7,2,5]，[2,5,4,7]，[2,7,4,5] 也会被接受。</p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArrayByParityII</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> A<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>                i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> A<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>                i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArrayByParityII</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    j <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> A<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>sort<span class="token operator">-</span>array<span class="token operator">-</span>by<span class="token operator">-</span>parity<span class="token operator">-</span>ii<span class="token operator">/</span>solution<span class="token operator">/</span>an<span class="token operator">-</span>qi<span class="token operator">-</span>ou<span class="token operator">-</span>pai<span class="token operator">-</span>xu<span class="token operator">-</span>shu<span class="token operator">-</span>zu<span class="token operator">-</span>ii<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><p><strong>双指针</strong><br>思路与算法<br>如果<strong>原数组可以修改</strong>，则可以使用就地算法求解。<br>为数组的<strong>偶数</strong>下标部分和<strong>奇数</strong>下标部分分别维护指针** i,j<strong>。随后，在每一步中，如果 **A[i] 为奇数</strong>，则不断地向前移动** j<strong>（每次移动两个单位），直到遇见下一个</strong>偶数<strong>。此时，可以直接将 **A[i] 与 A[j] 交换</strong>。我们不断进行这样的过程，最终能够将所有的整数放在正确的位置上。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>14. 最长公共前缀</title>
      <link href="/2021/03/02/zr12cg/"/>
      <url>/2021/03/02/zr12cg/</url>
      
        <content type="html"><![CDATA[<h4 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14. 最长公共前缀"></a><a href="https://leetcode-cn.com/problems/longest-common-prefix/">14. 最长公共前缀</a></h4><p>难度简单 1479<br>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>strs = [“flower”,”flow”,”flight”]<br><strong>输出：</strong>“fl”</p><p><strong>示例 2：</strong><br><strong>输入：</strong>strs = [“dog”,”racecar”,”car”]<br><strong>输出：</strong>“”<br><strong>解释：</strong>输入不存在公共前缀。</p><p><strong>提示：</strong></p><ul><li><code>0 &lt;= strs.length &lt;= 200</code></li><li><code>0 &lt;= strs[i].length &lt;= 200</code></li><li><code>strs[i]</code> 仅由小写英文字母组成.</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strs <span class="token operator">==</span> null <span class="token operator">||</span> strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        String prefix <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            prefix <span class="token operator">=</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> prefix<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>String str1<span class="token punctuation">,</span> String str2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> str1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">==</span> str2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>longest<span class="token operator">-</span>common<span class="token operator">-</span>prefix<span class="token operator">/</span>solution<span class="token operator">/</span>zui<span class="token operator">-</span>chang<span class="token operator">-</span>gong<span class="token operator">-</span>gong<span class="token operator">-</span>qian<span class="token operator">-</span>zhui<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strs <span class="token operator">==</span> null <span class="token operator">||</span> strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>longest<span class="token operator">-</span>common<span class="token operator">-</span>prefix<span class="token operator">/</span>solution<span class="token operator">/</span>zui<span class="token operator">-</span>chang<span class="token operator">-</span>gong<span class="token operator">-</span>gong<span class="token operator">-</span>qian<span class="token operator">-</span>zhui<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><p><strong>解析</strong></p><p>方法一是横向扫描，依次遍历每个字符串，更新最长公共前缀。<br>方法二是纵向扫描。纵向扫描时，从前往后遍历所有字符串的每一列，<strong>比较相同列上的字符是否相同，如果相同则继续对下一列进行比较，如果不相同则当前列不再属于公共前缀，当前列之前的部分为最长公共前缀</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 61. 扑克牌中的顺子</title>
      <link href="/2021/03/02/oskktz/"/>
      <url>/2021/03/02/oskktz/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-61-扑克牌中的顺子"><a href="#剑指-Offer-61-扑克牌中的顺子" class="headerlink" title="剑指 Offer 61. 扑克牌中的顺子"></a><a href="https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/">剑指 Offer 61. 扑克牌中的顺子</a></h4><p>难度简单 98<br>从扑克牌中随机抽 5 张牌，判断是不是一个顺子，即这 5 张牌是不是连续的。2 ～ 10 为数字本身，A 为 1，J 为 11，Q 为 12，K 为 13，而<strong>大、小王为 0 ，可以看成任意数字</strong>。A 不能视为 14。</p><p><strong>示例  1:</strong><br><strong>输入:</strong> [1,2,3,4,5]<br><strong>输出:</strong> True</p><p><strong>示例  2:</strong><br><strong>输入:</strong> [0,0,1,2,5]<br><strong>输出:</strong> True</p><p><strong>限制：</strong><br>数组长度为 5 <br>数组的数取值为 [0, 13] .</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isStraight</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> repeat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 跳过大小王</span>            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 最大牌</span>            min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 最小牌</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>repeat<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 若有重复，提前返回 false</span>            repeat<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加此牌至 Set</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> max <span class="token operator">-</span> min <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最大牌 - 最小牌 &lt; 5 则可构成顺子</span>            <span class="token comment" spellcheck="true">//&amp;&amp; max - min >=2; // max - min >=2  加不加 都可以</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：jyd</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/solution/mian-shi-ti-61-bu-ke-pai-zhong-de-shun-zi-ji-he-se/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>解析<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614647884425-934962e8-171f-4845-bfe3-227f84485184.png#align=left&display=inline&height=521&originHeight=1041&originWidth=1387&size=129521&status=done&style=none&width=694" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 21. 调整顺序使奇数位于偶数前面</title>
      <link href="/2021/03/02/xbgoeb/"/>
      <url>/2021/03/02/xbgoeb/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-21-调整数组顺序使奇数位于偶数前面"><a href="#剑指-Offer-21-调整数组顺序使奇数位于偶数前面" class="headerlink" title="剑指 Offer 21. 调整数组顺序使奇数位于偶数前面"></a><a href="https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/">剑指 Offer 21. 调整数组顺序使奇数位于偶数前面</a></h4><p>难度简单 84<br>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。</p><p><strong>示例：</strong><br><strong>输入：</strong>nums = [1,2,3,4]<br><strong>输出：</strong>[1,3,2,4] <br><strong>注：</strong>[3,1,2,4] 也是正确的答案之一。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">",j="</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">",j="</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：jyd</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/solution/mian-shi-ti-21-diao-zheng-shu-zu-shun-xu-shi-qi-4/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614646512170-796c005b-f257-4b95-8821-203d88ef8704.png#align=left&display=inline&height=519&originHeight=1038&originWidth=764&size=240712&status=done&style=none&width=382" alt="image.png"></p><hr><p><strong>好理解，浪费空间</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//奇数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                res<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                res<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：xmblgt链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>diao<span class="token operator">-</span>zheng<span class="token operator">-</span>shu<span class="token operator">-</span>zu<span class="token operator">-</span>shun<span class="token operator">-</span>xu<span class="token operator">-</span>shi<span class="token operator">-</span>qi<span class="token operator">-</span>shu<span class="token operator">-</span>wei<span class="token operator">-</span>yu<span class="token operator">-</span>ou<span class="token operator">-</span>shu<span class="token operator">-</span>qian<span class="token operator">-</span>mian<span class="token operator">-</span>lcof<span class="token operator">/</span>solution<span class="token operator">/</span>zhe<span class="token operator">-</span>dao<span class="token operator">-</span>ti<span class="token operator">-</span>you<span class="token operator">-</span>you<span class="token operator">-</span>rang<span class="token operator">-</span>wo<span class="token operator">-</span>xiang<span class="token operator">-</span>qi<span class="token operator">-</span>liao<span class="token operator">-</span>gczhong<span class="token operator">-</span>d<span class="token operator">/</span></code></pre><p><strong>解析</strong><br>只有遍历到的 nums[i]全为奇数时，p 和 i 保持相同大小，如果遇到偶数元素，那么 i 直接跳过继续 i++,而 p 则会停留在为偶数元素的位置上，这也是为什么要 nums[i]和 nums[p]互换，只有这样才能在一次遍历中把奇数元素位置的元素变为偶数。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>83. 删除排序链表中的重复元素</title>
      <link href="/2021/03/02/gh6fem/"/>
      <url>/2021/03/02/gh6fem/</url>
      
        <content type="html"><![CDATA[<h4 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83. 删除排序链表中的重复元素"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素</a></h4><p>难度简单 480<br>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。<br><strong>示例  1:</strong><br><strong>输入:</strong> 1-&gt;1-&gt;2<br><strong>输出:</strong> 1-&gt;2</p><p><strong>示例  2:</strong><br><strong>输入:</strong> 1-&gt;1-&gt;2-&gt;3-&gt;3<br><strong>输出:</strong> 1-&gt;2-&gt;3.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode &amp;#123; *     int val; *     ListNode next; *     ListNode() &amp;#123;&amp;#125; *     ListNode(int val) &amp;#123; this.val = val; &amp;#125; *     ListNode(int val, ListNode next) &amp;#123; this.val = val; this.next = next; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode current <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">==</span> current<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                current<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/solution/shan-chu-pai-xu-lian-biao-zhong-de-zhong-fu-yuan-s/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>125. 验证回文串</title>
      <link href="/2021/03/02/exdt9k/"/>
      <url>/2021/03/02/exdt9k/</url>
      
        <content type="html"><![CDATA[<h4 id="125-验证回文串"><a href="#125-验证回文串" class="headerlink" title="125. 验证回文串"></a><a href="https://leetcode-cn.com/problems/valid-palindrome/">125. 验证回文串</a></h4><p>难度简单<br>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。<br><strong>说明：</strong>本题中，我们将空字符串定义为有效的回文串。<br><strong>示例 1:</strong><br><strong>输入:</strong> “A man, a plan, a canal: Panama”<br><strong>输出:</strong> true</p><p><strong>示例 2:</strong><br><strong>输入:</strong> “race a car”<br><strong>输出:</strong> false</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StringBuffer sgood <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sgood<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        StringBuffer sgood_rev <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>sgood<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sgood<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sgood_rev<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/valid-palindrome/solution/yan-zheng-hui-wen-chuan-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StringBuffer sgood <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sgood<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> sgood<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>sgood<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>sgood<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">++</span>left<span class="token punctuation">;</span>            <span class="token operator">--</span>right<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/valid-palindrome/solution/yan-zheng-hui-wen-chuan-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span>Character<span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token operator">++</span>left<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span>Character<span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token operator">--</span>right<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">++</span>left<span class="token punctuation">;</span>                <span class="token operator">--</span>right<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这个left &lt; right去掉貌似可以，while里三处必须有.</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/valid-palindrome/solution/yan-zheng-hui-wen-chuan-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>977. 有序数组的平方</title>
      <link href="/2021/03/02/aelxwp/"/>
      <url>/2021/03/02/aelxwp/</url>
      
        <content type="html"><![CDATA[<h4 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a><a href="https://leetcode-cn.com/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></h4><p>难度简单 209<br>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong>组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>nums = [-4,-1,0,3,10]<br><strong>输出：</strong>[0,1,9,16,100]<br><strong>解释：</strong>平方后，数组变为 [16,1,0,9,100]<br>排序后，数组变为 [0,1,9,16,100]</p><p><strong>双指针</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">--</span>j<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">--</span>pos<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>squares<span class="token operator">-</span>of<span class="token operator">-</span>a<span class="token operator">-</span>sorted<span class="token operator">-</span>array<span class="token operator">/</span>solution<span class="token operator">/</span>you<span class="token operator">-</span>xu<span class="token operator">-</span>shu<span class="token operator">-</span>zu<span class="token operator">-</span>de<span class="token operator">-</span>ping<span class="token operator">-</span>fang<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><p><strong>平方再排序</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>squares<span class="token operator">-</span>of<span class="token operator">-</span>a<span class="token operator">-</span>sorted<span class="token operator">-</span>array<span class="token operator">/</span>solution<span class="token operator">/</span>you<span class="token operator">-</span>xu<span class="token operator">-</span>shu<span class="token operator">-</span>zu<span class="token operator">-</span>de<span class="token operator">-</span>ping<span class="token operator">-</span>fang<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>226. 翻转二叉树</title>
      <link href="/2021/03/01/uab3g7/"/>
      <url>/2021/03/01/uab3g7/</url>
      
        <content type="html"><![CDATA[<h4 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a><a href="https://leetcode-cn.com/problems/invert-binary-tree/">226. 翻转二叉树</a></h4><p>难度简单 774<br>翻转一棵二叉树。<br><strong>示例：</strong><br>输入：<br>     4<br>   /   <br>  2     7<br> / \   / <br>1   3 6   9<br>输出：<br>     4<br>   /   <br>  7     2<br> / \   / <br>9   6 3   1</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> TreeNode <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">hepler</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">hepler</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        TreeNode left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        TreeNode right<span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token function">hepler</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token function">hepler</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ok</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">hepler</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">hepler</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TreeNode left = root.left;</span>        <span class="token comment" spellcheck="true">// TreeNode right= root.right;</span>        <span class="token comment" spellcheck="true">// root.left=hepler(right);</span>        <span class="token comment" spellcheck="true">// root.right=hepler(left);</span>        TreeNode left <span class="token operator">=</span> <span class="token function">hepler</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode right<span class="token operator">=</span> <span class="token function">hepler</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> right<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right<span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>112. 路径总和</title>
      <link href="/2021/03/01/wlqpa7/"/>
      <url>/2021/03/01/wlqpa7/</url>
      
        <content type="html"><![CDATA[<h4 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a><a href="https://leetcode-cn.com/problems/path-sum/">112. 路径总和</a></h4><p>难度简单 523<br>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> ，判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。<br><strong>叶子节点</strong> 是指没有子节点的节点。</p><p><strong>示例 1：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/282505/1614610185505-5bb176b8-6f55-42e8-ba1e-db572e4d0a25.jpeg#align=left&display=inline&height=211&originHeight=421&originWidth=592&size=0&status=done&style=none&width=296"><br><strong>输入：</strong>root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22<br><strong>输出：</strong>true</p><p>广度优先</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queVal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queNode<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        queVal<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queNode<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            TreeNode now <span class="token operator">=</span> queNode<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> queVal<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> now<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> sum<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                queNode<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                queVal<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">+</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                queNode<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                queVal<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val <span class="token operator">+</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>path<span class="token operator">-</span>sum<span class="token operator">/</span>solution<span class="token operator">/</span>lu<span class="token operator">-</span>jing<span class="token operator">-</span>zong<span class="token operator">-</span>he<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><p>递归</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> sum <span class="token operator">==</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/path-sum/solution/lu-jing-zong-he-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>122. 买卖股票的最佳时机 II</title>
      <link href="/2021/03/01/mw2il2/"/>
      <url>/2021/03/01/mw2il2/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="122-买卖股票的最佳时机-II"><a href="#122-买卖股票的最佳时机-II" class="headerlink" title="122. 买卖股票的最佳时机 II"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/">122. 买卖股票的最佳时机 II</a></h4><p>难度简单1108<br>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。<br>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。<br><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong><br><strong>输入:</strong> [7,1,5,3,6,4]<br><strong>输出:</strong> 7<br><strong>解释:</strong> 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = <strong>4 **。<br>随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = **3</strong> 。</p><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>best<span class="token operator">-</span>time<span class="token operator">-</span>to<span class="token operator">-</span>buy<span class="token operator">-</span>and<span class="token operator">-</span>sell<span class="token operator">-</span>stock<span class="token operator">-</span>ii<span class="token operator">/</span>solution<span class="token operator">/</span>mai<span class="token operator">-</span>mai<span class="token operator">-</span>gu<span class="token operator">-</span>piao<span class="token operator">-</span>de<span class="token operator">-</span>zui<span class="token operator">-</span>jia<span class="token operator">-</span>shi<span class="token operator">-</span>ji<span class="token operator">-</span>ii<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>s<span class="token operator">/</span></code></pre><p>优化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> dp0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp1 <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> newDp0 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp0<span class="token punctuation">,</span> dp1 <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> newDp1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp1<span class="token punctuation">,</span> dp0 <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp0 <span class="token operator">=</span> newDp0<span class="token punctuation">;</span>            dp1 <span class="token operator">=</span> newDp1<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp0<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>best<span class="token operator">-</span>time<span class="token operator">-</span>to<span class="token operator">-</span>buy<span class="token operator">-</span>and<span class="token operator">-</span>sell<span class="token operator">-</span>stock<span class="token operator">-</span>ii<span class="token operator">/</span>solution<span class="token operator">/</span>mai<span class="token operator">-</span>mai<span class="token operator">-</span>gu<span class="token operator">-</span>piao<span class="token operator">-</span>de<span class="token operator">-</span>zui<span class="token operator">-</span>jia<span class="token operator">-</span>shi<span class="token operator">-</span>ji<span class="token operator">-</span>ii<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>s<span class="token operator">/</span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614609643345-b13ca537-3089-444f-bb92-ba8ef2cf8866.png#align=left&display=inline&height=373&originHeight=746&originWidth=1192&size=385299&status=done&style=none&width=596" alt="image.png"></p><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>best<span class="token operator">-</span>time<span class="token operator">-</span>to<span class="token operator">-</span>buy<span class="token operator">-</span>and<span class="token operator">-</span>sell<span class="token operator">-</span>stock<span class="token operator">-</span>ii<span class="token operator">/</span>solution<span class="token operator">/</span>mai<span class="token operator">-</span>mai<span class="token operator">-</span>gu<span class="token operator">-</span>piao<span class="token operator">-</span>de<span class="token operator">-</span>zui<span class="token operator">-</span>jia<span class="token operator">-</span>shi<span class="token operator">-</span>ji<span class="token operator">-</span>ii<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>s<span class="token operator">/</span></code></pre><p>解析</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614608654571-ce74b2c6-d38c-401f-8180-9e10e74e0e8a.png#align=left&display=inline&height=500&originHeight=1000&originWidth=1194&size=359106&status=done&style=none&width=597" alt="image.png"><br>优化易懂版</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> diff <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                res <span class="token operator">+=</span> diff<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：liweiwei1419链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>best<span class="token operator">-</span>time<span class="token operator">-</span>to<span class="token operator">-</span>buy<span class="token operator">-</span>and<span class="token operator">-</span>sell<span class="token operator">-</span>stock<span class="token operator">-</span>ii<span class="token operator">/</span>solution<span class="token operator">/</span>tan<span class="token operator">-</span>xin<span class="token operator">-</span>suan<span class="token operator">-</span>fa<span class="token operator">-</span>by<span class="token operator">-</span>liweiwei1419<span class="token operator">-</span><span class="token number">2</span><span class="token operator">/</span></code></pre><p><strong>解析</strong><br>贪心算法 在每一步总是做出在当前看来最好的选择。</p><p>「贪心算法」 和 「动态规划」、「回溯搜索」 算法一样，完成一件事情，是 分步决策 的；<br>「贪心算法」 在每一步总是做出在当前看来最好的选择，我是这样理解 「最好」 这两个字的意思：<br>「最好」 的意思往往根据题目而来，可能是 「最小」，也可能是 「最大」；<br>贪心算法和动态规划相比，它既不看前面（也就是说它不需要从前面的状态转移过来），也不看后面（无后效性，后面的选择不会对前面的选择有影响），因此贪心算法时间复杂度一般是线性的，空间复杂度是常数级别的；<br>这道题 「贪心」 的地方在于，对于 「今天的股价 - 昨天的股价」，得到的结果有 3 种可能：① 正数，<br>② 0，③ 负数。贪心算法的决策是： 只加正数 。</p><p>作者：liweiwei1419<br>链接：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>572. 另一个树的子树</title>
      <link href="/2021/03/01/hwkluw/"/>
      <url>/2021/03/01/hwkluw/</url>
      
        <content type="html"><![CDATA[<h4 id="572-另一个树的子树"><a href="#572-另一个树的子树" class="headerlink" title="572. 另一个树的子树"></a><a href="https://leetcode-cn.com/problems/subtree-of-another-tree/">572. 另一个树的子树</a></h4><p>难度简单 452<br>给定两个非空二叉树 <strong>s</strong> 和 <strong>t</strong>，检验 <strong>s</strong> 中是否包含和 <strong>t</strong> 具有相同结构和节点值的子树。<strong>s</strong> 的一个子树包括 <strong>s</strong> 的一个节点和这个节点的所有子孙。<strong>s</strong> 也可以看做它自身的一棵子树。<br><strong>示例 1:</strong><br>给定的树 s:<br>     3<br>    / <br>   4   5<br>  / <br> 1   2</p><p>给定的树 t：<br>   4 <br>  / <br> 1   2</p><p>返回 <strong>true</strong>，因为 t 与 s 的一个子树拥有相同的结构和节点值。<br><strong>示例 2:</strong><br>给定的树 s：<br>     3<br>    / <br>   4   5<br>  / <br> 1   2<br>    /<br>   0</p><p>给定的树 t：<br>   4<br>  / <br> 1   2</p><p>返回 <strong>false</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSubtree</span><span class="token punctuation">(</span>TreeNode s<span class="token punctuation">,</span> TreeNode t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode s<span class="token punctuation">,</span> TreeNode t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//题干:检验 s 中是否包含和 t 具有相同结构和节点值的子树。</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span>TreeNode s<span class="token punctuation">,</span> TreeNode t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> t <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>val <span class="token operator">!=</span> t<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/subtree-of-another-tree/solution/ling-yi-ge-shu-de-zi-shu-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 04. 二维数组中的查找</title>
      <link href="/2021/03/01/grfw90/"/>
      <url>/2021/03/01/grfw90/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-04-二维数组中的查找"><a href="#剑指-Offer-04-二维数组中的查找" class="headerlink" title="剑指 Offer 04. 二维数组中的查找"></a><a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">剑指 Offer 04. 二维数组中的查找</a></h4><p>难度中等 242<br>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p><strong>示例:</strong><br>现有矩阵 matrix 如下：<br>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]</p><p>给定 target = <code>5</code>，返回 <code>true</code>。<br>给定  target = <code>20</code>，返回 <code>false</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token operator">==</span>null<span class="token operator">||</span>matrix<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> row<span class="token operator">=</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//放在最前面 空指针</span>        <span class="token keyword">int</span> col<span class="token operator">=</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//for(int i=0;i&lt;row;)&amp;#123;</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>row<span class="token operator">&amp;&amp;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> cur <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">==</span>cur<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>             <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">&lt;</span>cur<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>                 j<span class="token operator">--</span><span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>             <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 i<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>分析</p><p><strong>线性查找</strong></p><p>由于给定的二维数组具备每行从左到右递增以及每列从上到下递增的特点，当访问到一个元素时，可以排除数组中的部分元素。</p><p><strong>从二维数组的右上角开始查找</strong>。如果当前元素等于目标值，则返回 true。如果当前元素大于目标值，则移到左边一列。如果当前元素小于目标值，则移到下边一行。</p><p><strong>可以证明这种方法不会错过目标值。</strong>如果当前元素大于目标值，说明当前元素的下边的所有元素都一定大于目标值，因此往下查找不可能找到目标值，往左查找可能找到目标值。如果当前元素小于目标值，说明当前元素的左边的所有元素都一定小于目标值，因此往左查找不可能找到目标值，往下查找可能找到目标值。</p><p>若数组为空，返回 false<br>初始化行下标为 0，列下标为二维数组的列数减 1<br>重复下列步骤，直到行下标或列下标超出边界<br>获得当前下标位置的元素 num<br>如果 num 和 target 相等，返回 true<br>如果 num 大于 target，列下标减 1<br>如果 num 小于 target，行下标加 1<br>循环体执行完毕仍未找到元素等于 target ，说明不存在这样的元素，返回 false`</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/solution/mian-shi-ti-04-er-wei-shu-zu-zhong-de-cha-zhao-b-3/">https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/solution/mian-shi-ti-04-er-wei-shu-zu-zhong-de-cha-zhao-b-3/</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 54. 二叉搜索树的第k大节点</title>
      <link href="/2021/03/01/nqvs4h/"/>
      <url>/2021/03/01/nqvs4h/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-54-二叉搜索树的第-k-大节点"><a href="#剑指-Offer-54-二叉搜索树的第-k-大节点" class="headerlink" title="剑指 Offer 54. 二叉搜索树的第 k 大节点"></a><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/">剑指 Offer 54. 二叉搜索树的第 k 大节点</a></h4><p>难度简单 122<br>给定一棵二叉搜索树，请找出其中第 k 大的节点。</p><p><strong>示例 1:</strong><br><strong>输入:</strong> root = [3,1,4,null,2], k = 1<br>   3<br>  / <br> 1   4<br>  <br>   2<br><strong>输出:</strong> 4<br><strong>示例 2:</strong><br><strong>输入:</strong> root = [5,3,6,2,4,null,null,1], k = 3<br>       5<br>      / <br>     3   6<br>    / <br>   2   4<br>  /<br> 1<br><strong>输出:</strong> 4 .</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthLargest</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>k <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：jyd</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/solution/mian-shi-ti-54-er-cha-sou-suo-shu-de-di-k-da-jie-d/</span></code></pre><p><strong>中序遍历倒序</strong></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>404. 左叶子之和</title>
      <link href="/2021/03/01/zxl9a8/"/>
      <url>/2021/03/01/zxl9a8/</url>
      
        <content type="html"><![CDATA[<h4 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404. 左叶子之和"></a><a href="https://leetcode-cn.com/problems/sum-of-left-leaves/">404. 左叶子之和</a></h4><p>难度简单 286<br>计算给定二叉树的所有左叶子之和。<br><strong>示例：</strong><br>    3<br>   / <br>  9  20<br>    /   <br>   15   7</p><p><strong>在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24.</strong></p><p>一个节点为「左叶子」节点，当且仅当它是某个节点的左子节点，并且它是一个叶子结点。因此我们可以考虑对整棵树进行遍历，当我们遍历到节点<br>node 时，如果它的左子节点是一个叶子结点，那么就将它的左子节点的值累加计入答案。</p><p>遍历整棵树的方法有深度优先搜索和广度优先搜索，下面分别给出了实现代码。</p><p><strong>深度优先搜索</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root <span class="token operator">!=</span> null <span class="token operator">?</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans <span class="token operator">+=</span> <span class="token function">isLeafNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">?</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isLeafNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLeafNode</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/sum-of-left-leaves/solution/zuo-xie-zi-zhi-he-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>广度优先遍历</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isLeafNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    ans <span class="token operator">+=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isLeafNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLeafNode</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/sum-of-left-leaves/solution/zuo-xie-zi-zhi-he-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>680. 验证回文字符串 Ⅱ</title>
      <link href="/2021/03/01/to9ylm/"/>
      <url>/2021/03/01/to9ylm/</url>
      
        <content type="html"><![CDATA[<h3 id="680-验证回文字符串-Ⅱ"><a href="#680-验证回文字符串-Ⅱ" class="headerlink" title="680. 验证回文字符串 Ⅱ"></a><a href="https://leetcode-cn.com/problems/valid-palindrome-ii/">680. 验证回文字符串 Ⅱ</a></h3><p>难度简单 324<br>给定一个非空字符串 <code>s</code>，<strong>最多</strong>删除一个字符。判断是否能成为回文字符串。<br><strong>示例 1:</strong><br><strong>输入:</strong> “aba”<br><strong>输出:</strong> True</p><p><strong>示例 2:</strong><br><strong>输入:</strong> “abca”<br><strong>输出:</strong> True<br><strong>解释:</strong> 你可以删除 c 字符。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>low<span class="token punctuation">)</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token operator">++</span>low<span class="token punctuation">;</span>                <span class="token operator">--</span>high<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">,</span> j <span class="token operator">=</span> high<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">!=</span> c2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/valid-palindrome-ii/solution/yan-zheng-hui-wen-zi-fu-chuan-ii-by-leetcode-solut/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><p>时间复杂度：O(n)，其中 n 是字符串的长度。判断整个字符串是否是回文字符串的时间复杂度是<br>O(n)，遇到不同字符时，判断两个子串是否是回文字符串的时间复杂度也都是 O(n)。<br>空间复杂度：O(1)。只需要维护有限的常量空间。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>257. 二叉树的所有路径</title>
      <link href="/2021/03/01/nra9hc/"/>
      <url>/2021/03/01/nra9hc/</url>
      
        <content type="html"><![CDATA[<h4 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257. 二叉树的所有路径"></a><a href="https://leetcode-cn.com/problems/binary-tree-paths/">257. 二叉树的所有路径</a></h4><p>难度简单 454<br>给定一个二叉树，返回所有从根节点到叶子节点的路径。<br><strong>说明:</strong> 叶子节点是指没有子节点的节点。<br><strong>示例:</strong><br><strong>输入:</strong></p><p>1<br> /   <br>2     3<br> <br>  5</p><p><strong>输出:</strong> [“1-&gt;2-&gt;5”, “1-&gt;3”]</p><p><strong>解释:</strong> 所有根节点到叶子节点的路径为: <strong>1-&gt;2-&gt;5, 1-&gt;3.</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">binaryTreePaths</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> paths <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> paths<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> nodeQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>String<span class="token operator">></span> pathQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        pathQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>nodeQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            TreeNode node <span class="token operator">=</span> nodeQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String path <span class="token operator">=</span> pathQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                paths<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pathQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pathQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> paths<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h4><p>思路与算法</p><p>最直观的方法是使用深度优先搜索。在深度优先搜索遍历二叉树时，我们需要考虑当前的节点以及它的孩子节点。</p><p>如果当前节点不是叶子节点，则在当前的路径末尾添加该节点，并继续递归遍历该节点的每一个孩子节点。<br>如果当前节点是叶子节点，则在当前路径末尾添加该节点后我们就得到了一条从根节点到叶子节点的路径，将该路径加入到答案即可。<br>如此，当遍历完整棵二叉树以后我们就得到了所有从根节点到叶子节点的路径。当然，深度优先搜索也可以使用非递归的方式实现，这里不再赘述。</p><hr><p>广度优先搜索</p><p>思路与算法</p><p>我们也可以用广度优先搜索来实现。我们维护一个队列，存储节点以及根到该节点的路径。一开始这个队列里只有根节点。在每一步迭代中，我们取出队列中的首节点，如果它是叶子节点，则将它对应的路径加入到答案中。如果它不是叶子节点，则将它的所有孩子节点加入到队列的末尾。当队列为空时广度优先搜索结束，我们即能得到答案。</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-paths/solution/er-cha-shu-de-suo-you-lu-jing-by-leetcode-solution/">https://leetcode-cn.com/problems/binary-tree-paths/solution/er-cha-shu-de-suo-you-lu-jing-by-leetcode-solution/</a></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">binaryTreePaths</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> paths <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">constructPaths</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> paths<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> paths<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">constructPaths</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> String path<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> paths<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            StringBuffer pathSB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            pathSB<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 当前节点是叶子节点</span>                paths<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pathSB<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 把路径加入到答案中</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                pathSB<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 当前节点不是叶子节点，继续递归遍历</span>                <span class="token function">constructPaths</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> pathSB<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> paths<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">constructPaths</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> pathSB<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> paths<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">//链接：https://leetcode-cn.com/problems/binary-tree-paths/solution/er-cha-shu-de-suo-you-lu-jing-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>67. 二进制求和</title>
      <link href="/2021/03/01/vuonz6/"/>
      <url>/2021/03/01/vuonz6/</url>
      
        <content type="html"><![CDATA[<h4 id="67-二进制求和"><a href="#67-二进制求和" class="headerlink" title="67. 二进制求和"></a><a href="https://leetcode-cn.com/problems/add-binary/">67. 二进制求和</a></h4><p>难度简单 568<br>给你两个二进制字符串，返回它们的和（用二进制表示）。<br>输入为 **非空  **字符串且只包含数字 <code>1</code> 和 <code>0</code>。</p><p><strong>示例  1:</strong><br><strong>输入:</strong> a = “11”, b = “1”<br><strong>输出:</strong> “100”<br><strong>示例  2:</strong><br><strong>输入:</strong> a = “1010”, b = “1011”<br><strong>输出:</strong> “10101”</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">addBinary</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span> String b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StringBuffer ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            carry <span class="token operator">+=</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            carry <span class="token operator">+=</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>carry <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"carry % 2 + '0'="</span><span class="token operator">+</span>carry <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(char)(carry % 2 + '0')="</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>carry <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carry <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"carry/=2 ="</span><span class="token operator">+</span> carry <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>carry <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ans<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">//链接：https://leetcode-cn.com/problems/add-binary/solution/er-jin-zhi-qiu-he-by-leetcode-solution/</span></code></pre><p><strong>stdout</strong><br>**<br><strong>ans.append((char) (carry % 2 + ‘0’));//‘0’</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614591690596-73e5687e-e9c7-43ec-b107-ebee8a49193e.png#align=left&display=inline&height=271&originHeight=542&originWidth=636&size=73816&status=done&style=none&width=318" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614591871762-cda3ddb8-8c2a-4b25-99c5-a4b8901c2dfe.png#align=left&display=inline&height=298&originHeight=706&originWidth=982&size=177020&status=done&style=none&width=414" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>108. 将有序数组转换为二叉搜索树</title>
      <link href="/2021/03/01/nlx76s/"/>
      <url>/2021/03/01/nlx76s/</url>
      
        <content type="html"><![CDATA[<h4 id="108-将有序数组转换为二叉搜索树"><a href="#108-将有序数组转换为二叉搜索树" class="headerlink" title="108. 将有序数组转换为二叉搜索树"></a><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/">108. 将有序数组转换为二叉搜索树</a></h4><p>难度简单 705<br>给你一个整数数组 <code>nums</code> ，其中元素已经按 <strong>升序</strong> 排列，请你将其转换为一棵 <strong>高度平衡</strong> 二叉搜索树。<br>**高度平衡  **二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。</p><p><strong>示例 1：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/282505/1614590284525-cad453c2-6ab7-4ea5-a4ab-37c10eecd0d3.jpeg#align=left&display=inline&height=111&originHeight=222&originWidth=302&size=0&status=done&style=none&width=151"><br><strong>输入：</strong>nums = [-10,-3,0,5,9]<strong>输出：</strong>[0,-3,9,-10,null,5]<br><strong>解释：</strong>[0,-10,5,null,-3,null,9] 也将被视为正确答案：<img src="https://cdn.nlark.com/yuque/0/2021/jpeg/282505/1614590284533-2094a708-7ca6-40d1-b45e-18e8fae142eb.jpeg#align=left&display=inline&height=111&originHeight=222&originWidth=302&size=0&status=done&style=none&width=151"><br>**<br><strong>示例 2：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/282505/1614590284695-7c9eb358-99b8-4fcc-a523-8ddf1e814441.jpeg#align=left&display=inline&height=71&originHeight=142&originWidth=342&size=0&status=done&style=none&width=171"><br><strong>输入：</strong>nums = [1,3]<br><strong>输出：</strong>[3,1]<br><strong>解释：</strong>[1,3] 和 [3,1] 都是高度平衡二叉搜索树。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">helper</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 总是选择中间位置左边的数字作为根节点</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/solution/jiang-you-xu-shu-zu-zhuan-huan-wei-er-cha-sou-s-33/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>191. 位1的个数</title>
      <link href="/2021/03/01/tvvpm8/"/>
      <url>/2021/03/01/tvvpm8/</url>
      
        <content type="html"><![CDATA[<h3 id="191-位-1-的个数"><a href="#191-位-1-的个数" class="headerlink" title="191. 位 1 的个数"></a><a href="https://leetcode-cn.com/problems/number-of-1-bits/">191. 位 1 的个数</a></h3><p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为<a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F">汉明重量</a>）。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// you need to treat n as an unsigned value</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bits <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                bits<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            mask <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bits<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作者：LeetCode</span><span class="token comment" spellcheck="true">//链接：https://leetcode-cn.com/problems/number-of-1-bits/solution/wei-1de-ge-shu-by-leetcode/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>复杂度分析</p><p>时间复杂度：O(1) 。运行时间依赖于数字 n 的位数。由于这题中 n 是一个 32 位数，所以运行时间是 O(1) 的。<br>空间复杂度：O(1)。没有使用额外空间。</p><hr><p>在二进制表示中，数字 n 中最低位的 1 总是对应 n−1 中的 0 。因此，将<br>n 和 n−1 与运算总是能把 n 中最低位的 1 变成 0 ，并保持其他位不变。<br>使用这个小技巧，代码变得非常简单。</p><p>Java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// you need to treat n as an unsigned value</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// public int hammingWeight(int n) &amp;#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>            n <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>作者：LeetCode<br>链接：<a href="https://leetcode-cn.com/problems/number-of-1-bits/solution/wei-1de-ge-shu-by-leetcode/">https://leetcode-cn.com/problems/number-of-1-bits/solution/wei-1de-ge-shu-by-leetcode/</a></p><p>二进制</p><table><thead><tr><th>N</th><th>N-1</th><th align="right">N&amp;(N-1)</th></tr></thead><tbody><tr><td>11</td><td>10</td><td align="right">10</td></tr><tr><td>10</td><td>1</td><td align="right">0</td></tr><tr><td></td><td></td><td align="right"></td></tr><tr><td>1100</td><td>1011</td><td align="right">1000</td></tr><tr><td>1000</td><td>111</td><td align="right">0</td></tr><tr><td></td><td></td><td align="right"></td></tr><tr><td>1011</td><td>1010</td><td align="right">1010</td></tr><tr><td>1010</td><td>1001</td><td align="right">1000</td></tr><tr><td>1000</td><td>111</td><td align="right">0</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1047. 删除字符串中的所有相邻重复项</title>
      <link href="/2021/03/01/gfg4i3/"/>
      <url>/2021/03/01/gfg4i3/</url>
      
        <content type="html"><![CDATA[<h4 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a><a href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/">1047. 删除字符串中的所有相邻重复项</a></h4><p>难度简单 122<br>给出由小写字母组成的字符串 <code>S</code>，<strong>重复项删除操作</strong>会选择两个相邻且相同的字母，并删除它们。<br>在 S 上反复执行重复项删除操作，直到无法继续删除。<br>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p><p><strong>示例：</strong><br><strong>输入：</strong>“abbaca”<br><strong>输出：</strong>“ca”<br><strong>解释：</strong><br>例如，在 “abbaca” 中，我们可以删除 “bb” 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们<strong>得到字符串 “aaca”，其中又只有 “aa” 可以执行重复项删除操作</strong>，所以最后的字符串为 “ca”。</p><pre class=" language-java"><code class="language-java">         HashSet<span class="token operator">&lt;</span>String<span class="token operator">></span> duplicates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            duplicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> prevLength <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>prevLength <span class="token operator">!=</span> S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            prevLength <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String d <span class="token operator">:</span> duplicates<span class="token punctuation">)</span> S <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> S<span class="token punctuation">;</span>作者：LeetCode链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>remove<span class="token operator">-</span>all<span class="token operator">-</span>adjacent<span class="token operator">-</span>duplicates<span class="token operator">-</span>in<span class="token operator">-</span>string<span class="token operator">/</span>solution<span class="token operator">/</span>shan<span class="token operator">-</span>chu<span class="token operator">-</span>zi<span class="token operator">-</span>fu<span class="token operator">-</span>chuan<span class="token operator">-</span>zhong<span class="token operator">-</span>de<span class="token operator">-</span>suo<span class="token operator">-</span>you<span class="token operator">-</span>xiang<span class="token operator">-</span>lin<span class="token operator">-</span>zh<span class="token operator">/</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>String S<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sbLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> character <span class="token operator">:</span> S<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sbLength <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> character <span class="token operator">==</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sbLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sbLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sbLength<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span><span class="token punctuation">;</span>                sbLength<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/solution/shan-chu-zi-fu-chuan-zhong-de-suo-you-xiang-lin-zh/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>解析</strong></p><p>我们可以用<strong>栈</strong>来维护没有重复项的字母序列：</p><ul><li><p>若当前的字母和栈顶的字母相同，则弹出栈顶的字母；</p></li><li><p>若当前的字母和栈顶的字母不同，则放入当前的字母。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 05. 替换空格</title>
      <link href="/2021/03/01/moip09/"/>
      <url>/2021/03/01/moip09/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></h4><p>难度简单 76<br>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>s = “We are happy.”<br><strong>输出：</strong>“We%20are%20happy.”</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">replaceSpace</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>length <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最大3倍</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'%'</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        String newStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newStr<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/solution/mian-shi-ti-05-ti-huan-kong-ge-by-leetcode-solutio/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>26. 删除排序数组中的重复项</title>
      <link href="/2021/03/01/sq87px/"/>
      <url>/2021/03/01/sq87px/</url>
      
        <content type="html"><![CDATA[<h4 id="26-删除排序数组中的重复项"><a href="#26-删除排序数组中的重复项" class="headerlink" title="26. 删除排序数组中的重复项"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">26. 删除排序数组中的重复项</a></h4><p>难度简单 1860<br>给定一个排序数组，你需要在**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">  原地</a>** 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须在 **<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地  </a>修改输入数组  **并在使用 O(1) 额外空间的条件下完成。</p><p><strong>示例  1:</strong><br>给定数组 <em>nums</em> = <strong>[1,1,2]</strong>,</p><p>函数应该返回新的长度 <strong>2</strong>, 并且原数组 <em>nums *的前两个元素被修改为 *</em><code>1</code>**, **<code>2</code>**。</p><p>你不需要考虑数组中超出新长度后面的元素。<br><strong>示例  2:</strong><br>给定* nums *= <strong>[0,0,1,1,1,2,2,3,3,4]</strong>,</p><p>函数应该返回新的长度 <strong>5</strong>, 并且原数组 <em>nums *的前五个元素被修改为 *</em><code>0</code><strong>, **<code>1</code></strong>, <strong><code>2</code></strong>, <strong><code>3</code></strong>, **<code>4</code>**。</p><p>你不需要考虑数组中超出新长度后面的元素。</p><p><strong>说明:</strong><br>为什么返回数值是整数，但输出的答案是数组呢?<br>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。<br>你可以想象内部操作如下:<br>// <strong>nums</strong> 是以“引用”方式传递的。也就是说，不对实参做任何拷贝<br>int len = removeDuplicates(nums);</p><p>// 在函数里修改输入数组对于调用者是可见的。<br>// 根据你的函数返回的长度, 它会打印出数组中<strong>该长度范围内</strong>的所有元素。<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p><hr><p><strong>双指针法</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/solution/shan-chu-pai-xu-shu-zu-zhong-de-zhong-fu-xiang-by-/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题 01.06. 字符串压缩</title>
      <link href="/2021/03/01/lmzy6a/"/>
      <url>/2021/03/01/lmzy6a/</url>
      
        <content type="html"><![CDATA[<h3 id="面试题-01-06-字符串压缩"><a href="#面试题-01-06-字符串压缩" class="headerlink" title="面试题 01.06. 字符串压缩"></a><a href="https://leetcode-cn.com/problems/compress-string-lcci/">面试题 01.06. 字符串压缩</a></h3><p>字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串 aabcccccaaa 会变为 a2b1c5a3。<strong>若“压缩”后的字符串没有变短，则返回原先的字符串</strong>。你可以假设字符串中只包含大小写英文字母（a 至 z）。</p><p>示例 1:</p><p>输入：”aabcccccaaa”<br>输出：”a2b1c5a3”<br>示例 2:</p><p>输入：”abbccd”<br>输出：”abbccd”<br>解释：”abbccd”压缩后为”a1b2c2d1”，比原字符串长度更长。<br><strong>直接统计</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">compressString</span><span class="token punctuation">(</span>String S<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 空串处理</span>            <span class="token keyword">return</span> S<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        StringBuffer ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span>  cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> S<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>                ch <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后一个还没添加呢</span>        ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> S <span class="token operator">:</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/compress-string-lcci/solution/zi-fu-chuan-ya-suo-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><p><strong>双指针法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">compressString</span><span class="token punctuation">(</span>String S<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> N <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> N <span class="token operator">&amp;&amp;</span> S<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> S<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一次i=0，j=0也会执行</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>j <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        String res <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> S<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：nettee</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/compress-string-lcci/solution/shuang-zhi-zhen-fa-qu-lian-xu-zi-fu-cpython-by-net/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 28. 对称的二叉树</title>
      <link href="/2021/03/01/uvklhu/"/>
      <url>/2021/03/01/uvklhu/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-28-对称的二叉树"><a href="#剑指-Offer-28-对称的二叉树" class="headerlink" title="剑指 Offer 28. 对称的二叉树"></a><a href="https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/">剑指 Offer 28. 对称的二叉树</a></h4><p>难度简单 134<br>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。<br>例如，二叉树  [1,2,2,3,4,4,3] 是对称的。<br><code>     1    /   \   2     2  / \   / \ 3   4 4   3</code><br>但是下面这个  [1,2,2,null,3,null,3] 则不是镜像对称的:<br><code>    1    /  \   2    2    \    \     3    3</code></p><p><strong>示例 1：</strong><br><strong>输入：</strong>root = [1,2,2,3,4,4,3]<br><strong>输出：</strong>true</p><p><strong>示例 2：</strong><br><strong>输入：</strong>root = [1,2,2,null,3,null,3]<br><strong>输出：</strong>false</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//helper(root.left,root.right); //都可以</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">helper</span><span class="token punctuation">(</span>TreeNode left<span class="token punctuation">,</span>TreeNode right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>null<span class="token operator">&amp;&amp;</span>right<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>val<span class="token operator">==</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">helper</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>left<span class="token punctuation">,</span>right<span class="token punctuation">.</span>right<span class="token punctuation">)</span>               <span class="token operator">&amp;</span><span class="token function">helper</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>right<span class="token punctuation">,</span>right<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>等价版</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">recur</span><span class="token punctuation">(</span>TreeNode L<span class="token punctuation">,</span> TreeNode R<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> R <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> null <span class="token operator">||</span> R <span class="token operator">==</span> null <span class="token operator">||</span> L<span class="token punctuation">.</span>val <span class="token operator">!=</span> R<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>left<span class="token punctuation">,</span> R<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">recur</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>right<span class="token punctuation">,</span> R<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：jyd链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>dui<span class="token operator">-</span>cheng<span class="token operator">-</span>de<span class="token operator">-</span>er<span class="token operator">-</span>cha<span class="token operator">-</span>shu<span class="token operator">-</span>lcof<span class="token operator">/</span>solution<span class="token operator">/</span>mian<span class="token operator">-</span>shi<span class="token operator">-</span>ti<span class="token operator">-</span><span class="token number">28</span><span class="token operator">-</span>dui<span class="token operator">-</span>cheng<span class="token operator">-</span>de<span class="token operator">-</span>er<span class="token operator">-</span>cha<span class="token operator">-</span>shu<span class="token operator">-</span>di<span class="token operator">-</span>gui<span class="token operator">-</span>qing<span class="token operator">/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>202. 快乐数</title>
      <link href="/2021/03/01/nlr364/"/>
      <url>/2021/03/01/nlr364/</url>
      
        <content type="html"><![CDATA[<h4 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a><a href="https://leetcode-cn.com/problems/happy-number/">202. 快乐数</a></h4><p>难度简单 541<br>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。<br>「快乐数」定义为：</p><ul><li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li><li>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。</li><li>如果 <strong>可以变为</strong>  1，那么这个数就是快乐数。</li></ul><p>如果 <code>n</code> 是快乐数就返回 <code>true</code> ；不是，则返回 <code>false</code> 。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>19<br><strong>输出：</strong>true<br><strong>解释：</strong><br>1 + 9 = 82<br>8 + 2 = 68<br>6 + 8 = 100<br>1 + 0 + 0 = 1。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> totalSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> d <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            totalSum <span class="token operator">+=</span> d <span class="token operator">*</span> d<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> totalSum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> seen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>seen<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            seen<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/happy-number/solution/kuai-le-shu-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>用哈希集合检测循环</p><p>我们可以先举几个例子。我们从 7 开始。则下一个数字是 49（因为 7<em>7 =49），然后下一个数字是 97（因为 4</em>4+9*9=97）。我们可以不断重复该的过程，直到我们得到 1。因为我们得到了 7 是一个快乐数，函数应该返回 true。</p><p>再举一个例子，让我们从 116 开始。通过反复通过平方和计算下一个数字，我们最终得到 58，再继续计算之后，我们又回到 58。由于我们回到了一个已经计算过的数字，可以知道有一个循环，因此不可能达到 1。所以对于 116，函数应该返回 false。</p><p>根据我们的探索，我们猜测会有<strong>以下三种可能。</strong></p><p>最终会得到 1 最终会进入循环。<br>值会越来越大，最后接近无穷大。<br>第三个情况比较难以检测和处理。我们怎么知道它会继续变大，而不是最终得到<br>1 呢？我们可以仔细想一想，每一位数的最大数字的下一位数是多少。</p><p>Digits Largest                 Next<br>1         9                         81<br>2         99                         162<br>3         999                         243<br>4         9999                  324<br>13         9999999999999 1053<br>对于</p><p>3 位数的数字，它不可能大于 243。这意味着它要么被困在 243 以下的循环内，要么跌到 1。<br>4 位或 4 位以上的数字在每一步都会丢失一位，直到降到 3 位为止。所以我们知道，最坏的情况下，算法可能会在 243 以下的所有数字上循环，然后回到它已经到过的一个循环或者回到 1。但它不会无限期地进行下去，所以我们排除第三种选择。</p><p>即使在代码中你不需要处理第三种情况，你仍然需要理解为什么它永远不会发生，这样你就可以证明为什么你不处理它。</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/happy-number/solution/kuai-le-shu-by-leetcode-solution/">https://leetcode-cn.com/problems/happy-number/solution/kuai-le-shu-by-leetcode-solution/</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 62. 圆圈中最后剩下的数字</title>
      <link href="/2021/03/01/un5n1b/"/>
      <url>/2021/03/01/un5n1b/</url>
      
        <content type="html"><![CDATA[<h3 id="剑指-Offer-62-圆圈中最后剩下的数字"><a href="#剑指-Offer-62-圆圈中最后剩下的数字" class="headerlink" title="剑指 Offer 62. 圆圈中最后剩下的数字"></a><a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/">剑指 Offer 62. 圆圈中最后剩下的数字</a></h3><p>难度简单 300<br>0,1,···,n-1 这 n 个数字排成一个圆圈，从数字 0 开始，每次从这个圆圈里删除第 m 个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。<br>例如，0、1、2、3、4 这 5 个数字组成一个圆圈，从数字 0 开始每次删除第 3 个数字，则删除的前 4 个数字依次是 2、0、4、1，因此最后剩下的数字是 3。</p><p><strong>示例 1：</strong><br><strong>输入:</strong> n = 5, m = 3<br>**输出: **3</p><p><strong>示例 2：</strong><br><strong>输入:</strong> n = 10, m = 17<br>**输出: **2</p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastRemaining1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            idx <span class="token operator">=</span> <span class="token punctuation">(</span>idx <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>            n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：sweetieeyi</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/javajie-jue-yue-se-fu-huan-wen-ti-gao-su-ni-wei-sh/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>假设当前删除的位置是 idx，下一个删除的数字的位置是 idx+m 。但是，由于把当前位置的数字删除了，后面的数字会前移一位，所以实际的下一个位置是 idx+m−1。由于数到末尾会从头继续数，所以最后取模一下，就是<br>(idx+m−1)(mod n)。</p><p>作者：sweetieeyi<br>链接：<a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/javajie-jue-yue-se-fu-huan-wen-ti-gao-su-ni-wei-sh/">https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/javajie-jue-yue-se-fu-huan-wen-ti-gao-su-ni-wei-sh/</a></p><hr><p><strong>动态规划</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastRemaining1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最后一轮剩下2个人，所以从2开始反推</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastRemaining</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最后一轮剩下2个人，所以从2开始反推</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>动态规划解析：</p><p>状态定义： 设「i,m 问题」的解为 dp[i] ；<br>状态转移方程： 通过以下公式可从 dp[i−1] 递推得到 dp[i] ；dp[i]=(dp[i−1]+m)%i；</p><p>初始状态：「1,m 问题」的解恒为 0 ，即 dp[1]=0 ；<br>返回值： 返回「n,m 问题」的解 dp[n] ；</p><p>作者：jyd<br>链接：<a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/jian-zhi-offer-62-yuan-quan-zhong-zui-ho-dcow/">https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/jian-zhi-offer-62-yuan-quan-zhong-zui-ho-dcow/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><hr><p><strong>动态规划优化版</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastRemaining</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最后一轮剩下2个人，所以从2开始反推</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：sweetieeyi</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/javajie-jue-yue-se-fu-huan-wen-ti-gao-su-ni-wei-sh/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>405. 数字转换为十六进制数</title>
      <link href="/2021/03/01/myb5o0/"/>
      <url>/2021/03/01/myb5o0/</url>
      
        <content type="html"><![CDATA[<h3 id="405-数字转换为十六进制数"><a href="#405-数字转换为十六进制数" class="headerlink" title="405. 数字转换为十六进制数"></a><a href="https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal/">405. 数字转换为十六进制数</a></h3><p>给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用 <a href="https://baike.baidu.com/item/%E8%A1%A5%E7%A0%81/6854613?fr=aladdin">补码运算</a> 方法。<br>注意:</p><ol><li>十六进制中所有字母(<code>a-f</code>)都必须是小写。</li><li>十六进制字符串中不能包含多余的前导零。如果要转化的数为 0，那么以单个字符<code>&#39;0&#39;</code>来表示；对于其他情况，十六进制字符串中的第一个字符将不会是 0 字符。</li><li>给定的数确保在 32 位有符号整数范围内。</li><li><strong>不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法。</strong></li></ol><p><strong>示例 1：</strong><br>输入:<br>26</p><p>输出:<br>“1a”</p><p><strong>示例 2：</strong><br>输入:<br>-1</p><p>输出:<br>“ffffffff”//8 位</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 0特殊处理</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hex <span class="token operator">=</span> <span class="token string">"0123456789abcdef"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 相当于映射关系</span>        StringBuilder ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-1="</span><span class="token operator">+</span>Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> num <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 取低4位的十进制值</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"temp="</span><span class="token operator">+</span>Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>hex<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 映射对应字符</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hex[temp]="</span><span class="token operator">+</span>hex<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num <span class="token operator">>>>=</span> <span class="token number">4</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 逻辑右移4位</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num >>>= 4="</span><span class="token operator">+</span>Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// while的循环条件保证了不会出现前导0</span>        <span class="token comment" spellcheck="true">// 但是从低位开始转换多了一步reverse反转</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：zui-weng-jiu-xian</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal/solution/shu-zi-zhuan-huan-wei-shi-liu-jin-zhi-jie-fa-shou-/</span></code></pre><hr><p><strong>解题思路</strong></p><p>2 进制转化 16 进制，也就是每 4 位合成一位。<br>于是，我们可以从低位存储到高位，每次移位操作 4 位，转化为对应字符，这里采用制表。<br>当 num 为 0 时，停止移位操作，于是高位 0 项被放弃。<br>最后只要把字符串反转即可。<br>这里我们用 StringBuffer，可以更加快速。因为 String 加操作会不停创建对象。</p><p>作者：datedemo<br>链接：<a href="https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal/solution/yi-wei-cao-zuo-jian-dan-yi-dong-by-datedemo/">https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal/solution/yi-wei-cao-zuo-jian-dan-yi-dong-by-datedemo/</a></p><hr><h4 id="1"><a href="#1" class="headerlink" title="-1"></a>-1</h4><p>-1=11111111111111111111111111111111<br>-1=1111,1111,1111,1111,1111,1111,1111,1111<br>temp=1111<br>hex[temp]=f<br>num &gt;&gt;&gt;= 4=1111111111111111111111111111 //1111,1111,1111,1111,1111,1111,1111<br>temp=1111<br>hex[temp]=f<br>num &gt;&gt;&gt;= 4=111111111111111111111111<br>temp=1111<br>hex[temp]=f<br>num &gt;&gt;&gt;= 4=11111111111111111111<br>temp=1111<br>hex[temp]=f<br>num &gt;&gt;&gt;= 4=1111111111111111<br>temp=1111<br>hex[temp]=f<br>num &gt;&gt;&gt;= 4=111111111111<br>temp=1111<br>hex[temp]=f<br>num &gt;&gt;&gt;= 4=11111111<br>temp=1111<br>hex[temp]=f<br>num &gt;&gt;&gt;= 4=1111<br>temp=1111<br>hex[temp]=f<br>num &gt;&gt;&gt;= 4=0</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>9. 回文数</title>
      <link href="/2021/03/01/ycob11/"/>
      <url>/2021/03/01/ycob11/</url>
      
        <content type="html"><![CDATA[<h4 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9. 回文数"></a><a href="https://leetcode-cn.com/problems/palindrome-number/">9. 回文数</a></h4><p>难度简单 1405<br>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。<br>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，<code>121</code> 是回文，而 <code>123</code> 不是。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>x = 121<br><strong>输出：</strong>true</p><p><strong>示例  2：</strong><br><strong>输入：</strong>x = -121<br><strong>输出：</strong>false<br><strong>解释：</strong>从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 特殊情况：</span>        <span class="token comment" spellcheck="true">// 如上所述，当 x &lt; 0 时，x 不是回文数。</span>        <span class="token comment" spellcheck="true">// 同样地，如果数字的最后一位是 0，为了使该数字为回文，</span>        <span class="token comment" spellcheck="true">// 则其第一位数字也应该是 0</span>        <span class="token comment" spellcheck="true">// 只有 0 满足这一属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> revertedNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">></span> revertedNumber<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            revertedNumber <span class="token operator">=</span> revertedNumber <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。</span>        <span class="token comment" spellcheck="true">// 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，</span>        <span class="token comment" spellcheck="true">// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。</span>        <span class="token keyword">return</span> x <span class="token operator">==</span> revertedNumber <span class="token operator">||</span> x <span class="token operator">==</span> revertedNumber <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>palindrome<span class="token operator">-</span>number<span class="token operator">/</span>solution<span class="token operator">/</span>hui<span class="token operator">-</span>wen<span class="token operator">-</span>shu<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>awesome-java-leetcode[转载]</title>
      <link href="/2021/02/28/iuopng/"/>
      <url>/2021/02/28/iuopng/</url>
      
        <content type="html"><![CDATA[<pre><code>1,10,13,15,17,20,23,25,26,28,33,38,43,44,49,50,56,57,67,68,69,71,75,7678,79,80,85,88,90,91,98,102,117,121,125,127,128,133,139,146,157,158,161168,173,200,206,208,209,210,211,215,218,221,234,235,236,238,252,253,257261,265,269,273,274,275,277,278,282,283,285,286,297,301,311,314,325,334341,377,380,398,404,410,461,477,494,523,525,534,535,543,554</code></pre><p>如果想知道更多公司 LeetCode 面试题，可以参看 <a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/Companies.md">Companies.md</a>。<br>附上镇楼诗：</p><blockquote><p>明有科举八股，今有 LeetCode。<br>八股定格式而取文采心意，LeetCode 定题目且重答案背诵。<br>美其名曰：”practice makes perfect.”<br>为何今不如古？<br>非也非也，<br>科举为国取士，LeetCode 为 Google 筛码工，各取所需也。</p></blockquote><h2 id="Easy"><a href="#Easy" class="headerlink" title="Easy"></a>Easy</h2><table><thead><tr><th>#</th><th>Title</th><th>Tag</th></tr></thead><tbody><tr><td>1</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0001/README.md">Two Sum</a></td><td>Array, Hash Table</td></tr><tr><td>7</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0007/README.md">Reverse Integer</a></td><td>Math</td></tr><tr><td>9</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0009/README.md">Palindrome Number</a></td><td>Math</td></tr><tr><td>13</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0013/README.md">Roman to Integer</a></td><td>Math, String</td></tr><tr><td>14</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0014/README.md">Longest Common Prefix</a></td><td>String</td></tr><tr><td>16.11</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/16_11/README.md">跳水板(Diving Board LCCI)</a></td><td>递归、记忆化</td></tr><tr><td>20</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0020/README.md">Valid Parentheses</a></td><td>Stack, String</td></tr><tr><td>21</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0021/README.md">Merge Two Sorted Lists</a></td><td>Linked List</td></tr><tr><td>26</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0026/README.md">Remove Duplicates from Sorted Array</a></td><td>Array, Two Pointers</td></tr><tr><td>27</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0027/README.md">Remove Element</a></td><td>Array, Two Pointers</td></tr><tr><td>28</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0028/README.md">Implement strStr()</a></td><td>Two Pointers, String</td></tr><tr><td>35</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0035/README.md">Search Insert Position</a></td><td>String</td></tr><tr><td>38</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0038/README.md">Count and Say</a></td><td>String</td></tr><tr><td>53</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0053/README.md">Maximum Subarray</a></td><td>Array, Divide and Conquer, Dynamic Programming</td></tr><tr><td>58</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0058/README.md">Length of Last Word</a></td><td>String</td></tr><tr><td>66</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0066/README.md">Plus One</a></td><td>Array, Math</td></tr><tr><td>67</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0067/README.md">Add Binary</a></td><td>Math, String</td></tr><tr><td>69</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0069/README.md">Sqrt(x)</a></td><td>Binary Search, Math</td></tr><tr><td>70</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0070/README.md">Climbing Stairs</a></td><td>Dynamic Programming</td></tr><tr><td>83</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0083/README.md">Remove Duplicates from Sorted List</a></td><td>Linked List</td></tr><tr><td>88</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0088/README.md">Merge Sorted Array</a></td><td>Array, Two Pointers</td></tr><tr><td>100</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0100/README.md">Same Tree</a></td><td>Tree, Depth-first Search</td></tr><tr><td>101</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0101/README.md">Symmetric Tree</a></td><td>Tree, Depth-first Search, Breadth-first Search</td></tr><tr><td>104</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0104/README.md">Maximum Depth of Binary Tree</a></td><td>Tree, Depth-first Search</td></tr><tr><td>107</td><td>[Binary Tree Level Order Traversal II][107]</td><td>Tree, Breadth-first Search</td></tr><tr><td>108</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0108/README.md">Convert Sorted Array to Binary Search Tree</a></td><td>Tree, Depth-first Search</td></tr><tr><td>110</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0110/README.md">Balanced Binary Tree</a></td><td>Tree, Depth-first Search</td></tr><tr><td>111</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0111/README.md">Minimum Depth of Binary Tree</a></td><td>Tree, Depth-first Search, Breadth-first Search</td></tr><tr><td>112</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0112/README.md">Path Sum</a></td><td>Tree, Depth-first Search</td></tr><tr><td>118</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0118/README.md">Pascal’s Triangle</a></td><td>Array</td></tr><tr><td>119</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0119/README.md">Pascal’s Triangle II</a></td><td>Array</td></tr><tr><td>121</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0121/README.md">Best Time to Buy and Sell Stock</a></td><td>Array, Dynamic Programmin</td></tr><tr><td>122</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0122/README.md">Best Time to Buy and Sell Stock II</a></td><td>Array, Greedy</td></tr><tr><td>543</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0543/README.md">Diameter of Binary Tree</a></td><td>Tree</td></tr></tbody></table><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><table><thead><tr><th>#</th><th>Title</th><th>Tag</th></tr></thead><tbody><tr><td>2</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0002/README.md">Add Two Numbers</a></td><td>Linked List, Math</td></tr><tr><td>3</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0003/README.md">Longest Substring Without Repeating Characters</a></td><td>Hash Table, Two Pointers, String</td></tr><tr><td>5</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0005/README.md">Longest Palindromic Substring</a></td><td>String, Dynamic Programming</td></tr><tr><td>6</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0006/README.md">ZigZag Conversion</a></td><td>String</td></tr><tr><td>8</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0008/README.md">String to Integer (atoi)</a></td><td>Math, String</td></tr><tr><td>11</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0011/README.md">Container With Most Water</a></td><td>Array, Two Pointers</td></tr><tr><td>12</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0012/README.md">Integer to Roman</a></td><td>Math, String</td></tr><tr><td>15</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0015/README.md">3Sum</a></td><td>Array, Two Pointers</td></tr><tr><td>15</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0016/README.md">3Sum Closest</a></td><td>Array, Two Pointers</td></tr><tr><td>17</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0017/README.md">Letter Combinations of a Phone Number</a></td><td>String, Backtracking</td></tr><tr><td>18</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0018/README.md">4Sum</a></td><td>Array, Hash Table, Two Pointers</td></tr><tr><td>19</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0019/README.md">Remove Nth Node From End of List</a></td><td>Linked List, Two Pointers</td></tr><tr><td>22</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0022/README.md">Generate Parentheses</a></td><td>String, Backtracking</td></tr><tr><td>24</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0024/README.md">Swap Nodes in Pairs</a></td><td>Linked List</td></tr><tr><td>29</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0029/README.md">Divide Two Integers</a></td><td>Math, Binary Search</td></tr><tr><td>33</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0033/README.md">Search in Rotated Sorted Array</a></td><td>Arrays, Binary Search</td></tr><tr><td>43</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0043/README.md">Multiply Strings</a></td><td>Math, String</td></tr><tr><td>49</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0049/README.md">Group Anagrams</a></td><td>Hash Table, String</td></tr><tr><td>50</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0050/README.md">Pow(x, n)</a></td><td>Math, Binary Search</td></tr><tr><td>56</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0056/README.md">Merge Intervals</a></td><td>Array, Sort</td></tr><tr><td>63</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0063/README.md">不同路径 II(Unique Paths II)</a></td><td>数组、动态规划</td></tr><tr><td>209</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0209/README.md">长度最小的子数组(Minimum Size Subarray Sum)</a></td><td>数组、双指针、二分查找</td></tr><tr><td>215</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0215/README.md">数组中的第 K 个最大元素(Kth Largest Element in an Array)</a></td><td>堆、分治算法</td></tr><tr><td>554</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0554/README.md">Brick Wall</a></td><td>Hash Table</td></tr><tr><td>1014</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/1014/README.md">最佳观光组合(Best Sightseeing Pair)</a></td><td>数组</td></tr></tbody></table><h2 id="Hard"><a href="#Hard" class="headerlink" title="Hard"></a>Hard</h2><table><thead><tr><th>#</th><th>Title</th><th>Tag</th></tr></thead><tbody><tr><td>4</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0004/README.md">Median of Two Sorted Arrays</a></td><td>Array, Binary Search, Divide and Conquer</td></tr><tr><td>10</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0010/README.md">Regular Expression Matching</a></td><td>String, Dynamic Programming, Backtracking</td></tr><tr><td>23</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0023/README.md">Merge k Sorted Lists</a></td><td>Linked List, Divide and Conquer, Heap</td></tr><tr><td>25</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0025/README.md">Reverse Nodes in k-Group</a></td><td>Linked List</td></tr><tr><td>30</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0030/README.md">Substring with Concatenation of All Words</a></td><td>Hash Table, Two Pointers, String</td></tr><tr><td>44</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0044/README.md">Wildcard Matching</a></td><td>String, Dynamic Programming, Backtracking, Greedy</td></tr><tr><td>57</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0057/README.md">Insert Interval</a></td><td>Array, Sort</td></tr><tr><td>68</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0068/README.md">Text Justification</a></td><td>String</td></tr><tr><td>1028</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/1028/README.md">从先序遍历还原二叉树(Recover a Tree From Preorder Traversal)</a></td><td>树、深度优先搜索</td></tr></tbody></table><p>打个小广告<br>欢迎加入我的小专栏「**<a href="https://xiaozhuanlan.com/Blankj">基你太美</a>**」一起学习。</p><p>##</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>572. 另一个树的子树</title>
      <link href="/2021/02/28/usaos8/"/>
      <url>/2021/02/28/usaos8/</url>
      
        <content type="html"><![CDATA[<h4 id="572-另一个树的子树"><a href="#572-另一个树的子树" class="headerlink" title="572. 另一个树的子树"></a><a href="https://leetcode-cn.com/problems/subtree-of-another-tree/">572. 另一个树的子树</a></h4><p>难度简单 451<br>给定两个非空二叉树 <strong>s</strong> 和 <strong>t</strong>，检验 <strong>s</strong> 中是否包含和 <strong>t</strong> 具有相同结构和节点值的子树。<strong>s</strong> 的一个子树包括 <strong>s</strong> 的一个节点和这个节点的所有子孙。<strong>s</strong> 也可以看做它自身的一棵子树。<br><strong>示例 1:</strong><br>给定的树 s:<br>     3<br>    / <br>   4   5<br>  / <br> 1   2</p><p>给定的树 t：<br>   4 <br>  / <br> 1   2</p><p>返回 <strong>true</strong>，因为 t 与 s 的一个子树拥有相同的结构和节点值。<br><strong>示例 2:</strong><br>给定的树 s：<br>     3<br>    / <br>   4   5<br>  / <br> 1   2<br>    /<br>   0</p><p>给定的树 t：<br>   4<br>  / <br> 1   2</p><p>返回 <strong>false</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSubtree</span><span class="token punctuation">(</span>TreeNode s<span class="token punctuation">,</span> TreeNode t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode s<span class="token punctuation">,</span> TreeNode t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//题干:检验 s 中是否包含和 t 具有相同结构和节点值的子树。</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span>TreeNode s<span class="token punctuation">,</span> TreeNode t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> t <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>val <span class="token operator">!=</span> t<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/subtree-of-another-tree/solution/ling-yi-ge-shu-de-zi-shu-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1299. 将每个元素替换为右侧最大元素</title>
      <link href="/2021/02/28/mewsci/"/>
      <url>/2021/02/28/mewsci/</url>
      
        <content type="html"><![CDATA[<h4 id="1299-将每个元素替换为右侧最大元素"><a href="#1299-将每个元素替换为右侧最大元素" class="headerlink" title="1299. 将每个元素替换为右侧最大元素"></a><a href="https://leetcode-cn.com/problems/replace-elements-with-greatest-element-on-right-side/">1299. 将每个元素替换为右侧最大元素</a></h4><p>给你一个数组  arr ，请你将每个元素用它右边最大的元素替换，如果是最后一个元素，用  -1 替换。<br>完成所有替换操作后，请你返回这个数组。<br>示例 1：<br>输入：arr = [17,18,5,4,6,1]<br>输出：[18,6,6,6,1,-1]</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">replaceElements</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span>   length<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> max<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        max<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>解析</p><p><strong>逆序遍历</strong><br>本题等价于对于数组 arr 中的每个元素 arr[i]，将其替换成 arr[i + 1], arr[i + 2], …, arr[n - 1] 中的最大值。因此我们可以逆序地遍历整个数组，同时维护从数组右端到当前位置所有元素的最大值。</p><p>设 ans[i] = max(arr[i + 1], arr[i + 2], …, arr[n - 1])，那么在进行逆序遍历时，我们可以直接通过</p><p>ans[i] = max(ans[i + 1], arr[i + 1])</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/replace-elements-with-greatest-element-on-right-side/solution/jiang-mei-ge-yuan-su-ti-huan-wei-you-ce-zui-da-y-5/">https://leetcode-cn.com/problems/replace-elements-with-greatest-element-on-right-side/solution/jiang-mei-ge-yuan-su-ti-huan-wei-you-ce-zui-da-y-5/</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>637. 二叉树的层平均值</title>
      <link href="/2021/02/28/ucwip6/"/>
      <url>/2021/02/28/ucwip6/</url>
      
        <content type="html"><![CDATA[<h3 id="637-二叉树的层平均值"><a href="#637-二叉树的层平均值" class="headerlink" title="637. 二叉树的层平均值"></a><a href="https://leetcode-cn.com/problems/average-of-levels-in-binary-tree/">637. 二叉树的层平均值</a></h3><p>难度简单 238<br>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。</p><p><strong>示例 1：</strong><br><strong>输入：</strong><br>    3<br>   / <br>  9  20<br>    /  <br>   15   7<br><strong>输出：</strong>[3, 14.5, 11]<br><strong>解释：</strong><br>第 0 层的平均值是 3 ,   第 1 层是 14.5 , 第 2 层是 11 。因此返回 [3, 14.5, 11] 。</p><h4 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Double<span class="token operator">></span> <span class="token function">averageOfLevels</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Double<span class="token operator">></span> sums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Double<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> counts<span class="token punctuation">,</span> sums<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Double<span class="token operator">></span> averages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Double<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> sums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            averages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">/</span> counts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> averages<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> counts<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Double<span class="token operator">></span> sums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">&lt;</span> sums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sums<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> sums<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span> <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            counts<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>level<span class="token punctuation">,</span> counts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sums<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">*</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每层进来都走else，右节点dfs时执行if分支。</span>            counts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> counts<span class="token punctuation">,</span> sums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//else</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> counts<span class="token punctuation">,</span> sums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//if分支</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/average-of-levels-in-binary-tree/solution/er-cha-shu-de-ceng-ping-jun-zhi-by-leetcode-soluti/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h4 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Double<span class="token operator">></span> <span class="token function">averageOfLevels</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Double<span class="token operator">></span> averages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Double<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">+=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                TreeNode left <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> right <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            averages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sum <span class="token operator">/</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> averages<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>average<span class="token operator">-</span>of<span class="token operator">-</span>levels<span class="token operator">-</span>in<span class="token operator">-</span>binary<span class="token operator">-</span>tree<span class="token operator">/</span>solution<span class="token operator">/</span>er<span class="token operator">-</span>cha<span class="token operator">-</span>shu<span class="token operator">-</span>de<span class="token operator">-</span>ceng<span class="token operator">-</span>ping<span class="token operator">-</span>jun<span class="token operator">-</span>zhi<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>soluti<span class="token operator">/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 18. 删除链表的节点</title>
      <link href="/2021/02/28/adrdac/"/>
      <url>/2021/02/28/adrdac/</url>
      
        <content type="html"><![CDATA[<h3 id="剑指-Offer-18-删除链表的节点"><a href="#剑指-Offer-18-删除链表的节点" class="headerlink" title="剑指 Offer 18. 删除链表的节点"></a><a href="https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/">剑指 Offer 18. 删除链表的节点</a></h3><p>给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。</p><p>返回删除后的链表的头节点。</p><p>注意：此题对比原题有改动</p><p>示例 1:</p><p>输入: head = [4,5,1,9], val = 5<br>输出: [4,1,9]<br>解释: 给定你链表中值为  5  的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.<br>示例 2:</p><p>输入: head = [4,5,1,9], val = 1<br>输出: [4,5,9]<br>解释: 给定你链表中值为  1  的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> ListNode <span class="token function">deleteNode</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        ListNode pre <span class="token operator">=</span> head<span class="token punctuation">,</span> cur <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>val <span class="token operator">!=</span> val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span> pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：jyd链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>shan<span class="token operator">-</span>chu<span class="token operator">-</span>lian<span class="token operator">-</span>biao<span class="token operator">-</span>de<span class="token operator">-</span>jie<span class="token operator">-</span>dian<span class="token operator">-</span>lcof<span class="token operator">/</span>solution<span class="token operator">/</span>mian<span class="token operator">-</span>shi<span class="token operator">-</span>ti<span class="token operator">-</span><span class="token number">18</span><span class="token operator">-</span>shan<span class="token operator">-</span>chu<span class="token operator">-</span>lian<span class="token operator">-</span>biao<span class="token operator">-</span>de<span class="token operator">-</span>jie<span class="token operator">-</span>dian<span class="token operator">-</span>sh<span class="token operator">-</span><span class="token number">2</span><span class="token operator">/</span></code></pre><p><strong>算法流程：</strong></p><p>特例处理： 当应删除头节点 head 时，直接返回 head.next 即可。<br>初始化： pre = head , cur = head.next 。<br>定位节点： 当 cur 为空 或 cur 节点值等于 val 时跳出。<br>保存当前节点索引，即 pre = cur 。<br>遍历下一节点，即 cur = cur.next 。<br>删除节点： 若 cur 指向某节点，则执行 pre.next = cur.next 。（若 cur 指向 null ，代表链表中不包含值为 val 的节点。<br>返回值： 返回链表头部节点 head 即可。</p><hr>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>111. 二叉树的最小深度</title>
      <link href="/2021/02/28/fgxqa9/"/>
      <url>/2021/02/28/fgxqa9/</url>
      
        <content type="html"><![CDATA[<h3 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111. 二叉树的最小深度"></a><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/">111. 二叉树的最小深度</a></h3><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p>说明：叶子节点是指没有子节点的节点。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614507976131-713eb6e8-5cb0-4aa3-8ea6-a53e9d12398a.png#align=left&display=inline&height=151&originHeight=302&originWidth=432&size=28643&status=done&style=none&width=216" alt="image.png"></p><p>示例 1：<br>输入：root = [3,9,20,null,null,15,7]<br>输出：2</p><p>示例 2：<br>输入：root = [2,null,3,null,4,null,5,null,6]<br>输出：5</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDepth1</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min_depth <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            min_depth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> min_depth<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            min_depth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">,</span> min_depth<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> min_depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/solution/er-cha-shu-de-zui-xiao-shen-du-by-leetcode-solutio/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">QueueNode</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        TreeNode node<span class="token punctuation">;</span>        <span class="token keyword">int</span> depth<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">QueueNode</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> node<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>depth <span class="token operator">=</span> depth<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>QueueNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>QueueNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueueNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            QueueNode nodeDepth <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TreeNode node <span class="token operator">=</span> nodeDepth<span class="token punctuation">.</span>node<span class="token punctuation">;</span>            <span class="token keyword">int</span> depth <span class="token operator">=</span> nodeDepth<span class="token punctuation">.</span>depth<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> depth<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueueNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueueNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>minimum<span class="token operator">-</span>depth<span class="token operator">-</span>of<span class="token operator">-</span>binary<span class="token operator">-</span>tree<span class="token operator">/</span>solution<span class="token operator">/</span>er<span class="token operator">-</span>cha<span class="token operator">-</span>shu<span class="token operator">-</span>de<span class="token operator">-</span>zui<span class="token operator">-</span>xiao<span class="token operator">-</span>shen<span class="token operator">-</span>du<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solutio<span class="token operator">/</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/solution/er-cha-shu-de-zui-xiao-shen-du-by-leetcode-solutio/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算左子树的深度</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算右子树的深度</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果左子树或右子树的深度不为 0，即存在一个子树，那么当前子树的最小深度就是该子树的深度+1</span>        <span class="token comment" spellcheck="true">// 如果左子树和右子树的深度都不为 0，即左右子树都存在，那么当前子树的最小深度就是它们较小值+1</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> right <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> left <span class="token operator">+</span> right <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>100. 相同的树</title>
      <link href="/2021/02/28/qabomv/"/>
      <url>/2021/02/28/qabomv/</url>
      
        <content type="html"><![CDATA[<h4 id="100-相同的树"><a href="#100-相同的树" class="headerlink" title="100. 相同的树"></a><a href="https://leetcode-cn.com/problems/same-tree/">100. 相同的树</a></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>TreeNode p<span class="token punctuation">,</span> TreeNode q<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> q <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> null <span class="token operator">||</span> q <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*else if (p.val != q.val) &amp;#123;            return false;        &amp;#125;*/</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token operator">==</span> q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>left<span class="token punctuation">,</span> q<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>right<span class="token punctuation">,</span> q<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 53 - II. 0～n-1中缺失的数字</title>
      <link href="/2021/02/28/so338l/"/>
      <url>/2021/02/28/so338l/</url>
      
        <content type="html"><![CDATA[<h3 id="剑指-Offer-53-II-0-～-n-1-中缺失的数字"><a href="#剑指-Offer-53-II-0-～-n-1-中缺失的数字" class="headerlink" title="剑指 Offer 53 - II. 0 ～ n-1 中缺失的数字"></a><a href="https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/">剑指 Offer 53 - II. 0 ～ n-1 中缺失的数字</a></h3><p>一个长度为 n-1 的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围 0 ～ n-1 之内。在范围 0 ～ n-1 内的 n 个数字中有且只有一个数字不在该数组中，请找出这个数字。<br>示例 1:</p><p>输入: [0,1,3]<br>输出: 2<br>示例  2:</p><p>输入: [0,1,2,3,4,5,6,7,9]<br>输出: 8</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> m<span class="token punctuation">)</span> i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：jyd</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/solution/mian-shi-ti-53-ii-0n-1zhong-que-shi-de-shu-zi-er-f/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>排序数组中的搜索问题，首先想到 二分法 解决。<br>根据题意，数组可以按照以下规则划分为两部分。<br>左子数组： nums[i] =i ；<br>右子数组： nums[i] !=i ；<br>缺失的数字等于 “右子数组的首位元素” 对应的索引；因此考虑使用二分法查找 “右子数组的首位元素” 。</p><p>算法解析：</p><p>初始化： 左边界 i=0 ，右边界 j=len(nums)−1 ；代表闭区间 [i,j] 。<br>循环二分： 当 i≤j 时循环 （即当闭区间 [i,j] 为空时跳出） ；<br>计算中点 m=(i+j)//2 ，其中 “//“ 为向下取整除法；<br>若 nums[m] =m ，则 “右子数组的首位元素” 一定在闭区间 [m+1,j] 中，因此执行 i=m+1；<br>若 nums[m] !=m ，则 “左子数组的末位元素” 一定在闭区间 [i,m−1] 中，因此执行 j=m−1；<br>返回值： 跳出时，变量 i,j 分别指向 “右子数组的首位元素” 和 “左子数组的末位元素” 。因此返回 i 即可。</p><p>复杂度分析：</p><p>时间复杂度 O(logN)： 二分法为对数级别复杂度。<br>空间复杂度 O(1)： 几个变量使用常数大小的额外空间。</p><p>作者：jyd<br>链接：<a href="https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/solution/mian-shi-ti-53-ii-0n-1zhong-que-shi-de-shu-zi-er-f/">https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/solution/mian-shi-ti-53-ii-0n-1zhong-que-shi-de-shu-zi-er-f/</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>876. 链表的中间结点</title>
      <link href="/2021/02/28/mi48xz/"/>
      <url>/2021/02/28/mi48xz/</url>
      
        <content type="html"><![CDATA[<h4 id="876-链表的中间结点"><a href="#876-链表的中间结点" class="headerlink" title="876. 链表的中间结点"></a><a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/">876. 链表的中间结点</a></h4><p>有多个返回第二个</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> ListNode <span class="token function">middleNode</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> A <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            A<span class="token punctuation">[</span>t<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> A<span class="token punctuation">[</span>t <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>middle<span class="token operator">-</span>of<span class="token operator">-</span>the<span class="token operator">-</span>linked<span class="token operator">-</span>list<span class="token operator">/</span>solution<span class="token operator">/</span>lian<span class="token operator">-</span>biao<span class="token operator">-</span>de<span class="token operator">-</span>zhong<span class="token operator">-</span>jian<span class="token operator">-</span>jie<span class="token operator">-</span>dian<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solut<span class="token operator">/</span></code></pre><hr><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> ListNode <span class="token function">middleNode</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode slow <span class="token operator">=</span> head<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>107. 二叉树的层序遍历 II</title>
      <link href="/2021/02/28/gzpadi/"/>
      <url>/2021/02/28/gzpadi/</url>
      
        <content type="html"><![CDATA[<h4 id="107-二叉树的层序遍历-II"><a href="#107-二叉树的层序遍历-II" class="headerlink" title="107. 二叉树的层序遍历 II"></a><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/">107. 二叉树的层序遍历 II</a></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">levelOrderBottom</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> levelOrder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> levelOrder<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> level <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                level<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                TreeNode left <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> right <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            levelOrder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后添加的在最开始位置</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> levelOrder<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/solution/er-cha-shu-de-ceng-ci-bian-li-ii-by-leetcode-solut/</span><span class="token comment" spellcheck="true">// 来源：力扣（LeetCode）</span><span class="token comment" spellcheck="true">// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>204. 计数质数</title>
      <link href="/2021/02/28/nw9pbz/"/>
      <url>/2021/02/28/nw9pbz/</url>
      
        <content type="html"><![CDATA[<h4 id="204-计数质数"><a href="#204-计数质数" class="headerlink" title="204. 计数质数"></a><a href="https://leetcode-cn.com/problems/count-primes/">204. 计数质数</a></h4><p>难度简单<br>统计所有小于非负整数 *<code>n</code> *的质数的数量。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>n = 10<br><strong>输出：</strong>4<br><strong>解释：</strong>小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</p><p><strong>示例 2：</strong><br><strong>输入：</strong>n = 0<br><strong>输出：</strong>0</p><p><strong>示例 3：</strong><br><strong>输入：</strong>n = 1<br><strong>输出</strong>：0</p><h4 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans <span class="token operator">+=</span> <span class="token function">isPrime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> x<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/count-primes/solution/ji-shu-zhi-shu-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>超时</p><p>质数的定义：在大于 1 的自然数中，除了 1 和它本身以外不再有其他因数的自然数。因此对于每个数<br>x，我们可以从小到大枚举 [2,x−1] 中的每个数 y，判断 y 是否为 x 的因数。但这样判断一个数是否为质数的时间复杂度最差情况下会到 O(n)，无法通过所有测试数据。</p><p>考虑到如果 y 是 x 的因数，那么 x/y 也必然是 x 的因数，因此我们只要校验 y 或者 x/y  即可。而如果我们每次选择校验两者中的较小数，则不难发现较小数一定落在 [2, 根号下 x ] 的区间中，因此我们只需要枚举<br>其中的所有数即可，这样单次检查的时间复杂度从 O(n) 降低至了 O( 跟号下 n )。</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/count-primes/solution/ji-shu-zhi-shu-by-leetcode-solution/">https://leetcode-cn.com/problems/count-primes/solution/ji-shu-zhi-shu-by-leetcode-solution/</a></p><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isPrime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ans <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> i <span class="token operator">*</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止下标越界</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">+=</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//j += i;j++</span>                        isPrime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/count-primes/solution/ji-shu-zhi-shu-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h4><p>枚举没有考虑到数与数的关联性，因此难以再继续优化时间复杂度。接下来我们介绍一个常见的算法，该算法由希腊数学家厄拉多塞（Eratosthenes）提出，称为厄拉多塞筛法，简称埃氏筛。</p><p>我们考虑这样一个事实：如果 x 是质数，那么大于 x 的 x 的倍数 2x,3x,… 一定不是质数，因此我们可以从这里入手。</p><p>我们设 isPrime[i] 表示数 i 是不是质数，如果是质数则为 1，否则为 0。从小到大遍历每个数，如果这个数为质数，则将其所有的倍数都标记为合数（除了该质数本身），即 0，这样在运行结束的时候我们即能知道质数的个数。<br>这种方法的正确性是比较显然的：这种方法显然不会将质数标记成合数；另一方面，当从小到大遍历到数 x 时，倘若它是合数，则它一定是某个小于 x 的质数 y 的整数倍，故根据此方法的步骤，我们在遍历到 y 时，就一定会在此时将 x 标记为 isPrime[x]=0。因此，这种方法也不会将合数标记为质数。</p><p>当然这里还可以继续优化，对于一个质数 x，如果按上文说的我们从 2x 开始标记其实是冗余的，应该直接从<br>x⋅x 开始标记，因为 2x,3x,… 这些数一定在 x 之前就被其他数的倍数标记过了，例如 2 的所有倍数，3 的所有倍数等。</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/count-primes/solution/ji-shu-zhi-shu-by-leetcode-solution/">https://leetcode-cn.com/problems/count-primes/solution/ji-shu-zhi-shu-by-leetcode-solution/</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>54. 螺旋矩阵</title>
      <link href="/2021/02/28/yaas7q/"/>
      <url>/2021/02/28/yaas7q/</url>
      
        <content type="html"><![CDATA[<p>categories:[Blog,算法]</p><hr><h4 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54. 螺旋矩阵"></a><a href="https://leetcode-cn.com/problems/spiral-matrix/">54. 螺旋矩阵</a></h4><p>难度中等<br>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p><p><strong>示例 1：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/282505/1614491833327-4772d85c-54d0-450b-a1f6-316ef7a7dad1.jpeg#align=left&display=inline&height=242&originHeight=242&originWidth=242&size=0&status=done&style=none&width=242"><br><strong>输入：</strong>matrix = [[1,2,3],[4,5,6],[7,8,9]]<br><strong>输出：</strong>[1,2,3,6,9,8,7,4,5]</p><p><strong>示例 2：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/282505/1614491832233-a043ddaf-9fe5-452e-8758-2848877ad1e1.jpeg#align=left&display=inline&height=242&originHeight=242&originWidth=322&size=0&status=done&style=none&width=322"><br><strong>输入：</strong>matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]<br><strong>输出：</strong>[1,2,3,4,8,12,11,10,9,5,6,7]</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix <span class="token operator">==</span> null <span class="token operator">||</span> matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> order<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">,</span> columns <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> columns <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bottom <span class="token operator">=</span> rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;=</span> bottom<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> column <span class="token operator">=</span> left<span class="token punctuation">;</span> column <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> column<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                order<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> top <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> row <span class="token operator">&lt;=</span> bottom<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                order<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> top <span class="token operator">&lt;</span> bottom<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不加一行的时候有重复问题</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> column <span class="token operator">=</span> right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> column <span class="token operator">></span> left<span class="token punctuation">;</span> column<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    order<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>bottom<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> bottom<span class="token punctuation">;</span> row <span class="token operator">></span> top<span class="token punctuation">;</span> row<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    order<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>            top<span class="token operator">++</span><span class="token punctuation">;</span>            bottom<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> order<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/spiral-matrix/solution/luo-xuan-ju-zhen-by-leetcode-solution/</span><span class="token comment" spellcheck="true">// 来源：力扣（LeetCode）</span><span class="token comment" spellcheck="true">// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>解析<img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614491893279-fc0f6ed3-2223-4248-9455-19fcda9fe39f.png#align=left&display=inline&height=569&originHeight=569&originWidth=1280&size=107926&status=done&style=none&width=1280" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>236. 二叉树的最近公共祖先</title>
      <link href="/2021/02/28/avkgvh/"/>
      <url>/2021/02/28/avkgvh/</url>
      
        <content type="html"><![CDATA[<p>categories:[Blog,算法]</p><hr><h3 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></h3><p>难度中等<br>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。<br><a href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p><p><strong>示例 1：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614490414790-2baaa30b-a787-48ba-85e1-30fab3936d29.png#align=left&display=inline&height=190&originHeight=190&originWidth=200&size=0&status=done&style=none&width=200"><br><strong>输入：</strong>root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1<br><strong>输出：</strong>3<br><strong>解释：</strong>节点 <code>5 </code>和节点 <code>1 </code>的最近公共祖先是节点 <code>3 。</code><br><strong>示例 2：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614490414747-fd9d7a6c-69d3-4de6-a696-73606a49aa95.png#align=left&display=inline&height=190&originHeight=190&originWidth=200&size=0&status=done&style=none&width=200"><br><strong>输入：</strong>root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4<br><strong>输出：</strong>5<br><strong>解释：</strong>节点 <code>5 </code>和节点 <code>4 </code>的最近公共祖先是节点 <code>5 。</code>因为根据定义最近公共祖先节点可以为节点本身。</p><p><strong>示例 3：</strong><br><strong>输入：</strong>root = [1,2], p = 1, q = 2<br><strong>输出：</strong>1</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> TreeNode<span class="token operator">></span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            parent<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> TreeNode p<span class="token punctuation">,</span> TreeNode q<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//visited.add(p.val);</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> q<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            q <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/er-cha-shu-de-zui-jin-gong-gong-zu-xian-by-leetc-2/</span><span class="token comment" spellcheck="true">// 来源：力扣（LeetCode）</span><span class="token comment" spellcheck="true">// 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p><strong>存储父节点</strong><br><strong>思路</strong><br>我们可以用哈希表存储所有节点的父节点，然后我们就可以利用节点的父节点信息从 p 结点开始不断往上跳，并记录已经访问过的节点，再从 q 节点开始不断往上跳，如果碰到已经访问过的节点，那么这个节点就是我们要找的最近公共祖先。<br><strong>算法</strong><br>从根节点开始遍历整棵二叉树，用哈希表记录每个节点的父节点指针。<br>从 p 节点开始不断往它的祖先移动，并用数据结构记录已经访问过的祖先节点。<br>同样，我们再从 q 节点开始不断往它的祖先移动，如果有祖先已经被访问过，即意味着这是 p 和 q 的深度最深的公共祖先，即 LCA 节点。</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/er-cha-shu-de-zui-jin-gong-gong-zu-xian-by-leetc-2/">https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/er-cha-shu-de-zui-jin-gong-gong-zu-xian-by-leetc-2/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>todo</title>
      <link href="/2021/02/28/ynm665/"/>
      <url>/2021/02/28/ynm665/</url>
      
        <content type="html"><![CDATA[<h4 id="236-二叉树的最近公共祖先-236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先-236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先     236. 二叉树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a>     <a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></h4><h4 id="208-实现-Trie-前缀树-208-实现-Trie-前缀树"><a href="#208-实现-Trie-前缀树-208-实现-Trie-前缀树" class="headerlink" title="208. 实现 Trie (前缀树)         208. 实现 Trie (前缀树)"></a><a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/">208. 实现 Trie (前缀树)</a>         <a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/">208. 实现 Trie (前缀树)</a></h4><h4 id="62-不同路径-62-不同路径"><a href="#62-不同路径-62-不同路径" class="headerlink" title="62. 不同路径                     62. 不同路径"></a><a href="https://leetcode-cn.com/problems/unique-paths/">62. 不同路径</a>                     <a href="https://leetcode-cn.com/problems/unique-paths/">62. 不同路径</a></h4><h4 id="46-全排列-46-全排列"><a href="#46-全排列-46-全排列" class="headerlink" title="46. 全排列                        46. 全排列"></a><a href="https://leetcode-cn.com/problems/permutations/">46. 全排列</a>                        <a href="https://leetcode-cn.com/problems/permutations/">46. 全排列</a></h4><h4 id="986-区间列表的交集-986-区间列表的交集"><a href="#986-区间列表的交集-986-区间列表的交集" class="headerlink" title="986. 区间列表的交集            986. 区间列表的交集"></a><a href="https://leetcode-cn.com/problems/interval-list-intersections/">986. 区间列表的交集</a>            <a href="https://leetcode-cn.com/problems/interval-list-intersections/">986. 区间列表的交集</a></h4><h4 id="剑指-Offer-56-I-数组中数字出现的次数-剑指-Offer-56-I-数组中数字出现的次数"><a href="#剑指-Offer-56-I-数组中数字出现的次数-剑指-Offer-56-I-数组中数字出现的次数" class="headerlink" title="剑指 Offer 56 - I. 数组中数字出现的次数    剑指 Offer 56 - I. 数组中数字出现的次数"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/">剑指 Offer 56 - I. 数组中数字出现的次数</a>    <a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/">剑指 Offer 56 - I. 数组中数字出现的次数</a></h4><h4 id="179-最大数-179-最大数"><a href="#179-最大数-179-最大数" class="headerlink" title="179. 最大数                      179. 最大数"></a><a href="https://leetcode-cn.com/problems/largest-number/">179. 最大数                     </a> <a href="https://leetcode-cn.com/problems/largest-number/">179. 最大数</a></h4><h4 id="103-二叉树的锯齿形层序遍历-103-二叉树的锯齿形层序遍历"><a href="#103-二叉树的锯齿形层序遍历-103-二叉树的锯齿形层序遍历" class="headerlink" title="103. 二叉树的锯齿形层序遍历 103. 二叉树的锯齿形层序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/">103. 二叉树的锯齿形层序遍历</a> <a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/">103. 二叉树的锯齿形层序遍历</a></h4><p>—————————-ok————————–</p><h4 id="70-爬楼梯-70-爬楼梯"><a href="#70-爬楼梯-70-爬楼梯" class="headerlink" title="70. 爬楼梯                         70. 爬楼梯"></a><a href="https://leetcode-cn.com/problems/climbing-stairs/">70. 爬楼梯</a>                         <a href="https://leetcode-cn.com/problems/climbing-stairs/">70. 爬楼梯</a></h4><h4 id="53-最大子序和-53-最大子序和"><a href="#53-最大子序和-53-最大子序和" class="headerlink" title="53. 最大子序和                    53. 最大子序和"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/">53. 最大子序和</a>                    <a href="https://leetcode-cn.com/problems/maximum-subarray/">53. 最大子序和</a></h4><h4 id="剑指-Offer-42-连续子数组的最大和-剑指-Offer-42-连续子数组的最大和"><a href="#剑指-Offer-42-连续子数组的最大和-剑指-Offer-42-连续子数组的最大和" class="headerlink" title="剑指 Offer 42. 连续子数组的最大和    剑指 Offer 42. 连续子数组的最大和"></a><a href="https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">剑指 Offer 42. 连续子数组的最大和</a>    <a href="https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">剑指 Offer 42. 连续子数组的最大和</a></h4><p>categories: [Blog,Algorithm,mid]</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>55. 跳跃游戏</title>
      <link href="/2021/02/28/iffbwq/"/>
      <url>/2021/02/28/iffbwq/</url>
      
        <content type="html"><![CDATA[<h4 id="55-跳跃游戏"><a href="#55-跳跃游戏" class="headerlink" title="55. 跳跃游戏"></a><a href="https://leetcode-cn.com/problems/jump-game/">55. 跳跃游戏</a></h4><p>难度中等<br>给定一个非负整数数组 <code>nums</code> ，你最初位于数组的 <strong>第一个下标</strong> 。<br>数组中的每个元素代表你在该位置可以跳跃的最大长度。<br>判断你是否能够到达最后一个下标。</p><p><strong>示例  1：</strong><br><strong>输入：</strong>nums = [2,3,1,1,4]<br><strong>输出：</strong>true<br><strong>解释：</strong>可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。</p><p><strong>示例  2：</strong><br><strong>输入：</strong>nums = [3,2,1,0,4]<br><strong>输出：</strong>false<br><strong>解释：</strong>无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canJump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> rightmost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> rightmost<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                rightmost <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>rightmost<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rightmost <span class="token operator">>=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>jump<span class="token operator">-</span>game<span class="token operator">/</span>solution<span class="token operator">/</span>tiao<span class="token operator">-</span>yue<span class="token operator">-</span>you<span class="token operator">-</span>xi<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><p>贪心<br>我们可以用贪心的方法解决这个问题。<br>设想一下，对于数组中的任意一个位置 y，我们如何判断它是否可以到达？根据题目的描述，<strong>只要存在一个位置 x，它本身可以到达，并且它跳跃的最大长度为 x+nums[x]，这个值大于等于 y，即 x+nums[x]≥y，那么位置 y 也可以到达。</strong><br>换句话说，对于每一个可以到达的位置 x，它使得 x+1,x+2,⋯,x+nums[x] 这些连续的位置都可以到达。<br>这样以来，我们依次遍历数组中的每一个位置，并<strong>实时维护 最远可以到达的位置</strong>。对于当前遍历到的位置 x，如果它在 最远可以到达的位置 的范围内，那么我们就可以从起点通过若干次跳跃到达该位置，因此我们可以用 x+nums[x] 更新 最远可以到达的位置。</p><p>在遍历的过程中，如果 最远可以到达的位置 大于等于数组中的最后一个位置，那就说明最后一个位置可达，我们就可以直接返回 True 作为答案。反之，如果在遍历结束后，最后一个位置仍然不可达，我们就返回 False 作为答案。<br><strong>注视版本</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canJump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> rightmost <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> rightmost<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//每次跳跃最大值</span>                rightmost <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>rightmost<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rightmost <span class="token operator">>=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最后元素下标</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/jump-game/solution/tiao-yue-you-xi-by-leetcode-solution/">https://leetcode-cn.com/problems/jump-game/solution/tiao-yue-you-xi-by-leetcode-solution/</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>153. 寻找旋转排序数组中的最小值</title>
      <link href="/2021/02/28/evt4xb/"/>
      <url>/2021/02/28/evt4xb/</url>
      
        <content type="html"><![CDATA[<h4 id="153-寻找旋转排序数组中的最小值"><a href="#153-寻找旋转排序数组中的最小值" class="headerlink" title="153. 寻找旋转排序数组中的最小值"></a><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/">153. 寻找旋转排序数组中的最小值</a></h4><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// If the list has just one element then return that element.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// initializing left and right pointers.</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// if the last element is greater than the first element then there is no rotation.</span>        <span class="token comment" spellcheck="true">// e.g. 1 &lt; 2 &lt; 3 &lt; 4 &lt; 5 &lt; 7. Already sorted array.</span>        <span class="token comment" spellcheck="true">// Hence the smallest element is first element. A[0]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Binary search way</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">>=</span> left<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Find the mid element</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// if the mid element is greater than its next element then mid+1 element is the smallest</span>            <span class="token comment" spellcheck="true">// This point would be the point of change. From higher to lower value.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// if the mid element is lesser than its previous element then mid element is the smallest</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// if the mid elements value is greater than the 0th element this means</span>            <span class="token comment" spellcheck="true">// the least value is still somewhere to the right as we are still dealing with elements</span>            <span class="token comment" spellcheck="true">// greater than nums[0]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// if nums[0] is greater than the mid value then this means the smallest value is somewhere to</span>                <span class="token comment" spellcheck="true">// the left</span>                right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/solution/xun-zhao-xuan-zhuan-pai-lie-shu-zu-zhong-de-zui-xi/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><ul><li>时间复杂度：和二分搜索一样 O(log⁡N)</li><li>空间复杂度：O(1)</li></ul><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>如果数组没有被旋转，是升序排列，就满足 last element &gt; first element。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614478202220-96a8d230-ca95-4f6a-8635-94653950bfbc.png#align=left&display=inline&height=185&originHeight=494&originWidth=1006&size=26875&status=done&style=none&width=377" alt="image.png"><br>上面的例子中 3 &lt; 4，因此数组旋转过了。这是因为原先的数组为 [2, 3, 4, 5, 6, 7]，通过旋转较小的</p><p>[2, 3] 移到了后面，也就是 [4, 5, 6, 7, 2, 3]。因此旋转数组中第一个元素 [4] 变得比最后一个元素大。</p><p>这意味着在数组中你会发现一个变化的点，这个点会帮助我们解决这个问题，我们称其为变化点。</p><p>在这个改进版本的二分搜索算法中，我们需要找到这个点。下面是关于<strong>变化点的特点</strong>：</p><p>所有变化点左侧元素 &gt; 数组第一个元素</p><p>所有变化点右侧元素 &lt; 数组第一个元素</p><p><strong>算法</strong></p><p>找到数组的中间元素 mid。<br>如果中间元素 &gt; 数组第一个元素，我们需要在 mid 右边搜索变化点。<br>如果中间元素 &lt; 数组第一个元素，我们需要在 mid 左边搜索变化点。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614478272842-0c1ef675-eda2-449e-9a2d-fcaba2365bf9.png#align=left&display=inline&height=159&originHeight=440&originWidth=938&size=24563&status=done&style=none&width=339" alt="image.png"><br>上面的例子中，中间元素 6 比第一个元素 4 大，因此在中间点右侧继续搜索。</p><p>当我们找到变化点时停止搜索，当以下条件满足任意一个即可：<br>nums[mid] &gt; nums[mid + 1]，因此 mid+1 是最小值。<br>nums[mid - 1] &gt; nums[mid]，因此 mid 是最小值。</p><p>作者：LeetCode<br>链接：<a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/solution/xun-zhao-xuan-zhuan-pai-lie-shu-zu-zhong-de-zui-xi/">https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/solution/xun-zhao-xuan-zhuan-pai-lie-shu-zu-zhong-de-zui-xi/</a></p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>516. 最长回文子序列</title>
      <link href="/2021/02/28/gx14kl/"/>
      <url>/2021/02/28/gx14kl/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="516-最长回文子序列"><a href="#516-最长回文子序列" class="headerlink" title="516. 最长回文子序列"></a><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/">516. 最长回文子序列</a></h4><p>难度中等<br>给定一个字符串 <code>s</code> ，找到其中最长的回文子序列，并返回该序列的长度。可以假设 <code>s</code> 的最大长度为 <code>1000</code> 。<br> <br><strong>示例 1:</strong><br>输入:<br>“bbbab”<br>输出:<br>4<br>一个可能的最长回文子序列为 “bbbb”。<br><strong>示例 2:</strong><br>输入:<br>“cbbd”</p><p>输出:<br>2<br>一个可能的最长回文子序列为 “bb”。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestPalindromeSubseq</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//for (int i = 1; i &lt;n; i++) &amp;#123; //为什么不行？   </span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：a380922457</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/longest-palindromic-subsequence/solution/dong-tai-gui-hua-si-yao-su-by-a380922457-3/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p><strong>状态</strong><br>f[i][j] 表示 s 的第 i 个字符到第 j 个字符组成的子串中，最长的回文序列长度是多少。<br><strong>转移方程</strong><br>如果 s 的第 i 个字符和第 j 个字符相同的话<br>f[i][j] = f[i + 1][j - 1] + 2<br>如果 s 的第 i 个字符和第 j 个字符不同的话<br>f[i][j] = max(f[i + 1][j], f[i][j - 1])<br>然后注意遍历顺序，i 从最后一个字符开始往前遍历，j 从 i + 1 开始往后遍历，这样可以保证每个子问题都已经算好了。<br><strong>初始化</strong><br>f[i][i] = 1 单个字符的最长回文序列是 1<br><strong>结果</strong><br>f[0][n - 1]</p><p>作者：a380922457<br>链接：<a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/solution/dong-tai-gui-hua-si-yao-su-by-a380922457-3/">https://leetcode-cn.com/problems/longest-palindromic-subsequence/solution/dong-tai-gui-hua-si-yao-su-by-a380922457-3/</a></p><hr><p>首先明确一下 base case，如果只有一个字符，显然最长回文子序列长度是 1，也就是 dp[i][j] = 1 (i == j)。<br><strong>因为 i 肯定小于等于 j，所以对于那些 i &gt; j 的位置，根本不存在什么子序列，应该初始化为 0。</strong></p><p>另外，看看刚才写的状态转移方程，想求 dp[i][j] 需要知道 dp[i+1][j-1]，dp[i+1][j]，dp[i][j-1] 这三个位置；再看看我们确定的 base case，填入 dp 数组之后是这样：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614477278076-08df0880-0805-4c61-b3e9-bf9b090efe7e.png#align=left&display=inline&height=720&originHeight=720&originWidth=1280&size=685037&status=done&style=none&width=1280" alt="image.png"><br>作者：labuladong<br>链接：<a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/solution/zi-xu-lie-wen-ti-tong-yong-si-lu-zui-chang-hui-wen/">https://leetcode-cn.com/problems/longest-palindromic-subsequence/solution/zi-xu-lie-wen-ti-tong-yong-si-lu-zui-chang-hui-wen/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>102. 二叉树的层序遍历</title>
      <link href="/2021/02/28/gl0861/"/>
      <url>/2021/02/28/gl0861/</url>
      
        <content type="html"><![CDATA[<p>####</p><hr><h4 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></h4><p>给你一个二叉树，请你返回其按 <strong>层序遍历</strong> 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p><p><strong>示例：</strong><br>二叉树：<code>[3,9,20,null,null,15,7]</code>,<br>    3<br>   / <br>  9  20<br>    /   <br>   15   7</p><p>返回其层序遍历结果：<br>[<br>  [3],<br>  [9,20],<br>  [15,7]<br>]</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> level <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> currentLevelSize <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> currentLevelSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                level<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/er-cha-shu-de-ceng-xu-bian-li-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>144. 二叉树的前序遍历</title>
      <link href="/2021/02/28/mgg6cp/"/>
      <url>/2021/02/28/mgg6cp/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144. 二叉树的前序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">144. 二叉树的前序遍历</a></h4><p>给你二叉树的根节点 <code>root</code> ，返回它节点值的 <strong>前序</strong>_ _遍历。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 36. 二叉搜索树与双向链表</title>
      <link href="/2021/02/27/urk38f/"/>
      <url>/2021/02/27/urk38f/</url>
      
        <content type="html"><![CDATA[<pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node &amp;#123;    public int val;    public Node left;    public Node right;    public Node() &amp;#123;&amp;#125;    public Node(int _val) &amp;#123;        val = _val;    &amp;#125;    public Node(int _val,Node _left,Node _right) &amp;#123;        val = _val;        left = _left;        right = _right;    &amp;#125;&amp;#125;;*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node head<span class="token punctuation">,</span> pre<span class="token punctuation">;</span>    <span class="token keyword">public</span> Node <span class="token function">treeToDoublyList</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        pre<span class="token punctuation">.</span>right <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>left <span class="token operator">=</span>pre<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进行头节点和尾节点的相互指向，这两句的顺序也是可以颠倒的</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Node cur<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//pre是否为null对这句没有影响,且这句放在上面两句if else之前也是可以的。</span>        <span class="token comment" spellcheck="true">//pre用于记录双向链表中位于cur左侧的节点，即上一次迭代中的cur,当pre==null时，cur左侧没有节点,即此时cur为双向链表中的头节点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pre<span class="token operator">==</span>null<span class="token punctuation">)</span> head <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//反之，pre!=null时，cur左侧存在节点pre，需要进行pre.right=cur的操作。</span>        <span class="token keyword">else</span> pre<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//pre指向当前的cur</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全部迭代完成后，pre指向双向链表中的尾节点</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：jyd</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/solution/mian-shi-ti-36-er-cha-sou-suo-shu-yu-shuang-xian-5/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="剑指-Offer-36-二叉搜索树与双向链表"><a href="#剑指-Offer-36-二叉搜索树与双向链表" class="headerlink" title="剑指 Offer 36. 二叉搜索树与双向链表"></a><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/">剑指 Offer 36. 二叉搜索树与双向链表</a></h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 36. 二叉搜索树与双向链表</title>
      <link href="/2021/02/27/gv56ta/"/>
      <url>/2021/02/27/gv56ta/</url>
      
        <content type="html"><![CDATA[<h3 id="剑指-Offer-36-二叉搜索树与双向链表"><a href="#剑指-Offer-36-二叉搜索树与双向链表" class="headerlink" title="剑指 Offer 36. 二叉搜索树与双向链表"></a><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/">剑指 Offer 36. 二叉搜索树与双向链表</a></h3><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。<br>为了让您更好地理解问题，以下面的二叉搜索树为例：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614438215472-44193c54-87ad-49ba-b7b1-65a731c9004b.png#align=left&display=inline&height=196&originHeight=392&originWidth=681&size=24075&status=done&style=none&width=341" alt="image.png"><br>我们希望将这个二叉搜索树转化为双向循环链表。链表中的每个节点都有一个前驱和后继指针。对于双向循环链表，第一个节点的前驱是最后一个节点，最后一个节点的后继是第一个节点。</p><p>下图展示了上面的二叉搜索树转化成的链表。“head” 表示指向链表中有最小元素的节点。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614438236360-0fee2a46-8299-4759-8bdb-91a321131435.png#align=left&display=inline&height=188&originHeight=375&originWidth=1149&size=14368&status=done&style=none&width=575" alt="image.png"></p><p>特别地，我们希望可以就地完成转换操作。当转化完成以后，树中节点的左指针需要指向前驱，树中节点的右指针需要指向后继。还需要返回链表中的第一个节点的指针。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node &amp;#123;    public int val;    public Node left;    public Node right;    public Node() &amp;#123;&amp;#125;    public Node(int _val) &amp;#123;        val = _val;    &amp;#125;    public Node(int _val,Node _left,Node _right) &amp;#123;        val = _val;        left = _left;        right = _right;    &amp;#125;&amp;#125;;*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Node pre<span class="token punctuation">,</span> head<span class="token punctuation">;</span>    <span class="token keyword">public</span> Node <span class="token function">treeToDoublyList</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre<span class="token punctuation">.</span>right <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>Node cur<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pre <span class="token operator">!=</span> null<span class="token punctuation">)</span> pre<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token keyword">else</span> head <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>left <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：jyd</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/solution/mian-shi-ti-36-er-cha-sou-suo-shu-yu-shuang-xian-5/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="打印中序遍历"><a href="#打印中序遍历" class="headerlink" title="打印中序遍历"></a>打印中序遍历</h4><p>void dfs(TreeNode root) {<br>   if(root == null) return;<br>   dfs(root.left); // 左<br>   System.out.println(root.val); // 根<br>   dfs(root.right); // 右<br>}</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>二叉搜索树的中序遍历为 递增序列 。<br>将 二叉搜索树 转换成一个 “排序的循环双向链表” ，其中包含三个要素：</p><p>排序链表： 节点应从小到大排序，因此应使用 中序遍历 “从小到大”访问树的节点；<br>双向链表： 在构建相邻节点（设前驱节点 pre ，当前节点 cur ）关系时，不仅应 pre.right=cur ，也应<br>cur.left=pre 。<br>循环链表： 设链表头节点 head 和尾节点 tail ，则应构建 head.left=tail 和 tail.right=head 。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614438429728-dcaf3e7d-f894-4dab-a06c-6267b48a6727.png#align=left&display=inline&height=403&originHeight=805&originWidth=1072&size=81381&status=done&style=none&width=536" alt="image.png"><br>作者：jyd<br>链接：<a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/solution/mian-shi-ti-36-er-cha-sou-suo-shu-yu-shuang-xian-5/">https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/solution/mian-shi-ti-36-er-cha-sou-suo-shu-yu-shuang-xian-5/</a></p><p>算法流程：</p><p><strong>dfs(cur): **递归法中序遍历；<br>**终止条件</strong>： 当节点 cur 为空，代表越过叶节点，直接返回；<br><strong>递归左子树</strong>，即 dfs(cur.left) ；<br><strong>构建链表</strong>：<br>当 pre 为空时： 代表正在访问链表头节点，记为 head 。<br>当 pre 不为空时： 修改双向节点引用，即 pre.right=cur ， cur.left=pre ；<br>保存 cur ： 更新 pre=cur ，即节点 cur 是后继节点的 pre ；<br>递归右子树，即 dfs(cur.left) ；</p><p><strong>treeToDoublyList(root)：</strong><br><strong>特例处理</strong>： 若节点 root 为空，则直接返回；<br><strong>初始化：</strong> 空节点 pre ；<br><strong>转化为双向链表</strong>： 调用 dfs(root) ；<br><strong>构建循环链表：</strong> 中序遍历完成后，head 指向头节点， pre 指向尾节点，因此修改 head 和 pre 的双向节点引用即可。<br><strong>返回值</strong>： 返回链表的头节点 head 即可。</p><p>作者：jyd<br>链接：<a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/solution/mian-shi-ti-36-er-cha-sou-suo-shu-yu-shuang-xian-5/">https://leetcode-cn.com/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/solution/mian-shi-ti-36-er-cha-sou-suo-shu-yu-shuang-xian-5/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 53 - I. 在排序数组中查找数字 I</title>
      <link href="/2021/02/27/rsbtoz/"/>
      <url>/2021/02/27/rsbtoz/</url>
      
        <content type="html"><![CDATA[<h3 id="剑指-Offer-53-I-在排序数组中查找数字-I"><a href="#剑指-Offer-53-I-在排序数组中查找数字-I" class="headerlink" title="剑指 Offer 53 - I. 在排序数组中查找数字 I"></a><a href="https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/">剑指 Offer 53 - I. 在排序数组中查找数字 I</a></h3><p>统计一个数字在排序数组中出现的次数。</p><p><strong>示例 1:</strong><br><strong>输入:</strong> nums = [<code>5,7,7,8,8,10]</code>, target = 8<br><strong>输出:</strong> 2<br><strong>示例 2:</strong><br><strong>输入:</strong> nums = [<code>5,7,7,8,8,10]</code>, target = 6<br><strong>输出:</strong> 0</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 搜索右边界 right</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 若数组中无 target ，则提前返回</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 搜索左边界 right</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token keyword">return</span> right <span class="token operator">-</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：jyd链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>zai<span class="token operator">-</span>pai<span class="token operator">-</span>xu<span class="token operator">-</span>shu<span class="token operator">-</span>zu<span class="token operator">-</span>zhong<span class="token operator">-</span>cha<span class="token operator">-</span>zhao<span class="token operator">-</span>shu<span class="token operator">-</span>zi<span class="token operator">-</span>lcof<span class="token operator">/</span>solution<span class="token operator">/</span>mian<span class="token operator">-</span>shi<span class="token operator">-</span>ti<span class="token operator">-</span><span class="token number">53</span><span class="token operator">-</span>i<span class="token operator">-</span>zai<span class="token operator">-</span>pai<span class="token operator">-</span>xu<span class="token operator">-</span>shu<span class="token operator">-</span>zu<span class="token operator">-</span>zhong<span class="token operator">-</span>cha<span class="token operator">-</span>zha<span class="token operator">-</span><span class="token number">5</span><span class="token operator">/</span></code></pre><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>排序数组中的搜索问题，首先想到 二分法 解决。<br>排序数组 nums 中的所有数字 target 形成一个窗口，记窗口的 左 / 右边界 索引分别为 left 和 right ，<br>分别对应窗口左边 / 右边的首个元素。</p><p>本题要求统计数字 target 的出现次数，可转化为：使用二分法分别找到 左边界<br>left 和 右边界 right ，易得数字 target 的数量为 right−left−1 。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614436392796-5759f5a3-a640-4ffd-8250-6029d4d709f1.png#align=left&display=inline&height=1004&originHeight=1004&originWidth=1630&size=271974&status=done&style=none&width=1630" alt="截屏2021-02-27 下午10.32.47.png"><br>作者：jyd<br>链接：<a href="https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/solution/mian-shi-ti-53-i-zai-pai-xu-shu-zu-zhong-cha-zha-5/">https://leetcode-cn.com/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/solution/mian-shi-ti-53-i-zai-pai-xu-shu-zu-zhong-cha-zha-5/</a></p><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614437373187-debd8c27-e0ff-4429-88a1-245700a5643e.png#align=left&display=inline&height=377&originHeight=753&originWidth=1003&size=61215&status=done&style=none&width=502" alt="image.png"></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">helper</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> tar<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> tar<span class="token punctuation">)</span> i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：jyd链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>zai<span class="token operator">-</span>pai<span class="token operator">-</span>xu<span class="token operator">-</span>shu<span class="token operator">-</span>zu<span class="token operator">-</span>zhong<span class="token operator">-</span>cha<span class="token operator">-</span>zhao<span class="token operator">-</span>shu<span class="token operator">-</span>zi<span class="token operator">-</span>lcof<span class="token operator">/</span>solution<span class="token operator">/</span>mian<span class="token operator">-</span>shi<span class="token operator">-</span>ti<span class="token operator">-</span><span class="token number">53</span><span class="token operator">-</span>i<span class="token operator">-</span>zai<span class="token operator">-</span>pai<span class="token operator">-</span>xu<span class="token operator">-</span>shu<span class="token operator">-</span>zu<span class="token operator">-</span>zhong<span class="token operator">-</span>cha<span class="token operator">-</span>zha<span class="token operator">-</span><span class="token number">5</span><span class="token operator">/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 39. 数组中出现次数超过一半的数字</title>
      <link href="/2021/02/27/okr6oc/"/>
      <url>/2021/02/27/okr6oc/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-39-数组中出现次数超过一半的数字"><a href="#剑指-Offer-39-数组中出现次数超过一半的数字" class="headerlink" title="剑指 Offer 39. 数组中出现次数超过一半的数字"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/">剑指 Offer 39. 数组中出现次数超过一半的数字</a></h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> votes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>votes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">=</span> num<span class="token punctuation">;</span>            votes <span class="token operator">+=</span> num <span class="token operator">==</span> x <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> votes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>votes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> x <span class="token operator">=</span> num<span class="token punctuation">;</span>            votes <span class="token operator">+=</span> num <span class="token operator">==</span> x <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 验证 x 是否为众数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> x<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count <span class="token operator">></span> nums<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">?</span> x <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当无众数时返回 0</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：jyd</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/solution/mian-shi-ti-39-shu-zu-zhong-chu-xian-ci-shu-chao-3/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>本题常见的三种解法：</p><p><strong>哈希表统计法</strong>： 遍历数组 nums ，用 HashMap 统计各数字的数量，即可找出众数 。时间和空间复杂度 O(N) 。<br><strong>数组排序法</strong>： 将数组 nums 排序，数组中点的元素 一定为众数。<br><strong>摩尔投票法</strong>： 核心理念为 票数正负抵消 。此方法时间和空间复杂度分别为 O(N) 和 O(1) ，为本题的最佳解法。<br><strong>摩尔投票法：</strong><br>设输入数组 nums 的众数为 x ，数组长度为 n 。</p><p>推论一： 若记 众数 的票数为 +1 ，非众数 的票数为 −1 ，则一定有所有数字的 票数和 &gt;0 。</p><p>推论二： 若数组的前 a 个数字的 票数和 =0 ，则 数组剩余<br>(n−a) 个数字的 票数和一定仍 &gt;0 ，即后 (n−a) 个数字的 众数仍为 x。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>628. 三个数的最大乘积</title>
      <link href="/2021/02/27/nlaikt/"/>
      <url>/2021/02/27/nlaikt/</url>
      
        <content type="html"><![CDATA[<h3 id="628-三个数的最大乘积"><a href="#628-三个数的最大乘积" class="headerlink" title="628. 三个数的最大乘积"></a><a href="https://leetcode-cn.com/problems/maximum-product-of-three-numbers/">628. 三个数的最大乘积</a></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximumProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/maximum-product-of-three-numbers/solution/san-ge-shu-de-zui-da-cheng-ji-by-leetcod-t9sb/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>复杂度分析<br>时间复杂度：O(NlogN)，其中 N 为数组长度。排序需要 O(NlogN) 的时间。<br>空间复杂度：O(logN)，主要为排序的空间开销。</p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>首先将数组排序。<br>如果数组中全是非负数，则排序后最大的三个数相乘即为最大乘积；如果全是非正数，则最大的三个数相乘同样也为最大乘积。<br>如果数组中有正数有负数，则最大乘积既可能是三个最大正数的乘积，也可能是两个最小负数（即绝对值最大）与最大正数的乘积。<br>综上，我们在给数组排序后，分别求出三个最大正数的乘积，以及两个最小负数与最大正数的乘积，二者之间的最大值即为所求答案.</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximumProduct</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最小的和第二小的</span>        <span class="token keyword">int</span> min1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> min2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最大的、第二大的和第三大的</span>        <span class="token keyword">int</span> max1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span> max2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">,</span> max3 <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> min1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                min2 <span class="token operator">=</span> min1<span class="token punctuation">;</span>                min1 <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> min2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                min2 <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> max1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                max3 <span class="token operator">=</span> max2<span class="token punctuation">;</span>                max2 <span class="token operator">=</span> max1<span class="token punctuation">;</span>                max1 <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> max2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                max3 <span class="token operator">=</span> max2<span class="token punctuation">;</span>                max2 <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> max3<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                max3 <span class="token operator">=</span> x<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>min1 <span class="token operator">*</span> min2 <span class="token operator">*</span> max1<span class="token punctuation">,</span> max1 <span class="token operator">*</span> max2 <span class="token operator">*</span> max3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>maximum<span class="token operator">-</span>product<span class="token operator">-</span>of<span class="token operator">-</span>three<span class="token operator">-</span>numbers<span class="token operator">/</span>solution<span class="token operator">/</span>san<span class="token operator">-</span>ge<span class="token operator">-</span>shu<span class="token operator">-</span>de<span class="token operator">-</span>zui<span class="token operator">-</span>da<span class="token operator">-</span>cheng<span class="token operator">-</span>ji<span class="token operator">-</span>by<span class="token operator">-</span>leetcod<span class="token operator">-</span>t9sb<span class="token operator">/</span></code></pre><h4 id="线性扫描"><a href="#线性扫描" class="headerlink" title="线性扫描"></a>线性扫描</h4><p>实际上只要求出数组中最大的三个数以及最小的两个数，因此我们可以不用排序，用线性扫描直接得出这五个数。</p><p><strong>复杂度分析</strong></p><ul><li><p>时间复杂度：O(N)<em>O</em>(<em>N</em>)，其中 N<em>N</em> 为数组长度。我们仅需遍历数组一次。</p></li><li><p>空间复杂度：O(1)<em>O</em>(1)。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>53. 最大子序和</title>
      <link href="/2021/02/27/zgigfg/"/>
      <url>/2021/02/27/zgigfg/</url>
      
        <content type="html"><![CDATA[<h3 id="53-最大子序和"><a href="#53-最大子序和" class="headerlink" title="53. 最大子序和"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/">53. 最大子序和</a></h3><p>难度简单 2926<br>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>nums = [-2,1,-3,4,-1,2,1,-5,4]<br><strong>输出：</strong>6<br><strong>解释：</strong>连续子数组  [4,-1,2,1] 的和最大，为  6 。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxAns <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>pre <span class="token operator">+</span> x<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>            maxAns <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxAns<span class="token punctuation">,</span> pre<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> maxAns<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pre<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改为 Integer.MIN_VALUE; 就报错//0 第一次对pre 结果无影响</span>        <span class="token keyword">int</span> max<span class="token operator">=</span>Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>pre<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            max <span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>pre<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>解析：我们用  <br>f(i) 代表以第 i 个数结尾的「连续子数组的最大和」，那么很显然我们要求的答案就是：<br>0≤i≤n−1 max{f(i)}</p><p>因此我们只需要求出每个位置的  f(i)，然后返回 求出 f 数组中的最大值即可。那么我们如何求  f(i) 呢 ？<br>我们可以考虑  nums[i] 单独成为一段还是加入 f(i−1) 对应的那一段，这取决于  nums[i] 和 f(i−1)+nums[i]<br>的大小，我们希望获得一个比较大的，于是可以写出这样的动态规划转移方程：<br>f(i)=max{f(i−1)+nums[i],nums[i]}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>704. 二分查找</title>
      <link href="/2021/02/27/mmtlgf/"/>
      <url>/2021/02/27/mmtlgf/</url>
      
        <content type="html"><![CDATA[<h4 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a><a href="https://leetcode-cn.com/problems/binary-search/">704. 二分查找</a></h4><p>给定一个  n  个元素有序的（升序）整型数组  nums 和一个目标值  target  ，写一个函数搜索  nums  中的 target，如果目标值存在返回下标，否则返回 -1。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">==</span>null<span class="token operator">||</span>nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end<span class="token operator">=</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//int mid=end/2;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;=</span>end<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                end<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                start<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>复杂度:logN,1</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>509. 斐波那契数</title>
      <link href="/2021/02/27/qo06sn/"/>
      <url>/2021/02/27/qo06sn/</url>
      
        <content type="html"><![CDATA[<h3 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="509. 斐波那契数"></a><a href="https://leetcode-cn.com/problems/fibonacci-number/">509. 斐波那契数</a></h3><p><strong>斐波那契数</strong>，通常用 <code>F(n)</code> 表示，形成的序列称为 <strong>斐波那契数列</strong> 。该数列由 <code>0</code> 和 <code>1</code> 开始，后面的每一项数字都是前面两项数字的和。也就是：<br>F(0) = 0，F(1) = 1<br>F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1.<br>给你 <code>n</code> ，请计算 <code>F(n)</code> 。<br><strong>示例 1：</strong><br><strong>输入：</strong>2<br><strong>输出：</strong>1<br><strong>解释：</strong>F(2) = F(1) + F(0) = 1 + 0 = 1.</p><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> n<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> q<span class="token punctuation">;</span>            q <span class="token operator">=</span> r<span class="token punctuation">;</span>            r <span class="token operator">=</span> p <span class="token operator">+</span> q<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/fibonacci-number/solution/fei-bo-na-qi-shu-by-leetcode-solution-o4ze/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> n<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>557. 反转字符串中的单词 III</title>
      <link href="/2021/02/27/lywsgt/"/>
      <url>/2021/02/27/lywsgt/</url>
      
        <content type="html"><![CDATA[<h4 id="557-反转字符串中的单词-III"><a href="#557-反转字符串中的单词-III" class="headerlink" title="557. 反转字符串中的单词 III"></a><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string-iii/">557. 反转字符串中的单词 III</a></h4><p>难度简单 274<br>给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。<br><strong>示例：</strong><br><strong>输入：</strong>“Let’s take LeetCode contest”<br><strong>输出：</strong>“s’teL ekat edoCteeL tsetnoc”<br><strong>提示：</strong></p><ul><li>在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">reverseWords</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StringBuffer ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> start <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> start<span class="token punctuation">;</span> p <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ret<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start <span class="token operator">+</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                ret<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>reverse<span class="token operator">-</span>words<span class="token operator">-</span>in<span class="token operator">-</span>a<span class="token operator">-</span>string<span class="token operator">-</span>iii<span class="token operator">/</span>solution<span class="token operator">/</span>fan<span class="token operator">-</span>zhuan<span class="token operator">-</span>zi<span class="token operator">-</span>fu<span class="token operator">-</span>chuan<span class="token operator">-</span>zhong<span class="token operator">-</span>de<span class="token operator">-</span>dan<span class="token operator">-</span>ci<span class="token operator">-</span>iii<span class="token operator">-</span>by<span class="token operator">-</span>lee<span class="token operator">-</span><span class="token number">2</span><span class="token operator">/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre><table><thead><tr><th>557. 反转字符串中的单词 III</th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>Let’s take LeetCode contest</td><td>i</td><td>start</td><td>p</td><td>ret</td><td>start + i - 1 - p</td></tr><tr><td></td><td>0-&gt;5</td><td>0</td><td>0–&gt;4</td><td>s’teL</td><td></td></tr><tr><td></td><td>6–&gt;10</td><td>6</td><td>6–&gt;8</td><td>s’teL</td><td>6+10-1-6=9</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td>6+10-1-7=8</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td>6+10-1-8=7</td></tr><tr><td></td><td></td><td></td><td></td><td>s’teL ekat</td><td>6+10-1-9=6</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>268. 丢失的数字</title>
      <link href="/2021/02/27/mf2naa/"/>
      <url>/2021/02/27/mf2naa/</url>
      
        <content type="html"><![CDATA[<h4 id="268-丢失的数字"><a href="#268-丢失的数字" class="headerlink" title="268. 丢失的数字"></a><a href="https://leetcode-cn.com/problems/missing-number/">268. 丢失的数字</a></h4><p>给定一个包含 <code>[0, n]</code> 中 <code>n</code> 个数的数组 <code>nums</code> ，找出 <code>[0, n]</code> 这个范围内没有出现在数组中的那个数。</p><p><strong>进阶：</strong></p><ul><li>你能否实现线性时间复杂度、仅使用额外常数空间的算法解决此问题?</li></ul><p><strong>示例 1：</strong><br><strong>输入：</strong>nums = [3,0,1]<br><strong>输出：</strong>2<br><strong>解释：</strong>n = 3，因为有 3 个数字，所以所有的数字都在范围 [0,3] 内。2 是丢失的数字，因为它没有出现在 nums 中。<br><strong>示例 2：</strong><br><strong>输入：</strong>nums = [0,1]<br><strong>输出：</strong>2<br><strong>解释：</strong>n = 2，因为有 2 个数字，所以所有的数字都在范围 [0,2] 内。2 是丢失的数字，因为它没有出现在 nums 中。<br><strong>示例 3：</strong><br><strong>输入：</strong>nums = [9,6,4,2,3,5,7,0,1]<br><strong>输出：</strong>8<br><strong>解释：</strong>n = 9，因为有 9 个数字，所以所有的数字都在范围 [0,9] 内。8 是丢失的数字，因为它没有出现在 nums 中。<br><strong>示例 4：</strong><br><strong>输入：</strong>nums = [0]<br><strong>输出：</strong>1<br><strong>解释：</strong>n = 1，因为有 1 个数字，所以所有的数字都在范围 [0,1] 内。1 是丢失的数字，因为它没有出现在 nums 中。</p><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 10</code></li><li><code>0 &lt;= nums[i] &lt;= n</code></li><li><code>nums</code> 中的所有数字都 <strong>独一无二.</strong></li></ul><p>**<br>**</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断 n 是否出现在末位</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断 0 是否出现在首位</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 此时缺失的数字一定在 (0, n) 中</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> expectedNum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> expectedNum<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> expectedNum<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 未缺失任何数字（保证函数有返回值）</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作者：LeetCode</span><span class="token comment" spellcheck="true">//链接：https://leetcode-cn.com/problems/missing-number/solution/que-shi-shu-zi-by-leetcode/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>**</p><p>解析：我们对数组进行排序，随后我们可以在常数时间内判断两种特殊情况：0 没有出现在数组的首位，以及<br>n 没有出现在数组的末位。如果这两种特殊情况都不满足，那么缺失的数字一定在 0 和 n 之间（不包括两者）。此时我们可以在线性时间内扫描这个数组，如果某一个数比它前面的那个数大了超过 1，那么这两个数之间的那个数即为缺失的数字。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>543. 二叉树的直径</title>
      <link href="/2021/02/27/uao0bb/"/>
      <url>/2021/02/27/uao0bb/</url>
      
        <content type="html"><![CDATA[<h3 id="543-二叉树的直径"><a href="#543-二叉树的直径" class="headerlink" title="543. 二叉树的直径"></a><a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/">543. 二叉树的直径</a></h3><p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p><p><strong>示例 :</strong><br>给定二叉树<br>          1<br>         / <br>        2   3<br>       / \     <br>      4   5</p><p>返回 <strong>3</strong>, 它的长度是路径 [4,2,1,3] 或者  [5,2,1,3]。</p><p><strong>注意：</strong>两结点之间的路径长度是以它们之间边的数目表示。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">depth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">depth</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 访问到空节点了，返回0</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> L <span class="token operator">=</span> <span class="token function">depth</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 左儿子为根的子树的深度</span>        <span class="token keyword">int</span> R <span class="token operator">=</span> <span class="token function">depth</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 右儿子为根的子树的深度</span>        ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> L<span class="token operator">+</span>R<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计算d_node即L+R+1 并更新ans</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> R<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回该节点为根的子树的深度</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">//链接：https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/er-cha-shu-de-zhi-jing-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h4><p>首先我们知道一条路径的长度为该路径经过的节点数减一，所以求直径（即求路径长度的最大值）等效于求路径经过节点数的最大值减一。<br>而任意一条路径均可以被看作由某个节点为起点，从其左儿子和右儿子向下遍历的路径拼接得到。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>349. 两个数组的交集</title>
      <link href="/2021/02/27/rq7xc6/"/>
      <url>/2021/02/27/rq7xc6/</url>
      
        <content type="html"><![CDATA[<h4 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集"></a><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/">349. 两个数组的交集</a></h4><p>给定两个数组，编写一个函数来计算它们的交集。<br>示例 1：</p><p>输入：nums1 = [1,2,2,1], nums2 = [2,2]<br>输出：[2]<br>示例 2：</p><p>输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]<br>输出：[9,4]</p><p>说明：</p><p><strong>输出结果中的每个元素一定是唯一的。</strong><br>我们可以不考虑输出结果的顺序。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">intersection</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>nums1<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            set1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>nums2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>set1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                set2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>set2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>set2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>350. 两个数组的交集 II</title>
      <link href="/2021/02/27/waoh7q/"/>
      <url>/2021/02/27/waoh7q/</url>
      
        <content type="html"><![CDATA[<p>给定两个数组，编写一个函数来计算它们的交集。</p><p>示例 1：<br>输入：nums1 = [1,2,2,1], nums2 = [2,2]<br>输出：[2,2]<br>示例 2:<br>输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]<br>输出：[4,9]</p><p>说明：<br>输出结果中每个元素出现的次数，应与元素在两个数组中出现次数的最小值一致。<br>我们可以不考虑输出结果的顺序。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">intersect</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">.</span>length <span class="token operator">></span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">intersect</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span> nums1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums1<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intersection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                intersection<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>                count<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>intersection<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>intersection<span class="token operator">-</span>of<span class="token operator">-</span>two<span class="token operator">-</span>arrays<span class="token operator">-</span>ii<span class="token operator">/</span>solution<span class="token operator">/</span>liang<span class="token operator">-</span>ge<span class="token operator">-</span>shu<span class="token operator">-</span>zu<span class="token operator">-</span>de<span class="token operator">-</span>jiao<span class="token operator">-</span>ji<span class="token operator">-</span>ii<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>21. 合并两个有序链表</title>
      <link href="/2021/02/27/afagka/"/>
      <url>/2021/02/27/afagka/</url>
      
        <content type="html"><![CDATA[<h4 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">21. 合并两个有序链表</a></h4><p><strong>输入：</strong>l1 = [1,2,4], l2 = [1,3,4]<br><strong>输出：</strong>[1,1,2,3,4,4]</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode &amp;#123; *     int val; *     ListNode next; *     ListNode() &amp;#123;&amp;#125; *     ListNode(int val) &amp;#123; this.val = val; &amp;#125; *     ListNode(int val, ListNode next) &amp;#123; this.val = val; this.next = next; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">//链接：https://leetcode-cn.com/problems/merge-two-sorted-lists/solution/he-bing-liang-ge-you-xu-lian-biao-by-leetcode-solu/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>70.爬楼梯</title>
      <link href="/2021/02/27/gy7sh8/"/>
      <url>/2021/02/27/gy7sh8/</url>
      
        <content type="html"><![CDATA[<h4 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode-cn.com/problems/climbing-stairs/">70. 爬楼梯</a></h4><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> q<span class="token punctuation">;</span>            q <span class="token operator">=</span> r<span class="token punctuation">;</span>            r <span class="token operator">=</span> p <span class="token operator">+</span> q<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：guanpengchn链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>climbing<span class="token operator">-</span>stairs<span class="token operator">/</span>solution<span class="token operator">/</span>hua<span class="token operator">-</span>jie<span class="token operator">-</span>suan<span class="token operator">-</span>fa<span class="token operator">-</span><span class="token number">70</span><span class="token operator">-</span>pa<span class="token operator">-</span>lou<span class="token operator">-</span>ti<span class="token operator">-</span>by<span class="token operator">-</span>guanpengchn<span class="token operator">/</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>415. 字符串相加</title>
      <link href="/2021/02/27/lnmnog/"/>
      <url>/2021/02/27/lnmnog/</url>
      
        <content type="html"><![CDATA[<p>categories: [Blog,Algorithm]</p><p>####</p><hr><p>####</p><h4 id="415-字符串相加"><a href="#415-字符串相加" class="headerlink" title="415. 字符串相加"></a><a href="https://leetcode-cn.com/problems/add-strings/">415. 字符串相加</a></h4><p>难度简单 320<br>给定两个字符串形式的非负整数 <code>num1</code> 和<code>num2</code> ，计算它们的和。</p><p><strong>提示：</strong></p><ol><li><code>num1</code> 和<code>num2</code> 的长度都小于 5100</li><li><code>num1</code> 和<code>num2</code> 都只包含数字 <code>0-9</code></li><li><code>num1</code> 和<code>num2</code> 都不包含任何前导零</li><li><strong>你不能使用任何內建 BigInteger 库，  也不能直接将输入的字符串转换为整数形式。</strong></li></ol><h4 id="415-字符串相加-1"><a href="#415-字符串相加-1" class="headerlink" title="415. 字符串相加"></a><a href="https://leetcode-cn.com/problems/add-strings/">415. 字符串相加</a></h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">addStrings</span><span class="token punctuation">(</span>String num1<span class="token punctuation">,</span> String num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> add <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        StringBuffer ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> add <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> num1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">///长度不一样</span>            <span class="token keyword">int</span> y <span class="token operator">=</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> num2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> result <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> add<span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>result <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            add <span class="token operator">=</span> result <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算完以后的答案需要翻转过来</span>        ans<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/add-strings/solution/zi-fu-chuan-xiang-jia-by-leetcode-solution/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>459. 重复的子字符串</title>
      <link href="/2021/02/27/fan17t/"/>
      <url>/2021/02/27/fan17t/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/repeated-substring-pattern/solution/zhong-fu-de-zi-zi-fu-chuan-by-leetcode-solution/">https://leetcode-cn.com/problems/repeated-substring-pattern/solution/zhong-fu-de-zi-zi-fu-chuan-by-leetcode-solution/</a></p><h4 id="459-重复的子字符串"><a href="#459-重复的子字符串" class="headerlink" title="459. 重复的子字符串"></a><a href="https://leetcode-cn.com/problems/repeated-substring-pattern/">459. 重复的子字符串</a></h4><p><strong>示例 1:</strong><br><strong>输入:</strong> “abab”<br><strong>输出:</strong> True<br><strong>解释:</strong> 可由子字符串 “ab” 重复两次构成。<br>给定的字符串只含有小写英文字母。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1. 两数之和</title>
      <link href="/2021/02/27/qg2dgc/"/>
      <url>/2021/02/27/qg2dgc/</url>
      
        <content type="html"><![CDATA[<h4 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a></h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>i<span class="token punctuation">,</span> j<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hashtable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>hashtable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//链接：https://leetcode-cn.com/problems/two-sum/solution/liang-shu-zhi-he-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>136. 只出现一次的数字</title>
      <link href="/2021/02/27/nlagm1/"/>
      <url>/2021/02/27/nlagm1/</url>
      
        <content type="html"><![CDATA[<h4 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a><a href="https://leetcode-cn.com/problems/single-number/">136. 只出现一次的数字</a></h4><p>难度简单 1712<br>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。<br><strong>说明：</strong><br>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？<br><strong>示例 1:</strong><br><strong>输入:</strong> [2,2,1]<br><strong>输出:</strong> 1</p><p><strong>示例  2:</strong><br><strong>输入:</strong> [4,1,2,1,2]<br><strong>输出:</strong> 4</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> single <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            single <span class="token operator">^=</span> num<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> single<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>single<span class="token operator">-</span>number<span class="token operator">/</span>solution<span class="token operator">/</span>zhi<span class="token operator">-</span>chu<span class="token operator">-</span>xian<span class="token operator">-</span>yi<span class="token operator">-</span>ci<span class="token operator">-</span>de<span class="token operator">-</span>shu<span class="token operator">-</span>zi<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>617. 合并二叉树</title>
      <link href="/2021/02/27/xwp2rg/"/>
      <url>/2021/02/27/xwp2rg/</url>
      
        <content type="html"><![CDATA[<h3 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617. 合并二叉树"></a><a href="https://leetcode-cn.com/problems/merge-two-binary-trees/">617. 合并二叉树</a></h3><p><strong>相应位置数字相加。</strong><br>输入:<br>Tree 1                     Tree 2                  <br>         1                         2                            <br>        / \                       / \                            <br>       3   2                     1   3                        <br>      /                           \   \                      <br>     5                             4   7                  <br>输出:<br>合并后的树:<br>     3<br>    / <br>    4   5<br>  / \   <br> 5   4   7</p><h4 id="深度遍历"><a href="#深度遍历" class="headerlink" title="深度遍历"></a>深度遍历</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> TreeNode <span class="token function">mergeTrees</span><span class="token punctuation">(</span>TreeNode t1<span class="token punctuation">,</span> TreeNode t2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t1 <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> t2<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t2 <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> t1<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        TreeNode merged <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>val <span class="token operator">+</span> t2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        merged<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        merged<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> merged<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/merge-two-binary-trees/solution/he-bing-er-cha-shu-by-leetcode-solution/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> TreeNode <span class="token function">mergeTrees</span><span class="token punctuation">(</span>TreeNode t1<span class="token punctuation">,</span> TreeNode t2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t1 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> t2<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t2 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> t1<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        TreeNode merged <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>val <span class="token operator">+</span> t2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>merged<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue1<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue2<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>queue2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node1 <span class="token operator">=</span> queue1<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> node2 <span class="token operator">=</span> queue2<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TreeNode left1 <span class="token operator">=</span> node1<span class="token punctuation">.</span>left<span class="token punctuation">,</span> left2 <span class="token operator">=</span> node2<span class="token punctuation">.</span>left<span class="token punctuation">,</span> right1 <span class="token operator">=</span> node1<span class="token punctuation">.</span>right<span class="token punctuation">,</span> right2 <span class="token operator">=</span> node2<span class="token punctuation">.</span>right<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left1 <span class="token operator">!=</span> null <span class="token operator">||</span> left2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>left1 <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> left2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    TreeNode left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>left1<span class="token punctuation">.</span>val <span class="token operator">+</span> left2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                    node<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue1<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>left1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue2<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>left2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left1 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    node<span class="token punctuation">.</span>left <span class="token operator">=</span> left1<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    node<span class="token punctuation">.</span>left <span class="token operator">=</span> left2<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>right1 <span class="token operator">!=</span> null <span class="token operator">||</span> right2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>right1 <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> right2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    TreeNode right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>right1<span class="token punctuation">.</span>val <span class="token operator">+</span> right2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                    node<span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue1<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>right1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    queue2<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>right2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>right1 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    node<span class="token punctuation">.</span>right <span class="token operator">=</span> right1<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    node<span class="token punctuation">.</span>right <span class="token operator">=</span> right2<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> merged<span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>merge<span class="token operator">-</span>two<span class="token operator">-</span>binary<span class="token operator">-</span>trees<span class="token operator">/</span>solution<span class="token operator">/</span>he<span class="token operator">-</span>bing<span class="token operator">-</span>er<span class="token operator">-</span>cha<span class="token operator">-</span>shu<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>242. 有效的字母异位词</title>
      <link href="/2021/02/27/trdg6u/"/>
      <url>/2021/02/27/trdg6u/</url>
      
        <content type="html"><![CDATA[<h4 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242. 有效的字母异位词"></a><a href="https://leetcode-cn.com/problems/valid-anagram/">242. 有效的字母异位词</a></h4><p>难度简单 347<br>给定两个字符串 <em>s</em> 和 <em>t</em> ，编写一个函数来判断 <em>t</em> 是否是 <em>s</em> 的字母异位词。<br><strong>示例  1:</strong><br><strong>输入:</strong> <em>s</em> = “anagram”, <em>t</em> = “nagaram”<br><strong>输出:</strong> true</p><p><strong>示例 2:</strong><br><strong>输入:</strong> <em>s</em> = “rat”, <em>t</em> = “car”<br><strong>输出: **false<br>**说明:</strong><br>你可以假设字符串只包含小写字母。<br><strong>进阶:</strong><br>如果输入字符串包含 <strong>unicode</strong> 字符怎么办？你能否调整你的解法来应对这种情况？</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> table<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>valid<span class="token operator">-</span>anagram<span class="token operator">/</span>solution<span class="token operator">/</span>you<span class="token operator">-</span>xiao<span class="token operator">-</span>de<span class="token operator">-</span>zi<span class="token operator">-</span>mu<span class="token operator">-</span>yi<span class="token operator">-</span>wei<span class="token operator">-</span>ci<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str2 <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Arrays<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>valid<span class="token operator">-</span>anagram<span class="token operator">/</span>solution<span class="token operator">/</span>you<span class="token operator">-</span>xiao<span class="token operator">-</span>de<span class="token operator">-</span>zi<span class="token operator">-</span>mu<span class="token operator">-</span>yi<span class="token operator">-</span>wei<span class="token operator">-</span>ci<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            table<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            table<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token punctuation">[</span>t<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>valid<span class="token operator">-</span>anagram<span class="token operator">/</span>solution<span class="token operator">/</span>you<span class="token operator">-</span>xiao<span class="token operator">-</span>de<span class="token operator">-</span>zi<span class="token operator">-</span>mu<span class="token operator">-</span>yi<span class="token operator">-</span>wei<span class="token operator">-</span>ci<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 10- II. 青蛙跳台阶问题</title>
      <link href="/2021/02/27/gtqlca/"/>
      <url>/2021/02/27/gtqlca/</url>
      
        <content type="html"><![CDATA[<h3 id="剑指-Offer-10-II-青蛙跳台阶问题"><a href="#剑指-Offer-10-II-青蛙跳台阶问题" class="headerlink" title="剑指 Offer 10- II. 青蛙跳台阶问题"></a><a href="https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/">剑指 Offer 10- II. 青蛙跳台阶问题</a></h3><h4 id="记忆化递归"><a href="#记忆化递归" class="headerlink" title="记忆化递归"></a>记忆化递归</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memo<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numWays</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// f0=1;//0</span>        <span class="token comment" spellcheck="true">// f1=1;</span>        <span class="token comment" spellcheck="true">// f2=f1+f0;//1</span>        <span class="token comment" spellcheck="true">// f3=f2+f1;</span>        <span class="token comment" spellcheck="true">// f4=f2+f3;</span>        memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">jump</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用到缓存</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">jump</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">jump</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> 1000_000_007<span class="token punctuation">;</span>        <span class="token keyword">return</span> memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>时间复杂度 O(n)，空间复杂度 O(n)。</p><h4 id="动态规划-1"><a href="#动态规划-1" class="headerlink" title="动态规划 1 "></a>动态规划 1 </h4><pre class=" language-java"><code class="language-java">      <span class="token comment" spellcheck="true">//动态规划</span>     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numWays</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> 1000_000_007<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>时间复杂度 O(n)，空间复杂度 O(n)。<br><a href="https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/solution/mian-shi-ti-10-ii-qing-wa-tiao-tai-jie-wen-ti-dong/">https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/solution/mian-shi-ti-10-ii-qing-wa-tiao-tai-jie-wen-ti-dong/</a></p><h4 id="动态规划-2"><a href="#动态规划-2" class="headerlink" title="动态规划 2"></a>动态规划 2</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numWays</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> cur <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>pre <span class="token operator">+</span> cur<span class="token punctuation">)</span> <span class="token operator">%</span> 1000_000_007<span class="token punctuation">;</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>O(1)空间复杂度的动态规划。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>559. N 叉树的最大深度</title>
      <link href="/2021/02/27/sk4ntf/"/>
      <url>/2021/02/27/sk4ntf/</url>
      
        <content type="html"><![CDATA[<h4 id="559-N-叉树的最大深度"><a href="#559-N-叉树的最大深度" class="headerlink" title="559. N 叉树的最大深度"></a><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/">559. N 叉树的最大深度</a></h4><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> heights <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>Node item <span class="token operator">:</span> root<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        heights<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>heights<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>Node<span class="token operator">></span> que<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> depth<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            que<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>que<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> size<span class="token operator">=</span>que<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            depth<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Node node<span class="token operator">=</span>que<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                que<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>Node val<span class="token operator">:</span>node<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        que<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> depth<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Queue<span class="token operator">&lt;</span>Pair<span class="token operator">&lt;</span>Node<span class="token punctuation">,</span> Integer<span class="token operator">>></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      Pair<span class="token operator">&lt;</span>Node<span class="token punctuation">,</span> Integer<span class="token operator">></span> current <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      root <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> current_depth <span class="token operator">=</span> current<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        depth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> current_depth<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node c <span class="token operator">:</span> root<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> current_depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> depth<span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作者：LeetCode</span><span class="token comment" spellcheck="true">//链接：https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/solution/ncha-shu-de-zui-da-shen-du-by-leetcode/</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node child <span class="token operator">:</span> root<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 09. 用两个栈实现队列</title>
      <link href="/2021/02/26/prceu7/"/>
      <url>/2021/02/26/prceu7/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-09-用两个栈实现队列"><a href="#剑指-Offer-09-用两个栈实现队列" class="headerlink" title="剑指 Offer 09. 用两个栈实现队列"></a><a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/">剑指 Offer 09. 用两个栈实现队列</a></h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CQueue</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack1<span class="token punctuation">;</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack2<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">appendTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果第二个栈为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> deleteItem <span class="token operator">=</span> stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> deleteItem<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/solution/mian-shi-ti-09-yong-liang-ge-zhan-shi-xian-dui-l-3/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>387. 字符串中的第一个唯一字符</title>
      <link href="/2021/02/26/umnpvq/"/>
      <url>/2021/02/26/umnpvq/</url>
      
        <content type="html"><![CDATA[<h4 id="387-字符串中的第一个唯一字符"><a href="#387-字符串中的第一个唯一字符" class="headerlink" title="387. 字符串中的第一个唯一字符"></a><a href="https://leetcode-cn.com/problems/first-unique-character-in-a-string/">387. 字符串中的第一个唯一字符</a></h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> frequency <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            frequency<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> frequency<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>frequency<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>first<span class="token operator">-</span>unique<span class="token operator">-</span>character<span class="token operator">-</span>in<span class="token operator">-</span>a<span class="token operator">-</span>string<span class="token operator">/</span>solution<span class="token operator">/</span>zi<span class="token operator">-</span>fu<span class="token operator">-</span>chuan<span class="token operator">-</span>zhong<span class="token operator">-</span>de<span class="token operator">-</span>di<span class="token operator">-</span>yi<span class="token operator">-</span>ge<span class="token operator">-</span>wei<span class="token operator">-</span>yi<span class="token operator">-</span>zi<span class="token operator">-</span>x9rok<span class="token operator">/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> position <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>Pair<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Pair<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>position<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                position<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                position<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将队列头部重复的数据移除</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> position<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ch<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pos<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Pair</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> ch<span class="token punctuation">;</span>        <span class="token keyword">int</span> pos<span class="token punctuation">;</span>        <span class="token function">Pair</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>ch <span class="token operator">=</span> ch<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>pos <span class="token operator">=</span> pos<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>first<span class="token operator">-</span>unique<span class="token operator">-</span>character<span class="token operator">-</span>in<span class="token operator">-</span>a<span class="token operator">-</span>string<span class="token operator">/</span>solution<span class="token operator">/</span>zi<span class="token operator">-</span>fu<span class="token operator">-</span>chuan<span class="token operator">-</span>zhong<span class="token operator">-</span>de<span class="token operator">-</span>di<span class="token operator">-</span>yi<span class="token operator">-</span>ge<span class="token operator">-</span>wei<span class="token operator">-</span>yi<span class="token operator">-</span>zi<span class="token operator">-</span>x9rok<span class="token operator">/</span></code></pre><p>解析<br><strong>小贴士</strong></p><p>在维护队列时，我们使用了「延迟删除」这一技巧。也就是说，即使队列中有一些字符出现了超过一次，但它只要不位于队首，那么就不会对答案造成影响，我们也就可以不用去删除它。只有当它前面的所有字符被移出队列，它成为队首时，我们才需要将它移除。<br>链接：<a href="https://leetcode-cn.com/problems/first-unique-character-in-a-string/solution/zi-fu-chuan-zhong-de-di-yi-ge-wei-yi-zi-x9rok/">https://leetcode-cn.com/problems/first-unique-character-in-a-string/solution/zi-fu-chuan-zhong-de-di-yi-ge-wei-yi-zi-x9rok/</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>215. 数组中的第K个最大元素</title>
      <link href="/2021/02/26/vg1g4k/"/>
      <url>/2021/02/26/vg1g4k/</url>
      
        <content type="html"><![CDATA[<h4 id="215-数组中的第-K-个最大元素"><a href="#215-数组中的第-K-个最大元素" class="headerlink" title="215. 数组中的第 K 个最大元素"></a><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">215. 数组中的第 K 个最大元素</a></h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> heapSize <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">--</span>heapSize<span class="token punctuation">;</span>            <span class="token function">maxHeapify</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> heapSize<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> heapSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">maxHeapify</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">,</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">maxHeapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> heapSize<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> largest <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> heapSize <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            largest <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> heapSize <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            largest <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>largest <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">,</span> largest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">maxHeapify</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> largest<span class="token punctuation">,</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>kth<span class="token operator">-</span>largest<span class="token operator">-</span>element<span class="token operator">-</span>in<span class="token operator">-</span>an<span class="token operator">-</span>array<span class="token operator">/</span>solution<span class="token operator">/</span>shu<span class="token operator">-</span>zu<span class="token operator">-</span>zhong<span class="token operator">-</span>de<span class="token operator">-</span>di<span class="token operator">-</span>kge<span class="token operator">-</span>zui<span class="token operator">-</span>da<span class="token operator">-</span>yuan<span class="token operator">-</span>su<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span><span class="token operator">/</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 40. 最小的k个数</title>
      <link href="/2021/02/26/inczhx/"/>
      <url>/2021/02/26/inczhx/</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-40-最小的-k-个数"><a href="#剑指-Offer-40-最小的-k-个数" class="headerlink" title="剑指 Offer 40. 最小的 k 个数"></a><a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/">剑指 Offer 40. 最小的 k 个数</a></h2><h4 id="常规法"><a href="#常规法" class="headerlink" title="常规法"></a>常规法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getLeastNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> vec<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>zui<span class="token operator">-</span>xiao<span class="token operator">-</span>de<span class="token operator">-</span>kge<span class="token operator">-</span>shu<span class="token operator">-</span>lcof<span class="token operator">/</span>solution<span class="token operator">/</span>zui<span class="token operator">-</span>xiao<span class="token operator">-</span>de<span class="token operator">-</span>kge<span class="token operator">-</span>shu<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getLeastNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> vec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 排除 0 的情况</span>            <span class="token keyword">return</span> vec<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        PriorityQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Integer num1<span class="token punctuation">,</span> Integer num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> num2 <span class="token operator">-</span> num1<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> vec<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>zui<span class="token operator">-</span>xiao<span class="token operator">-</span>de<span class="token operator">-</span>kge<span class="token operator">-</span>shu<span class="token operator">-</span>lcof<span class="token operator">/</span>solution<span class="token operator">/</span>zui<span class="token operator">-</span>xiao<span class="token operator">-</span>de<span class="token operator">-</span>kge<span class="token operator">-</span>shu<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getLeastNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用一个最大堆（大顶堆）</span>        <span class="token comment" spellcheck="true">// Java 的 PriorityQueue 默认是小顶堆，添加 comparator 参数使其变成最大堆</span>        Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> heap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>i2<span class="token punctuation">,</span> i1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> e <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 当前数字小于堆顶元素才会入堆</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> k <span class="token operator">||</span> e <span class="token operator">&lt;</span> heap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                heap<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                heap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除堆顶最大元素</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将堆中的元素存入数组</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>heap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> e <span class="token operator">:</span> heap<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：nettee</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/solution/tu-jie-top-k-wen-ti-de-liang-chong-jie-fa-you-lie-/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="Arrays-sort"><a href="#Arrays-sort" class="headerlink" title="_Arrays.sort() _"></a>_Arrays.sort() _</h4><p><em>时间复杂度 n_log_n</em><br>_<br>堆，时间复杂度  O(nlog⁡k)。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 10- I. 斐波那契数列</title>
      <link href="/2021/02/26/vbsq32/"/>
      <url>/2021/02/26/vbsq32/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-10-I-斐波那契数列"><a href="#剑指-Offer-10-I-斐波那契数列" class="headerlink" title="剑指 Offer 10- I. 斐波那契数列"></a><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/">剑指 Offer 10- I. 斐波那契数列</a></h4><p>写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。斐波那契数列的定义如下：<br>F(0) = 0,   F(1) = 1<br>F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.<br>斐波那契数列由 0 和 1 开始，之后的斐波那契数就是由之前的两数相加而得出。<br>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> n<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> sum<span class="token punctuation">;</span>            sum <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>110. 平衡二叉树</title>
      <link href="/2021/02/26/igosku/"/>
      <url>/2021/02/26/igosku/</url>
      
        <content type="html"><![CDATA[<h4 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110. 平衡二叉树"></a><a href="https://leetcode-cn.com/problems/balanced-binary-tree/">110. 平衡二叉树</a></h4><p>给定一个二叉树，判断它是否是高度平衡的二叉树。<br>本题中，一棵<strong>高度平衡二叉树</strong>定义为：</p><blockquote><p>一个二叉树*每个节点  *的左右两个子树的高度差的绝对值不超过 1 。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">height</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/balanced-binary-tree/solution/ping-heng-er-cha-shu-by-leetcode-solution/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">height</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftHeight <span class="token operator">=</span> <span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rightHeight <span class="token operator">=</span> <span class="token function">height</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftHeight <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> rightHeight <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>leftHeight <span class="token operator">-</span> rightHeight<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftHeight<span class="token punctuation">,</span> rightHeight<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/balanced-binary-tree/solution/ping-heng-er-cha-shu-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>142. 环形链表 II</title>
      <link href="/2021/02/26/kwfg4r/"/>
      <url>/2021/02/26/kwfg4r/</url>
      
        <content type="html"><![CDATA[<h4 id="142-环形链表-II"><a href="#142-环形链表-II" class="headerlink" title="142. 环形链表 II"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II</a></h4><p>给定一个链表，返回链表开始入环的第一个节点。  如果链表无环，则返回  <code>null</code>。</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> ListNode <span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ListNode slow <span class="token operator">=</span> head<span class="token punctuation">,</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ListNode ptr <span class="token operator">=</span> head<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>ptr <span class="token operator">!=</span> slow<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    ptr <span class="token operator">=</span> ptr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> ptr<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>linked<span class="token operator">-</span>list<span class="token operator">-</span>cycle<span class="token operator">-</span>ii<span class="token operator">/</span>solution<span class="token operator">/</span>huan<span class="token operator">-</span>xing<span class="token operator">-</span>lian<span class="token operator">-</span>biao<span class="token operator">-</span>ii<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>121. 买卖股票的最佳时机</title>
      <link href="/2021/02/26/ovbgbc/"/>
      <url>/2021/02/26/ovbgbc/</url>
      
        <content type="html"><![CDATA[<h3 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a></h3><h4 id="暴力-超时"><a href="#暴力-超时" class="headerlink" title="暴力-超时"></a>暴力-超时</h4><p>n&lt;2&gt;</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                res<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>cur<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="一次遍历"><a href="#一次遍历" class="headerlink" title="一次遍历"></a>一次遍历</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min<span class="token operator">=</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                min<span class="token operator">=</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            res<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>min<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 48. 最长不含重复字符的子字符串</title>
      <link href="/2021/02/26/qxdw92/"/>
      <url>/2021/02/26/qxdw92/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-48-最长不含重复字符的子字符串"><a href="#剑指-Offer-48-最长不含重复字符的子字符串" class="headerlink" title="剑指 Offer 48. 最长不含重复字符的子字符串"></a><a href="https://leetcode-cn.com/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof/">剑指 Offer 48. 最长不含重复字符的子字符串</a></h4><pre class=" language-java"><code class="language-java">        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> dic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> dic<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 更新左指针 i</span>            dic<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 哈希表记录</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> j <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 更新结果</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>作者：jyd链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>zui<span class="token operator">-</span>chang<span class="token operator">-</span>bu<span class="token operator">-</span>han<span class="token operator">-</span>zhong<span class="token operator">-</span>fu<span class="token operator">-</span>zi<span class="token operator">-</span>fu<span class="token operator">-</span>de<span class="token operator">-</span>zi<span class="token operator">-</span>zi<span class="token operator">-</span>fu<span class="token operator">-</span>chuan<span class="token operator">-</span>lcof<span class="token operator">/</span>solution<span class="token operator">/</span>mian<span class="token operator">-</span>shi<span class="token operator">-</span>ti<span class="token operator">-</span><span class="token number">48</span><span class="token operator">-</span>zui<span class="token operator">-</span>chang<span class="token operator">-</span>bu<span class="token operator">-</span>han<span class="token operator">-</span>zhong<span class="token operator">-</span>fu<span class="token operator">-</span>zi<span class="token operator">-</span>fu<span class="token operator">-</span>d<span class="token operator">-</span><span class="token number">9</span><span class="token operator">/</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>225. 用队列实现栈</title>
      <link href="/2021/02/26/xak9rz/"/>
      <url>/2021/02/26/xak9rz/</url>
      
        <content type="html"><![CDATA[<h4 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a><a href="https://leetcode-cn.com/problems/implement-stack-using-queues/">225. 用队列实现栈</a></h4><pre class=" language-java"><code class="language-java">    Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Initialize your data structure here. */</span>    <span class="token keyword">public</span> <span class="token function">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Push element x onto stack. */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">///头出尾进</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Removes the element on top of the stack and returns that element. */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Get the top element. */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** Returns whether the stack is empty. */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>implement<span class="token operator">-</span>stack<span class="token operator">-</span>using<span class="token operator">-</span>queues<span class="token operator">/</span>solution<span class="token operator">/</span>yong<span class="token operator">-</span>dui<span class="token operator">-</span>lie<span class="token operator">-</span>shi<span class="token operator">-</span>xian<span class="token operator">-</span>zhan<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span>来源：力扣（LeetCode）著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>todo</title>
      <link href="/2021/02/26/vnguui/"/>
      <url>/2021/02/26/vnguui/</url>
      
        <content type="html"><![CDATA[<h1 id="Arrays-sort-使用的排序算法-amp-时间复杂度。"><a href="#Arrays-sort-使用的排序算法-amp-时间复杂度。" class="headerlink" title="Arrays.sort 使用的排序算法&amp;时间复杂度。"></a>Arrays.sort 使用的排序算法&amp;时间复杂度。</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>88. 合并两个有序数组</title>
      <link href="/2021/02/26/dp87w4/"/>
      <url>/2021/02/26/dp87w4/</url>
      
        <content type="html"><![CDATA[<h4 id="88-合并两个有序数组"><a href="#88-合并两个有序数组" class="headerlink" title="88. 合并两个有序数组"></a><a href="https://leetcode-cn.com/problems/merge-sorted-array/">88. 合并两个有序数组</a></h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// two get pointers for nums1 and nums2</span>        <span class="token keyword">int</span> p1 <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p2 <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// set pointer for nums1</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// while there are still elements to compare</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p1 <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>p2 <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// compare two elements from nums1 and nums2</span>        <span class="token comment" spellcheck="true">// and add the largest one in nums1</span>        nums1<span class="token punctuation">[</span>p<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> nums2<span class="token punctuation">[</span>p2<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">:</span> nums1<span class="token punctuation">[</span>p1<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// add missing elements from nums2</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> p2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">///上面减1了，移动元素的个数。</span><span class="token comment" spellcheck="true">// 作者：LeetCode</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/merge-sorted-array/solution/he-bing-liang-ge-you-xu-shu-zu-by-leetcode/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移动元素的个数</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>25. Reverse Nodes in k-Group</title>
      <link href="/2021/02/25/kicvr9/"/>
      <url>/2021/02/25/kicvr9/</url>
      
        <content type="html"><![CDATA[<h4 id="25-Reverse-Nodes-in-k-Group"><a href="#25-Reverse-Nodes-in-k-Group" class="headerlink" title="25. Reverse Nodes in k-Group"></a><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/">25. Reverse Nodes in k-Group</a></h4><p>k 个一组反转链表</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode hair <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hair<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode pre <span class="token operator">=</span> hair<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ListNode tail <span class="token operator">=</span> pre<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 查看剩余部分长度是否大于等于 k</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                tail <span class="token operator">=</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> hair<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            ListNode nex <span class="token operator">=</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> reverse <span class="token operator">=</span> <span class="token function">myReverse</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> reverse<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            tail <span class="token operator">=</span> reverse<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 把子链表重新接回原链表</span>            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>            tail<span class="token punctuation">.</span>next <span class="token operator">=</span> nex<span class="token punctuation">;</span>            pre <span class="token operator">=</span> tail<span class="token punctuation">;</span>            head <span class="token operator">=</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hair<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">myReverse</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> ListNode tail<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode prev <span class="token operator">=</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        ListNode p <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>prev <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ListNode nex <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            p<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>            prev <span class="token operator">=</span> p<span class="token punctuation">;</span>            p <span class="token operator">=</span> nex<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>tail<span class="token punctuation">,</span> head<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>reverse<span class="token operator">-</span>nodes<span class="token operator">-</span>in<span class="token operator">-</span>k<span class="token operator">-</span>group<span class="token operator">/</span>solution<span class="token operator">/</span>k<span class="token operator">-</span>ge<span class="token operator">-</span>yi<span class="token operator">-</span>zu<span class="token operator">-</span>fan<span class="token operator">-</span>zhuan<span class="token operator">-</span>lian<span class="token operator">-</span>biao<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solutio<span class="token operator">/</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>206. Reverse Linked List</title>
      <link href="/2021/02/25/oayupi/"/>
      <url>/2021/02/25/oayupi/</url>
      
        <content type="html"><![CDATA[<h4 id="206-Reverse-Linked-List"><a href="#206-Reverse-Linked-List" class="headerlink" title="206. Reverse Linked List"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. Reverse Linked List</a></h4><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode pre<span class="token operator">=</span>null<span class="token punctuation">;</span>        ListNode cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ListNode next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>            cur<span class="token operator">=</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ListNode newHead <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>fan<span class="token operator">-</span>zhuan<span class="token operator">-</span>lian<span class="token operator">-</span>biao<span class="token operator">-</span>lcof<span class="token operator">/</span>solution<span class="token operator">/</span>fan<span class="token operator">-</span>zhuan<span class="token operator">-</span>lian<span class="token operator">-</span>biao<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">-</span>jvs5<span class="token operator">/</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>322. 零钱兑换</title>
      <link href="/2021/02/25/ziumsq/"/>
      <url>/2021/02/25/ziumsq/</url>
      
        <content type="html"><![CDATA[<h4 id="322-零钱兑换"><a href="#322-零钱兑换" class="headerlink" title="322. 零钱兑换"></a><a href="https://leetcode-cn.com/problems/coin-change/">322. 零钱兑换</a></h4><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自底向上的动态规划</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>coins<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// memo[n]的值： 表示的凑成总金额为n所需的最少的硬币个数</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给memo赋初值，最多的硬币数就是全部使用面值1的硬币进行换</span>        <span class="token comment" spellcheck="true">// amount + 1 是不可能达到的换取数量，于是使用其进行填充</span>        Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>memo<span class="token punctuation">,</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        memo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// memo[i]有两种实现的方式，</span>                    <span class="token comment" spellcheck="true">// 一种是包含当前的coins[i],那么剩余钱就是 i-coins[i],这种操作要兑换的硬币数是 memo[i-coins[j]] + 1</span>                    <span class="token comment" spellcheck="true">// 另一种就是不包含，要兑换的硬币数是memo[i]</span>                    memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>memo<span class="token punctuation">[</span>i<span class="token operator">-</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> memo<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> memo<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作者：sugar666</span><span class="token comment" spellcheck="true">//链接：https://leetcode-cn.com/problems/coin-change/solution/javadi-gui-ji-yi-hua-sou-suo-dong-tai-gui-hua-by-s/</span></code></pre><h4 id="记忆法"><a href="#记忆法" class="headerlink" title="记忆法"></a>记忆法</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> memo<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>coins<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        memo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">findWay</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// memo[n] 表示钱币n可以被换取的最少的硬币数，不能换取就为-1</span>    <span class="token comment" spellcheck="true">// findWay函数的目的是为了找到 amount数量的零钱可以兑换的最少硬币数量，返回其值int</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findWay</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">,</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>amount <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>amount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 记忆化的处理，memo[n]用赋予了值，就不用继续下面的循环</span>        <span class="token comment" spellcheck="true">// 直接的返回memo[n] 的最优值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>memo<span class="token punctuation">[</span>amount<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> memo<span class="token punctuation">[</span>amount<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">findWay</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span>amount<span class="token operator">-</span>coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> res <span class="token operator">&lt;</span> min<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                min <span class="token operator">=</span> res <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 加1，是为了加上得到res结果的那个步骤中，兑换的一个硬币...</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        memo<span class="token punctuation">[</span>amount<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>min <span class="token operator">==</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> memo<span class="token punctuation">[</span>amount<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：sugar666链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>coin<span class="token operator">-</span>change<span class="token operator">/</span>solution<span class="token operator">/</span>javadi<span class="token operator">-</span>gui<span class="token operator">-</span>ji<span class="token operator">-</span>yi<span class="token operator">-</span>hua<span class="token operator">-</span>sou<span class="token operator">-</span>suo<span class="token operator">-</span>dong<span class="token operator">-</span>tai<span class="token operator">-</span>gui<span class="token operator">-</span>hua<span class="token operator">-</span>by<span class="token operator">-</span>s<span class="token operator">/</span></code></pre><h4 id="递归-超时"><a href="#递归-超时" class="headerlink" title="递归 超时"></a>递归 超时</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span> res <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>coins<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">findWay</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span>amount<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果没有任何一种硬币组合能组成总金额，返回 -1。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">==</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findWay</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">,</span><span class="token keyword">int</span> amount<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>amount <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>amount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">findWay</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span>amount<span class="token operator">-</span>coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：sugar666链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>coin<span class="token operator">-</span>change<span class="token operator">/</span>solution<span class="token operator">/</span>javadi<span class="token operator">-</span>gui<span class="token operator">-</span>ji<span class="token operator">-</span>yi<span class="token operator">-</span>hua<span class="token operator">-</span>sou<span class="token operator">-</span>suo<span class="token operator">-</span>dong<span class="token operator">-</span>tai<span class="token operator">-</span>gui<span class="token operator">-</span>hua<span class="token operator">-</span>by<span class="token operator">-</span>s<span class="token operator">/</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>172. 阶乘后的零</title>
      <link href="/2021/02/25/gwpq56/"/>
      <url>/2021/02/25/gwpq56/</url>
      
        <content type="html"><![CDATA[<h4 id="172-阶乘后的零"><a href="#172-阶乘后的零" class="headerlink" title="172. 阶乘后的零"></a><a href="https://leetcode-cn.com/problems/factorial-trailing-zeroes/">172. 阶乘后的零</a></h4><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trailingZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> zeroCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> currentFactor <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>currentFactor <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                zeroCount<span class="token operator">++</span><span class="token punctuation">;</span>                currentFactor <span class="token operator">/=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> zeroCount<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/factorial-trailing-zeroes/solution/jie-cheng-hou-de-ling-by-leetcode/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="172-阶乘后的零-1"><a href="#172-阶乘后的零-1" class="headerlink" title="172. 阶乘后的零"></a><a href="https://leetcode-cn.com/problems/factorial-trailing-zeroes/">172. 阶乘后的零</a></h4>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 58 - I. 翻转单词顺序</title>
      <link href="/2021/02/25/yy3lcg/"/>
      <url>/2021/02/25/yy3lcg/</url>
      
        <content type="html"><![CDATA[<h3 id="剑指-Offer-58-I-翻转单词顺序"><a href="#剑指-Offer-58-I-翻转单词顺序" class="headerlink" title="剑指 Offer 58 - I. 翻转单词顺序"></a><a href="https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/">剑指 Offer 58 - I. 翻转单词顺序</a></h3><h4 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> String <span class="token function">reverseWords</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除首尾空格</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">=</span> j<span class="token punctuation">;</span>        StringBuilder res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span> i<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 搜索首个空格</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加单词</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> i<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 跳过单词间空格</span>            j <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// j 指向下个单词的尾字符</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 转化为字符串并返回</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：jyd</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/solution/mian-shi-ti-58-i-fan-zhuan-dan-ci-shun-xu-shuang-z/</span>    <span class="token keyword">public</span> String <span class="token function">reverseWords2</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除首尾空格，分割字符串</span>        StringBuilder res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> strs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 倒序遍历单词列表</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 遇到空单词则跳过</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将单词拼接至 StringBuilder</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 转化为字符串，删除尾部空格，并返回</span><span class="token comment" spellcheck="true">// 作者：jyd</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/fan-zhuan-dan-ci-shun-xu-lcof/solution/mian-shi-ti-58-i-fan-zhuan-dan-ci-shun-xu-shuang-z/</span></code></pre><p><strong>s.substring(i,j) // [)</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 52. 两个链表的第一个公共节点</title>
      <link href="/2021/02/25/btvgtg/"/>
      <url>/2021/02/25/btvgtg/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-52-两个链表的第一个公共节点"><a href="#剑指-Offer-52-两个链表的第一个公共节点" class="headerlink" title="剑指 Offer 52. 两个链表的第一个公共节点"></a><a href="https://leetcode-cn.com/problems/liang-ge-lian-biao-de-di-yi-ge-gong-gong-jie-dian-lcof/">剑指 Offer 52. 两个链表的第一个公共节点</a></h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> ListNode <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode headA<span class="token punctuation">,</span> ListNode headB<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode first <span class="token operator">=</span> headA<span class="token punctuation">;</span>        ListNode second<span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>first<span class="token operator">!=</span>second<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            first<span class="token operator">=</span>first<span class="token operator">!=</span>null<span class="token operator">?</span>first<span class="token punctuation">.</span>next<span class="token operator">:</span>headB<span class="token punctuation">;</span>            second<span class="token operator">=</span>second<span class="token operator">!=</span>null<span class="token operator">?</span>second<span class="token punctuation">.</span>next<span class="token operator">:</span>headA<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> first<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>两个链表长度分别为 L1+C、L2+C， C 为公共部分的长度，按照楼主的做法： 第一个人走了 L1+C 步后，回到第二个人起点走 L2 步；第 2 个人 走了 L2+C 步后，回到第一个人起点走 L1 步。 当两个人走的步数都为 L1+L2+C 时就两个家伙就相爱了.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1143. 最长公共子序列</title>
      <link href="/2021/02/24/fn91tr/"/>
      <url>/2021/02/24/fn91tr/</url>
      
        <content type="html"><![CDATA[<h4 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143. 最长公共子序列"></a><a href="https://leetcode-cn.com/problems/longest-common-subsequence/">1143. 最长公共子序列</a></h4><p>一个字符串的   子序列   是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。<br>例如，”ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。<br>参考：<a href="https://leetcode-cn.com/problems/longest-common-subsequence/solution/dong-tai-gui-hua-tu-wen-jie-xi-by-yijiaoqian/">https://leetcode-cn.com/problems/longest-common-subsequence/solution/dong-tai-gui-hua-tu-wen-jie-xi-by-yijiaoqian/</a></p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>String text1<span class="token punctuation">,</span> String text2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> text1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> text2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 获取两个串字符</span>                <span class="token keyword">char</span> c1 <span class="token operator">=</span> text1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> text2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 去找它们前面各退一格的值加1即可</span>                    dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//要么是text1往前退一格，要么是text2往前退一格，两个的最大值</span>                    dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>7. 整数反转</title>
      <link href="/2021/02/24/mdfyqs/"/>
      <url>/2021/02/24/mdfyqs/</url>
      
        <content type="html"><![CDATA[<h4 id="7-整数反转-考虑溢出"><a href="#7-整数反转-考虑溢出" class="headerlink" title="7. 整数反转 考虑溢出"></a><a href="https://leetcode-cn.com/problems/reverse-integer/">7. 整数反转</a> 考虑溢出</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> pop <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">></span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> pop <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">&lt;</span> Integer<span class="token punctuation">.</span>MIN_VALUE <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> Integer<span class="token punctuation">.</span>MIN_VALUE <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> pop <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> pop<span class="token punctuation">;</span>            x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><table><thead><tr><th align="left">x</th><th align="left">pop</th><th align="left">ans</th></tr></thead><tbody><tr><td align="left">1234</td><td align="left"></td><td align="left">0</td></tr><tr><td align="left">123</td><td align="left">4</td><td align="left">4</td></tr><tr><td align="left">12</td><td align="left">3</td><td align="left">43</td></tr><tr><td align="left">1</td><td align="left">2</td><td align="left">432</td></tr><tr><td align="left">0</td><td align="left">1</td><td align="left">4321</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>19. 删除链表的倒数第 N 个结点</title>
      <link href="/2021/02/24/uibzpg/"/>
      <url>/2021/02/24/uibzpg/</url>
      
        <content type="html"><![CDATA[<h1 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点"></a><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></h1><h2 id="链表的长度"><a href="#链表的长度" class="headerlink" title="链表的长度"></a>链表的长度</h2><p><strong>用到哑节点</strong><br>遍历到 L−n+1 个节点时，它的下一个节点就是我们需要删除的节点，只需要修改一次指针，就能完成删除操作。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token function">getLength</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode cur <span class="token operator">=</span> dummy<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">-</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//知道要删除的节点的前一个</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        ListNode ans <span class="token operator">=</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保留最开始位置</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">++</span>length<span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> length<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="双指针、"><a href="#双指针、" class="headerlink" title="双指针、"></a>双指针、</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode first <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双指针错开一个位置.</span>        ListNode second <span class="token operator">=</span> dummy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//退出循环时first指向null.</span>            first <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            second <span class="token operator">=</span> second<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        second<span class="token punctuation">.</span>next <span class="token operator">=</span> second<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        ListNode ans <span class="token operator">=</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>延长iPhone 手机电池寿命的几个方法</title>
      <link href="/2020/12/09/omw1wg/"/>
      <url>/2020/12/09/omw1wg/</url>
      
        <content type="html"><![CDATA[<p>手机电池不耐用，很多人觉得似乎要换电池了。现在分享一波苹果电池实用技巧,可延长 iPhone 手机电池寿命哦！<br><strong>1.不要过夜充电</strong><br>锂电池充电快速，从零到充满大约只需要 1 小时。而现在的智慧型手机内建的芯片都有保护机制，一旦电量充满，便会停止充电器的电流流入电池内。因此如果电池充满之后，即使没有拔下充电插头，也不会有多余的电流流入电池，造成电池的伤害。<br>但坏消息是，当充电器电流不再流入电池内，电量便会开始自然流失，这时充电器的电流又会开始流入手机内，直到电量达 100％。换句话说，如果不拔下充电插头，一整晚手机便会重复这个过程，这会导致手机温度升高，会降低电池容量。<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1607495673205-c0a253f2-a327-477c-b0ef-0c4672f6053a.jpeg#align=left&display=inline&height=260&originHeight=260&originWidth=401&size=0&status=done&style=none&width=401"><br><strong>2.电量长期维持在 65%～ 75％之间手机电池的寿命最长</strong><br>**<img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1607495673246-6ddc606c-330e-4d74-a374-ea5a89c09d57.jpeg#align=left&display=inline&height=276&originHeight=276&originWidth=369&size=0&status=done&style=none&width=369">**<br>实际上很难做得到。你可以退而求其次，尽可能让电量维持在 45％～ 75％之间，再差的情况是不要低于 25％。如同前文提及，千万不要等到电力过低或完全没电时才充电。<br><strong>3.使用合理化软件控制充电</strong><br>**<img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1607495673196-1ae2e126-804e-4c31-ba4d-9a4795df8a50.jpeg#align=left&display=inline&height=261&originHeight=261&originWidth=396&size=0&status=done&style=none&width=396">**<br>一般锂电池充电状态下，电量达到 90%就会默认充满，可以在手机中下载一些软件，进行控制电流进行【涓流充电】，来达到让电池充到满额的程度，保护手机电池的安全。<br><strong>4.必须选用专用充电器</strong><br>锂离子电池必须选用专用充电器，否则可能会达不到饱和状态，影响其性能发挥。充电完毕后，应避免放置在充电器上超过 12 小时以上，长期不用时应使电池和手机分离。<br><strong>5.注意手机温度</strong><br>**<img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1607495673222-fc99f9bf-72f0-499b-b984-e4ef1a8012bd.jpeg#align=left&display=inline&height=310&originHeight=310&originWidth=335&size=0&status=done&style=none&width=335">**<br>一般情况下，手机使用的电池都有一个活性问题，而电池的活性又与环境的温度有关，一般来说，手机电池在-10℃~50℃ 之间能正常工作。<br>我们应尽量避免手机在温度高于 50℃ 或低于-10℃ 的环境下工作，否则使用时间和寿命会大大缩短。<br><strong>6.不要彻底用完电量后再去充电</strong><br>**<img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1607495673251-ced4ddc6-7be2-465e-bad6-37f1d2351692.jpeg#align=left&display=inline&height=276&originHeight=276&originWidth=441&size=0&status=done&style=none&width=441">**<br>频繁的浅度充放电会比深度充放电有助于延长电池的寿命，千万不要以为充电次数多会损坏电池，这个说法对锂离子电池并不适用。<br>应该尽量减少电池满电状态的时间。充满电后不拔掉电源，会让电池一直保持满电状态，虽然不会爆炸，但是会加快电池容量的损失速度。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构师</title>
      <link href="/2020/11/17/wgxn86/"/>
      <url>/2020/11/17/wgxn86/</url>
      
        <content type="html"><![CDATA[<p>50-80K·14 薪</p><h3 id="职位详情"><a href="#职位详情" class="headerlink" title="职位详情"></a>职位详情</h3><p>岗位职责：<br>1、负责系统及应急相关产品的需求分析，理清需求，提升产品竞争力；<br>2、负责应急相关产品的整体架构设计及产品的安全性，并负责相关架构文档的编写；<br>3、负责制定设计及实现规范，总结形成工程标准，指导设计、实现及部署工作；<br>4、负责应急系统研发过程中的技术风险评估，配合项目经理进行相关业务决策；<br>5、负责项目微服务架构整体设计及把控，特别是微服务的识别划分、API 的设计等；<br>6、负责关键应急技术预研及攻坚，新技术体系的整体规划、架构设计，持续研究微服务架构新的技术能力，以提高系统稳定性、安全性、可扩展性及性能等；<br>7、负责对软件开发团队进行技术指导。<br>任职要求：<br>1、计算机、软件工程等相关专业毕业，硕士及以上学历，有大型购物中心系统及相关领域从业经验优先；<br>2、具有 4 年及以上大型互联网类系统架构设计经验，2 年及以上分布式或微服务架构设计经验，有成功案例、大型系统软件架构设计经验优先；<br>3、掌握软件工程理论，有较强的系统分析能力；<br>4、熟悉常用的微服务框架，如 SpringBoot/SpringCloud、Dubbo、Ser *** 等，有微服务治理实操经验；<br>5、精通主流数据库（如 Oracle、MySQL、PostgreSQL 或 GP），熟悉 NoSQL 和 NewSQL 数据库；<br>6、具备较强的学习能力和自我管理能力，性格积极乐观，能够在压力环境下工作。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="/2020/11/16/ts7g1h/"/>
      <url>/2020/11/16/ts7g1h/</url>
      
        <content type="html"><![CDATA[<p>keys–&gt;scan cursor.//一直到返回的 cursor 为 0.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2020/11/16/za9ktu/"/>
      <url>/2020/11/16/za9ktu/</url>
      
        <content type="html"><![CDATA[<h2 id="端口占用"><a href="#端口占用" class="headerlink" title="端口占用"></a>端口占用</h2><p>1，lsof -i:端口号<br>2，netstat -tunlp|grep 端口号<br>这两个命令都可以查看端口被什么进程占用。<br><a href="https://jingyan.baidu.com/article/656db9183861cde381249c87.html">https://jingyan.baidu.com/article/656db9183861cde381249c87.html</a></p><hr><p>可以查看一下 CPU 信息：在命令行里输入：<strong>cat /proc/cpuinfo</strong><br>这里可以看到 cpu cores : 1</p><hr><h2 id="top-jstack-分析-cpu-过高原因"><a href="#top-jstack-分析-cpu-过高原因" class="headerlink" title="top+jstack 分析 cpu 过高原因"></a>top+jstack 分析 cpu 过高原因</h2><p><a href="https://www.jianshu.com/u/8b798dab407e">二月夜</a>关注<br>2017.11.24 19:16:44 字数 97 阅读 439</p><ol><li>用 ps -ef | grep tomcat 查出 tomcat 运行的进程 id</li><li>用<strong>top -Hp pid 查询进程下所有线程的运行情况</strong>（shift+p 按 cpu 排序，shift+m 按内存排序）<br>top -Hp 30316</li><li>找到 cpu 最高的 pid，用 printf ‘%x\n’ pid 转换为 16 进制</li><li>用 jstack 进程 id | grep 16 进制线程 id 找到线程信息<br>jstack 30316 | grep -A 20772a</li></ol><hr><h2 id="查看登录信息"><a href="#查看登录信息" class="headerlink" title="查看登录信息"></a>查看登录信息</h2><p>[root@aliyun log]# last<br>last: /var/log/wtmp: No such file or directory<br>Perhaps this file was removed by the operator to prevent logging last info.<br>[root@aliyun log]#<br>[root@aliyun log]#<br>[root@aliyun log]# touch wtmp<br>[root@aliyun log]# last<br>wtmp begins Tue Nov 17 15:54:31 2020<br>**//新开一个终端然后登陆**<br>[root@aliyun log]# last<br>blog     pts/2        120.245.114.111  Tue Nov 17 15:54   still logged in<br>wtmp begins Tue Nov 17 15:54:52 2020<br>[root@aliyun log]#</p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>589. N叉树的前序遍历</title>
      <link href="/2020/11/14/mugyru/"/>
      <url>/2020/11/14/mugyru/</url>
      
        <content type="html"><![CDATA[<h4 id="589-N-叉树的前序遍历"><a href="#589-N-叉树的前序遍历" class="headerlink" title="589. N 叉树的前序遍历"></a><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/">589. N 叉树的前序遍历</a></h4><p>难度简单 114<br>给定一个 N 叉树，返回其节点值的<em>前序遍历</em>。<br>例如，给定一个 <code>3叉树</code> :</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1605369307030-53189ceb-d088-45fe-b2e8-dcc10fb5013d.png#align=left&display=inline&height=502&originHeight=502&originWidth=781&size=0&status=done&style=none&width=300"></p><p>返回其前序遍历: <code>[1,3,5,6,2,4]</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">preorder</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//v1</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">helper</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Node child<span class="token operator">:</span>root<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token function">helper</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//return res;//v1</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>559. N叉树的最大深度</title>
      <link href="/2020/11/14/tu7xc8/"/>
      <url>/2020/11/14/tu7xc8/</url>
      
        <content type="html"><![CDATA[<h4 id="559-N-叉树的最大深度"><a href="#559-N-叉树的最大深度" class="headerlink" title="559. N 叉树的最大深度"></a><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/">559. N 叉树的最大深度</a></h4><p>难度简单 133<br>给定一个 N 叉树，找到其最大深度。<br>最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。<br>例如，给定一个 <code>3叉树</code> :</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1605366793116-390f46d9-96a7-4d56-b5da-da2d3ac73909.png#align=left&display=inline&height=502&originHeight=502&originWidth=781&size=0&status=done&style=none&width=300"></p><p>我们应返回其最大深度，3。<br><strong>说明:</strong></p><ol><li>树的深度不会超过 <code>1000</code>。</li><li>树的节点总不会超过 <code>5000</code>。</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*// Definition for a Node.class Node &amp;#123;    public int val;    public List&lt;Node> children;//ok    public Node() &amp;#123;&amp;#125;    public Node(int _val) &amp;#123;        val = _val;    &amp;#125;    public Node(int _val, List&lt;Node> _children) &amp;#123;        val = _val;        children = _children;    &amp;#125;&amp;#125;;*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//借鉴org</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>Node root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Node<span class="token operator">></span> children<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>children<span class="token operator">==</span>null<span class="token operator">||</span>children<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> maxDepth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span> children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            maxDepth<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxDepth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>104. 二叉树的最大深度</title>
      <link href="/2020/10/23/vlc7q6/"/>
      <url>/2020/10/23/vlc7q6/</url>
      
        <content type="html"><![CDATA[<h4 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></h4><p>难度简单 722<br>给定一个二叉树，找出其最大深度。<br>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。<br><strong>说明:</strong> 叶子节点是指没有子节点的节点。<br><strong>示例：</strong><br>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，<br>    3<br>   / <br>  9  20<br>    /  <br>   15   7<br>返回它的最大深度  3 。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>105. 从前序与中序遍历序列构造二叉树</title>
      <link href="/2020/10/23/np31e9/"/>
      <url>/2020/10/23/np31e9/</url>
      
        <content type="html"><![CDATA[<h4 id="105-从前序与中序遍历序列构造二叉树"><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105. 从前序与中序遍历序列构造二叉树"></a><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a></h4><p>难度中等 719<br>根据一棵树的前序遍历与中序遍历构造二叉树。<br><strong>注意:</strong><br>你可以假设树中没有重复的元素。<br>例如，给出<br>前序遍历 preorder = [3,9,20,15,7]<br>中序遍历 inorder = [9,3,15,20,7]<br>返回如下的二叉树：<br>    3<br>   / <br>  9  20<br>    /  <br>   15   7</p><pre class=" language-java"><code class="language-java">    HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Integer<span class="token operator">></span> map<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>inorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>preorder<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>inorder<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">helper</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">,</span><span class="token keyword">int</span> pstart<span class="token punctuation">,</span><span class="token keyword">int</span> pend<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pstart<span class="token operator">></span>pend<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 必须有</span>        TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>pstart<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> idxroot <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>pstart<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftSize<span class="token operator">=</span> idxroot <span class="token operator">-</span> start<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span>pstart<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pstart<span class="token operator">+</span>leftSize<span class="token punctuation">,</span>start<span class="token punctuation">,</span>idxroot<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right<span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span>pstart<span class="token operator">+</span>leftSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>pend<span class="token punctuation">,</span>idxroot<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//+1</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>206. 反转链表</title>
      <link href="/2020/10/20/lsfhh6/"/>
      <url>/2020/10/20/lsfhh6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/reverse-linked-list/">206. 反转链表</a><br>难度简单 1288<br>反转一个单链表。<br><strong>示例:</strong><br><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br><strong>输出:</strong> 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL<br><strong>进阶:</strong><br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><p>####</p><pre class=" language-java"><code class="language-java">     <span class="token comment" spellcheck="true">// 借鉴 org</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ListNode pre<span class="token operator">=</span>null<span class="token punctuation">;</span>        ListNode cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ListNode next=head.next;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ListNode next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>            cur<span class="token operator">=</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//next=next.next;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseList1</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span>null<span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ListNode p<span class="token operator">=</span><span class="token function">reverseList1</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>19. 删除链表的倒数第N个节点</title>
      <link href="/2020/10/19/rflmac/"/>
      <url>/2020/10/19/rflmac/</url>
      
        <content type="html"><![CDATA[<h4 id="19-删除链表的倒数第-N-个节点"><a href="#19-删除链表的倒数第-N-个节点" class="headerlink" title="19. 删除链表的倒数第 N 个节点"></a><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个节点</a></h4><p>难度中等 1064<br>给定一个链表，删除链表的倒数第 <em>n *个节点，并且返回链表的头结点。<br>*</em>示例：**<br>给定一个链表: <strong>1-&gt;2-&gt;3-&gt;4-&gt;5</strong>, 和 <strong><em>n</em> = 2</strong>.</p><p>当删除了倒数第二个节点后，链表变为 <strong>1-&gt;2-&gt;3-&gt;5</strong>.</p><p><strong>说明：</strong><br>给定的 <em>n</em> 保证是有效的。<br><strong>进阶：</strong><br>你能尝试使用一趟扫描实现吗？</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode &amp;#123; *     int val; *     ListNode next; *     ListNode() &amp;#123;&amp;#125; *     ListNode(int val) &amp;#123; this.val = val; &amp;#125; *     ListNode(int val, ListNode next) &amp;#123; this.val = val; this.next = next; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 借鉴 org</span>    <span class="token keyword">public</span> ListNode <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode dummy<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        ListNode cur<span class="token operator">=</span>dummy<span class="token punctuation">;</span>        <span class="token keyword">int</span> length<span class="token operator">=</span><span class="token function">getLength</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        cur<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            head<span class="token operator">=</span>head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>70. 爬楼梯</title>
      <link href="/2020/10/18/snc9wb/"/>
      <url>/2020/10/18/snc9wb/</url>
      
        <content type="html"><![CDATA[<h4 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode-cn.com/problems/climbing-stairs/">70. 爬楼梯</a></h4><p>难度简单 1285<br>假设你正在爬楼梯。需要 <em>n</em> 阶你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？<br><strong>注意：</strong>给定 <em>n</em> 是一个正整数。<br><strong>示例 1：</strong><br><strong>输入：</strong> 2<br><strong>输出：</strong> 2<br><strong>解释：</strong> 有两种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶</li><li>2 阶<br><strong>示例 2：</strong><br><strong>输入：</strong> 3<br><strong>输出：</strong> 3<br><strong>解释：</strong> 有三种方法可以爬到楼顶。</li><li>1 阶 + 1 阶 + 1 阶</li><li>1 阶 + 2 阶</li><li>2 阶 + 1 阶</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">climbStairs</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//n=45超时</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//优化 https://leetcode-cn.com/problems/climbing-stairs/solution/hua-jie-suan-fa-70-pa-lou-ti-by-guanpengchn/</span>    <span class="token comment" spellcheck="true">/*     * 动态规划 ok     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//由dp[2]推导出来的。</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//借鉴 org 滑动窗口</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs3</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>q<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            p<span class="token operator">=</span>q<span class="token punctuation">;</span>            q<span class="token operator">=</span>r<span class="token punctuation">;</span>            r<span class="token operator">=</span>p<span class="token operator">+</span>q<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>动态规划<br>本问题其实常规解法可以分成多个子问题，爬第 n 阶楼梯的方法数量，等于 2 部分之和</p><p>爬上 n−1 阶楼梯的方法数量。因为再爬 1 阶就能到第 n 阶<br>爬上 n−2 阶楼梯的方法数量，因为再爬 2 阶就能到第 n 阶<br>所以我们得到公式 dp[n]=dp[n−1]+dp[n−2]<br>同时需要初始化<br>dp[0]=1<br>dp[1]=1<br>时间复杂度：<br>O(n)</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//优化 https://leetcode-cn.com/problems/climbing-stairs/solution/hua-jie-suan-fa-70-pa-lou-ti-by-guanpengchn/</span>    <span class="token comment" spellcheck="true">/* 解法1 递归超时，需要保存前面的值就ok     * 动态规划     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//由dp[2]推导出来的。</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 15.二进制中1的个数</title>
      <link href="/2020/10/17/me1nv5/"/>
      <url>/2020/10/17/me1nv5/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-15-二进制中-1-的个数"><a href="#剑指-Offer-15-二进制中-1-的个数" class="headerlink" title="剑指 Offer 15. 二进制中 1 的个数"></a><a href="https://leetcode-cn.com/problems/er-jin-zhi-zhong-1de-ge-shu-lcof/">剑指 Offer 15. 二进制中 1 的个数</a></h4><p>难度简单 62<br>请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9  表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。<br><strong>示例 1：</strong><br><strong>输入：</strong>00000000000000000000000000001011<br><strong>输出：</strong>3<br><strong>解释：</strong>输入的二进制串 <code>**00000000000000000000000000001011** 中，共有三位为 &#39;1&#39;。</code><br><strong>示例 2：</strong><br><strong>输入：</strong>00000000000000000000000010000000<br><strong>输出：</strong>1<br><strong>解释：</strong>输入的二进制串 <strong>00000000000000000000000010000000</strong> 中，共有一位为 ‘1’。</p><p><strong>示例 3：</strong><br><strong>输入：</strong>11111111111111111111111111111101<br><strong>输出：</strong>31<br><strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 中，共有 31 位为 ‘1’。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 为啥不对呢</span>    <span class="token comment" spellcheck="true">// public int hammingWeight(int n) &amp;#123;</span>    <span class="token comment" spellcheck="true">//     int tmp=1;</span>    <span class="token comment" spellcheck="true">//     int res=0;</span>    <span class="token comment" spellcheck="true">//     for(int i=0;i&lt;64;i++)&amp;#123;</span>    <span class="token comment" spellcheck="true">//         if((n&amp;tmp)==1)&amp;#123;</span>    <span class="token comment" spellcheck="true">//             res++;</span>    <span class="token comment" spellcheck="true">//         &amp;#125;</span>    <span class="token comment" spellcheck="true">//         tmp&lt;&lt;=1;</span>    <span class="token comment" spellcheck="true">//     &amp;#125;</span>    <span class="token comment" spellcheck="true">//     return res;</span>    <span class="token comment" spellcheck="true">// &amp;#125;</span>    <span class="token comment" spellcheck="true">// 借鉴 org</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>            n<span class="token operator">&amp;=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 56 - I. 数组中数字出现的次数</title>
      <link href="/2020/10/17/ex2ksi/"/>
      <url>/2020/10/17/ex2ksi/</url>
      
        <content type="html"><![CDATA[<pre class=" language-xml"><code class="language-xml">class Solution <span class="token entity" title="&#123;">&amp;#123;</span>    public int[] singleNumbers(int[] nums) <span class="token entity" title="&#123;">&amp;#123;</span>        int res=0;        int tmp=1;        int a=0;        int b=0;        for(int i:nums)<span class="token entity" title="&#123;">&amp;#123;</span>            res^=i;        <span class="token entity" title="&#125;">&amp;#125;</span>        while((tmp&amp;res)==0)<span class="token entity" title="&#123;">&amp;#123;</span>            tmp&lt;&lt;=1;        <span class="token entity" title="&#125;">&amp;#125;</span>        // 按照某位进行&amp;运算        for(int i:nums)<span class="token entity" title="&#123;">&amp;#123;</span>            if((tmp&amp;i)==0)<span class="token entity" title="&#123;">&amp;#123;</span>               a^=i;            <span class="token entity" title="&#125;">&amp;#125;</span>else<span class="token entity" title="&#123;">&amp;#123;</span>               b^=i;            <span class="token entity" title="&#125;">&amp;#125;</span>        <span class="token entity" title="&#125;">&amp;#125;</span>        return new int[]<span class="token entity" title="&#123;">&amp;#123;</span>a,b<span class="token entity" title="&#125;">&amp;#125;</span>;    <span class="token entity" title="&#125;">&amp;#125;</span>//借鉴  https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/solution/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-by-leetcode/<span class="token entity" title="&#125;">&amp;#125;</span></code></pre><h4 id="剑指-Offer-56-I-数组中数字出现的次数"><a href="#剑指-Offer-56-I-数组中数字出现的次数" class="headerlink" title="剑指 Offer 56 - I. 数组中数字出现的次数"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/">剑指 Offer 56 - I. 数组中数字出现的次数</a></h4><p>难度中等 239<br>一个整型数组 <code>nums</code> 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是 O(n)，空间复杂度是 O(1)。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>nums = [4,1,4,6]<br><strong>输出：</strong>[1,6] 或 [6,1]</p><p><strong>示例 2：</strong><br><strong>输入：</strong>nums = [1,2,10,4,1,4,3,3]<br><strong>输出：</strong>[2,10] 或 [10,2]</p><p><strong>限制：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 10000</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>136. 只出现一次的数字</title>
      <link href="/2020/10/17/fvr2rk/"/>
      <url>/2020/10/17/fvr2rk/</url>
      
        <content type="html"><![CDATA[<h4 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a><a href="https://leetcode-cn.com/problems/single-number/">136. 只出现一次的数字</a></h4><p>难度简单 1541<br>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。<br><strong>说明：</strong><br>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？<br><strong>示例 1:</strong><br><strong>输入:</strong> [2,2,1]<br><strong>输出:</strong> 1</p><p><strong>示例  2:</strong><br><strong>输入:</strong> [4,1,2,1,2]<br><strong>输出:</strong> 4</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token operator">^=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 63. 股票的最大利润</title>
      <link href="/2020/10/17/ql2ymf/"/>
      <url>/2020/10/17/ql2ymf/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/</a></p><pre class=" language-sql"><code class="language-sql">class Solution <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> maxProfit<span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//prices[0]</span>        <span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>                tmp<span class="token operator">=</span>prices<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                max<span class="token operator">=</span>tmp<span class="token operator">></span>max?tmp:max<span class="token punctuation">;</span>            <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h4 id="剑指-Offer-63-股票的最大利润"><a href="#剑指-Offer-63-股票的最大利润" class="headerlink" title="剑指 Offer 63. 股票的最大利润"></a><a href="https://leetcode-cn.com/problems/gu-piao-de-zui-da-li-run-lcof/">剑指 Offer 63. 股票的最大利润</a></h4><p>难度中等 60<br>假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？</p><p><strong>示例 1:</strong><br><strong>输入:</strong> [7,1,5,3,6,4]<br><strong>输出:</strong> 5<br>**解释: **在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。<br>      注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。</p><p><strong>示例 2:</strong><br><strong>输入:</strong> [7,6,4,3,1]<br><strong>输出:</strong> 0<br>**解释: **在这种情况下, 没有交易完成, 所以最大利润为 0。</p><p><strong>限制：</strong><br><code>0 &lt;= 数组长度 &lt;= 10^5</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>182. 查找重复的电子邮箱</title>
      <link href="/2020/10/17/np0ndg/"/>
      <url>/2020/10/17/np0ndg/</url>
      
        <content type="html"><![CDATA[<h4 id="182-查找重复的电子邮箱"><a href="#182-查找重复的电子邮箱" class="headerlink" title="182. 查找重复的电子邮箱"></a><a href="https://leetcode-cn.com/problems/duplicate-emails/">182. 查找重复的电子邮箱</a></h4><p>难度简单 234 收藏分享切换为英文接收动态反馈<br><a href="">SQL 架构</a><br>编写一个 SQL 查询，查找 <code>Person</code> 表中所有重复的电子邮箱。<br><strong>示例：</strong><br>+—-+———+<br>| Id | Email   |<br>+—-+———+<br>| 1  | <a href="mailto:&#x61;&#64;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#x61;&#64;&#x62;&#x2e;&#x63;&#x6f;&#109;</a> |<br>| 2  | <a href="mailto:&#x63;&#x40;&#x64;&#x2e;&#99;&#111;&#x6d;">&#x63;&#x40;&#x64;&#x2e;&#99;&#111;&#x6d;</a> |<br>| 3  | <a href="mailto:&#x61;&#x40;&#x62;&#x2e;&#x63;&#x6f;&#109;">&#x61;&#x40;&#x62;&#x2e;&#x63;&#x6f;&#109;</a> |<br>+—-+———+</p><p>根据以上输入，你的查询应返回以下结果：<br>+———+<br>| Email   |<br>+———+<br>| <a href="mailto:&#x61;&#64;&#98;&#46;&#99;&#x6f;&#109;">&#x61;&#64;&#98;&#46;&#99;&#x6f;&#109;</a> |<br>+———+</p><p><strong>说明：</strong>所有电子邮箱都是小写字母。<br>ok</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">distinct</span> p1<span class="token punctuation">.</span>email<span class="token keyword">FROM</span> Person p1<span class="token punctuation">,</span>     Person p2<span class="token keyword">WHERE</span>    p1<span class="token punctuation">.</span>Email <span class="token operator">=</span> p2<span class="token punctuation">.</span>Email <span class="token operator">AND</span> p1<span class="token punctuation">.</span>Id <span class="token operator">></span> p2<span class="token punctuation">.</span>Id<span class="token punctuation">;</span></code></pre><p>ok</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> p1<span class="token punctuation">.</span>email <span class="token keyword">FROM</span> Person p1 <span class="token keyword">group</span> <span class="token keyword">by</span> email <span class="token keyword">having</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>196. 删除重复的电子邮箱</title>
      <link href="/2020/10/17/uux6g2/"/>
      <url>/2020/10/17/uux6g2/</url>
      
        <content type="html"><![CDATA[<h4 id="196-删除重复的电子邮箱"><a href="#196-删除重复的电子邮箱" class="headerlink" title="196. 删除重复的电子邮箱"></a><a href="https://leetcode-cn.com/problems/delete-duplicate-emails/">196. 删除重复的电子邮箱</a></h4><p>难度简单 288<br>编写一个 SQL 查询，来删除 <code>Person</code> 表中所有重复的电子邮箱，重复的邮箱里只保留 *<em>Id **</em>最小  *的那个。<br>+—-+——————+<br>| Id | Email            |<br>+—-+——————+<br>| 1  | <a href="mailto:&#106;&#x6f;&#x68;&#x6e;&#64;&#101;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#111;&#109;">&#106;&#x6f;&#x68;&#x6e;&#64;&#101;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#111;&#109;</a> |<br>| 2  | <a href="mailto:&#x62;&#x6f;&#x62;&#x40;&#x65;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#46;&#99;&#111;&#x6d;">&#x62;&#x6f;&#x62;&#x40;&#x65;&#x78;&#x61;&#x6d;&#112;&#108;&#x65;&#46;&#99;&#111;&#x6d;</a>  |<br>| 3  | <a href="mailto:&#106;&#111;&#104;&#x6e;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#106;&#111;&#104;&#x6e;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a> |<br>+—-+——————+<br>Id 是这个表的主键。</p><p>例如，在运行你的查询语句之后，上面的 <code>Person</code> 表应返回以下几行:<br>+—-+——————+<br>| Id | Email            |<br>+—-+——————+<br>| 1  | <a href="mailto:&#106;&#111;&#104;&#110;&#x40;&#x65;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#46;&#x63;&#x6f;&#109;">&#106;&#111;&#104;&#110;&#x40;&#x65;&#120;&#x61;&#109;&#112;&#x6c;&#101;&#46;&#x63;&#x6f;&#109;</a> |<br>| 2  | <a href="mailto:&#98;&#111;&#98;&#64;&#101;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#98;&#111;&#98;&#64;&#101;&#x78;&#x61;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a>  |<br>+—-+——————+</p><p><strong>提示：</strong></p><ul><li>执行 SQL 之后，输出是整个 <code>Person</code> 表。</li><li>使用 <code>delete</code> 语句。</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span> p1<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">FROM</span> Person p1<span class="token punctuation">,</span>     Person p2<span class="token keyword">WHERE</span>    p1<span class="token punctuation">.</span>Email <span class="token operator">=</span> p2<span class="token punctuation">.</span>Email <span class="token operator">AND</span> p1<span class="token punctuation">.</span>Id <span class="token operator">></span> p2<span class="token punctuation">.</span>Id<span class="token punctuation">;</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span>  <span class="token keyword">from</span> Person <span class="token keyword">where</span> id <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> mid <span class="token keyword">from</span> Person <span class="token keyword">group</span> <span class="token keyword">by</span> email<span class="token punctuation">)</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>下面这个就报错</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">delete</span>  <span class="token keyword">from</span> Person <span class="token keyword">where</span> id <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">min</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> mid <span class="token keyword">from</span> Person  <span class="token keyword">group</span> <span class="token keyword">by</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>好习惯</title>
      <link href="/2020/10/08/vemvga/"/>
      <url>/2020/10/08/vemvga/</url>
      
        <content type="html"><![CDATA[<p>#好习惯 1.坚持每天读书自学. 2.每天至少 30 分钟有氧运动. 3.和有成功思维的人建立人际关系. 4.追求自己设定的目标. 5.梦想先行.目标紧随其后. 6.避免浪费时间. 7.每天睡够 7-8 个小时. 8.提前起床.养成早起习惯. 9.发展多渠道收入. 10.绝不拖延. 11.寻找属于自己的成功导师. 12.保持乐观的精神状态.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>永不言败的励志短句</title>
      <link href="/2020/10/07/dzla6s/"/>
      <url>/2020/10/07/dzla6s/</url>
      
        <content type="html"><![CDATA[<h2 id="2020-永不言败的励志短句-1"><a href="#2020-永不言败的励志短句-1" class="headerlink" title="2020 永不言败的励志短句-1"></a>2020 永不言败的励志短句-1</h2><p>1、人的一生，可以有所作为的时机只有一次，那就是现在。<br>　　 2、对自己不满是任何真正有才能的人的根本特征之一。<br>　　 3、只有品味了痛苦，才能珍视曾经忽略的快乐;只有领略了平凡，才会收藏当初丢弃的幸福。<br>　　 4、每个人的一生都有许多梦想，但如果其中一个不断搅扰着你，剩下的就仅仅是行动了。<br>　　 5、自己选择的路，跪着也要把它走完。<br>　　 6、缺乏明确的目标，一生将庸庸碌碌。<br>　　 7、年轻是我们唯一拥有权利去编织梦想的时光。<br>　　 8、觉得自己做得到和做不到，其实只在一念之间。<br>　　 9、要想成为强乾，决不能绕过挡道的荆棘也不能回避风雨的冲刷。<br>　　 10、希望是生命的源泉，失去它生命就会枯萎。<br>　　 11、行动不一定带来快乐，而无行动则决无快乐。<br>　　 12、绝大多数人，在绝大多数时候，都只能靠自己。<br>　　 13、只有不想做的，没有做不到的。<br>　　 14、回避现实的人，未来将更不理想。<br>　　 15、给自已标价越高，自已的价值实现就越大。</p><h2 id="2020-永不言败的励志短句-2"><a href="#2020-永不言败的励志短句-2" class="headerlink" title="2020 永不言败的励志短句-2"></a>2020 永不言败的励志短句-2</h2><p>16、永不言败，是成功者的最佳品格。<br>　　 17、只有想不到的事，没有做不到的事。<br>　　 18、梦想是点燃生命之火的催化剂。<br>　　 19、要让事情改变，先改变我自己;要让事情变得更好，先让自己变得更好。<br>　　 20、生活可以是甜的，也可以是苦的，但不能是没味的。你可以胜利，也可以失败，但你不能屈服。<br>　　 21、向你的美好的希望和追求撒开网吧，九百九十九次落空了，还有一千次呢。<br>　　 22、机会只对进取有为的人开放。<br>　　 23、机会只提供给那些早已做好充分准备的人。<br>　　 24、只会在水泥地上走路的人，永远不会留下深深的脚印。<br>　　 25、如果为了安全而不和大海在一起，船就失去了存在的意义。<br>　　 26、通过云端的道路，只亲吻攀登者的足迹。<br>　　 27、彩云飘在空中，自然得意洋洋，但最多只能换取几声赞美;唯有化作甜雨并扎根于沃壤之中，才能给世界创造芳菲。<br>　　 28、教育是人才的娘家，社会是人才的婆家。<br>　　 29、失败会让人更坚强。<br>　　 30、没有失败，只有放弃。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>错过</title>
      <link href="/2020/10/04/mga4wb/"/>
      <url>/2020/10/04/mga4wb/</url>
      
        <content type="html"><![CDATA[<p>一切都明明白白，但我们仍匆匆错过，因为你相信命运，因为我怀疑生活。 – 顾城 《错过》</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自证预言</title>
      <link href="/2020/10/01/zgdoen/"/>
      <url>/2020/10/01/zgdoen/</url>
      
        <content type="html"><![CDATA[<p>心理学上有一种常见的症状，叫“自证预言”。</p><p>如果你觉得自己“可以”，就会慢慢发现自己越来越可以，这种正向能量会像燎原的火一样无限蔓延。</p><p>人格力量，正是点燃这种正能量的第一个火种，当你点亮它，你会发现，其实你就是自己向往的那个闪闪发光的偶像。</p><p>现实生活中，你并不需要神奇的戒指，而是可以通过科学、有效的方式，找到自己的人格力量，破茧成蝶，完成华丽逆袭。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自律</title>
      <link href="/2020/09/24/zz6bhx/"/>
      <url>/2020/09/24/zz6bhx/</url>
      
        <content type="html"><![CDATA[<p>“不自律的人生是一种怎么样的体验？”<br>“被命运反复羞辱，却毫无还手之力。”</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>热爱生命</title>
      <link href="/2020/09/23/vss5oa/"/>
      <url>/2020/09/23/vss5oa/</url>
      
        <content type="html"><![CDATA[<pre><code>  《热爱生命》　　我不去想　　是否能够成功　　既然选择了远方　　便只顾风雨兼程　　我不去想　　能否赢得爱情　　既然钟情于玫瑰　　就勇敢地吐露真诚　　我不去想　　身后会不会袭来寒风冷雨　　既然目标是地平线　　留给世界的只能是背影　　我不去想　　未来是平坦还是泥泞　　只要热爱生命　　一切，都在意料之中</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>108. 将有序数组转换为二叉搜索树</title>
      <link href="/2020/09/15/gqd000/"/>
      <url>/2020/09/15/gqd000/</url>
      
        <content type="html"><![CDATA[<p>将有序数组转换为二叉搜索树<br>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。<br>本题中，一个高度平衡二叉树是指一个二叉树每个节点   的左右两个子树的高度差的绝对值不超过 1。</p><p>示例:<br>给定有序数组: [-10,-3,0,5,9],</p><p>一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：</p><p>0<br>    / <br>   -3   9<br>  /   /<br>-10  5</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">helper</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">></span> end<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>val  <span class="token operator">=</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>left <span class="token operator">=</span><span class="token function">helper</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>start<span class="token punctuation">,</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1</span>            root<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token function">helper</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><a href="https://cdn.jsdelivr.net/gh/future1314/images@master/img/%E6%88%AA%E5%B1%8F2020-09-15%20%E4%B8%8B%E5%8D%883.31.12.jpg">https://cdn.jsdelivr.net/gh/future1314/images@master/img/%E6%88%AA%E5%B1%8F2020-09-15%20%E4%B8%8B%E5%8D%883.31.12.jpg</a></p><p><a href="https://cdn.jsdelivr.net/gh/future1314/images@master/img/%E6%88%AA%E5%B1%8F2020-09-15%20%E4%B8%8B%E5%8D%883.30.49.jpg">https://cdn.jsdelivr.net/gh/future1314/images@master/img/%E6%88%AA%E5%B1%8F2020-09-15%20%E4%B8%8B%E5%8D%883.30.49.jpg</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>102. 二叉树的层序遍历</title>
      <link href="/2020/09/13/yxokbg/"/>
      <url>/2020/09/13/yxokbg/</url>
      
        <content type="html"><![CDATA[<p>二叉树的层序遍历<br>给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p><p>示例：<br>二叉树：[3,9,20,null,null,15,7],<br> 3<br>  / <br>  9  20<br>   /  <br>   15   7<br>返回其层次遍历结果：</p><p>[<br> [3],<br> [9,20],<br> [15,7]<br>]</p><p>[3,9,20,null,null,15,7]<br>[[3],[9,20],[15,7]]</p><p>[1,2,3,4,5]<br>[[1],[2,3],[4,5]]</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//queue 还是stack</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Stack&lt;TreeNode> stack= new Stack&lt;TreeNode>();//stack.remove(0);</span>        LinkedList<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//remove();或者remove(0)</span>        stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//stack.size() 都可以</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TreeNode node <span class="token operator">=</span>null<span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//一定要放外面 否则stack.size()的值是变化的。</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                node <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//放循环里面，不然丢数据。</span>                   stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                   stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>免费储存每个月10G-图床🛏️</title>
      <link href="/2020/09/12/zsmdhg/"/>
      <url>/2020/09/12/zsmdhg/</url>
      
        <content type="html"><![CDATA[<p><a href="https://portal.qiniu.com/signup?code=1h9i9v7apthzm">https://portal.qiniu.com/signup?code=1h9i9v7apthzm</a><br><a href="https://portal.qiniu.com/signup?code=1h9i9v7apthzm">https://portal.qiniu.com/signup?code=1h9i9v7apthzm</a></p><p>测试 ok<br><img src="cdn.tophao.club/%E6%B4%BE%E5%8D%95.pic"/><br><img src="[https://cdn.jsdelivr.net/gh/future1314/images@master/img/6a51258cd3eecfc2e8e0f7398e2263cc.jpg](https://cdn.jsdelivr.net/gh/future1314/images@master/img/6a51258cd3eecfc2e8e0f7398e2263cc.jpg)"/><br><a href="http://cdn.tophao.club/%E4%B9%A6%E7%B1%8D.jpg">http://cdn.tophao.club/书籍.jpg</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>101. 对称二叉树</title>
      <link href="/2020/09/11/gdtian/"/>
      <url>/2020/09/11/gdtian/</url>
      
        <content type="html"><![CDATA[<p><strong>给定一个二叉树，检查它是否是镜像对称的。</strong><br>例如，二叉树 <code>[1,2,2,3,4,4,3]</code> 是对称的。<br>    1<br>   / <br>  2   2<br> / \ / <br>3  4 4  3<br>但是下面这个 <code>[1,2,2,null,3,null,3]</code> 则不是镜像对称的:<br>    1<br>   / <br>  2   2<br>   \   <br>   3    3<br><strong>进阶：</strong><br><strong>你可以运用递归和迭代两种方法解决这个问题吗？</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//借鉴org</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        TreeNode left <span class="token operator">=</span>root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        TreeNode right<span class="token operator">=</span>root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">helper</span><span class="token punctuation">(</span>TreeNode left<span class="token punctuation">,</span>TreeNode right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>null<span class="token operator">&amp;&amp;</span>right<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>null<span class="token operator">||</span>right<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>val<span class="token operator">==</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token comment" spellcheck="true">//(left.left.val==right.right.val)&amp;&amp; (left.right.val==right.left.val)</span>                   <span class="token comment" spellcheck="true">//&amp;&amp;</span>                <span class="token function">helper</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>left<span class="token punctuation">,</span>right<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">helper</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>right<span class="token punctuation">,</span>right<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml">假设树上一共 n 个节点。时间复杂度：这里遍历了这棵树，渐进时间复杂度为 O(n)空间复杂度：这里的空间复杂度和递归使用的栈空间有关，这里递归层数不超过 n，故渐进空间复杂度为 O(n)。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二叉树的最大深度</title>
      <link href="/2020/09/11/yhcvpb/"/>
      <url>/2020/09/11/yhcvpb/</url>
      
        <content type="html"><![CDATA[<p><strong>二叉树的最大深度</strong><br>给定一个二叉树，找出其最大深度。<br>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。<br>说明:  叶子节点是指没有子节点的节点。<br>示例：<br>给定二叉树 [3,9,20,null,null,15,7]，<br> **  3**<br>**   / **<br>**  9  20**<br>**    /  **<br>**   15   7**<br>返回它的最大深度  3 。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>234. 回文链表</title>
      <link href="/2020/09/11/rk8asi/"/>
      <url>/2020/09/11/rk8asi/</url>
      
        <content type="html"><![CDATA[<p>回文链表<br><strong>请判断一个链表是否为回文链表。</strong><br>示例 1:<br>输入: 1-&gt;2<br>输出: false<br>示例 2:<br>输入: 1-&gt;2-&gt;2-&gt;1<br>输出: true<br>进阶：<br><strong>你能否用  O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</strong><br>解析：见 org 第三种解法<br>作者：力扣 (LeetCode)<br>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnv1oc/">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnv1oc/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode &amp;#123; *     int val; *     ListNode next; *     ListNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// org 时间空间复杂度都是 O(n)</span>    <span class="token comment" spellcheck="true">// equals [-129,-129]</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res    <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> front<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tail <span class="token operator">=</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>front<span class="token operator">&lt;=</span>tail<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>front<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            front<span class="token operator">++</span><span class="token punctuation">;</span>            tail<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// //第一次 提交 针对奇数个元素 不成立。</span>    <span class="token comment" spellcheck="true">// public boolean isPalindrome(ListNode head) &amp;#123;</span>    <span class="token comment" spellcheck="true">//     if(head==null)&amp;#123;</span>    <span class="token comment" spellcheck="true">//         return false;</span>    <span class="token comment" spellcheck="true">//     &amp;#125;</span>    <span class="token comment" spellcheck="true">//     Stack&lt;Integer> res    = new Stack&lt;Integer>();</span>    <span class="token comment" spellcheck="true">//     ListNode cur = head;</span>    <span class="token comment" spellcheck="true">//     while(cur!=null)&amp;#123;</span>    <span class="token comment" spellcheck="true">//         if(!res.isEmpty()&amp;&amp;res.peek() == cur.val)&amp;#123;</span>    <span class="token comment" spellcheck="true">//             res.pop();</span>    <span class="token comment" spellcheck="true">//         &amp;#125;</span>    <span class="token comment" spellcheck="true">//         else&amp;#123;</span>    <span class="token comment" spellcheck="true">//             res.add(cur.val);</span>    <span class="token comment" spellcheck="true">//         &amp;#125;</span>    <span class="token comment" spellcheck="true">//         cur = cur.next;</span>    <span class="token comment" spellcheck="true">//     &amp;#125;</span>    <span class="token comment" spellcheck="true">//     return res.isEmpty();</span>    <span class="token comment" spellcheck="true">// &amp;#125;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>206. 反转链表</title>
      <link href="/2020/09/11/gkr4ov/"/>
      <url>/2020/09/11/gkr4ov/</url>
      
        <content type="html"><![CDATA[<p><strong>反转一个单链表。</strong></p><p>示例:<br>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL<br><strong>进阶:</strong><br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><p>作者：力扣 (LeetCode)<br>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnnhm6/">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnnhm6/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode &amp;#123; *     int val; *     ListNode next; *     ListNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//借鉴org</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseList1</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token operator">||</span>head<span class="token punctuation">.</span>next<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ListNode p <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span>head<span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//org</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ListNode pre<span class="token operator">=</span>null<span class="token punctuation">;</span>        ListNode cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        ListNode next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// pre.next=null;</span>        <span class="token comment" spellcheck="true">// cur.next=pre;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;&amp; next !=null</span>            <span class="token comment" spellcheck="true">// pre.next=pre;</span>            next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next<span class="token operator">=</span>pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span>cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//next=next.next;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>21. 合并两个有序链表</title>
      <link href="/2020/09/11/sp63al/"/>
      <url>/2020/09/11/sp63al/</url>
      
        <content type="html"><![CDATA[<p>合并两个有序链表<br>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 <br>示例：<br>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p><p>作者：力扣 (LeetCode)<br>链接：<a href="https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnnbp2/">https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnnbp2/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode &amp;#123; *     int val; *     ListNode next; *     ListNode() &amp;#123;&amp;#125; *     ListNode(int val) &amp;#123; this.val = val; &amp;#125; *     ListNode(int val, ListNode next) &amp;#123; this.val = val; this.next = next; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//pass</span>    <span class="token keyword">public</span> ListNode <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode root <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l2<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> l1<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token operator">&lt;=</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>val<span class="token operator">=</span>l1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            root<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val<span class="token operator">></span>l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            root<span class="token punctuation">.</span>val<span class="token operator">=</span>l2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            root<span class="token punctuation">.</span>next<span class="token operator">=</span><span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>237. 删除链表中的节点</title>
      <link href="/2020/09/11/vr783s/"/>
      <url>/2020/09/11/vr783s/</url>
      
        <content type="html"><![CDATA[<p>删除链表中的节点<br>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 要被删除的节点 。<br>现有一个链表 – head = [4,5,1,9]，它可以表示为:<br>示例 1：<br>输入：head = [4,5,1,9], node = 5<br>输出：[4,1,9]<br>解释：给定你链表中值为  5  的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.<br>示例 2：<br>输入：head = [4,5,1,9], node = 1<br>输出：[4,5,9]<br>解释：给定你链表中值为  1  的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.<br>提示：<br>链表至少包含两个节点。<br>链表中所有节点的值都是唯一的。<br>给定的节点为非末尾节点并且一定是链表中的一个有效节点。<br>不要从你的函数中返回任何结果。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode &amp;#123; *     int val; *     ListNode next; *     ListNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//org</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>ListNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span>val <span class="token operator">=</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            node<span class="token punctuation">.</span>next<span class="token operator">=</span>node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法-todo</title>
      <link href="/2020/09/11/gklcy5/"/>
      <url>/2020/09/11/gklcy5/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/leetbook/detail/top-interview-questions-medium/">https://leetcode-cn.com/leetbook/detail/top-interview-questions-medium/</a></p><p><a href="https://leetcode-cn.com/leetbook/detail/top-interview-questions-hard/">https://leetcode-cn.com/leetbook/detail/top-interview-questions-hard/</a></p><p><a href="https://leetcode-cn.com/leetbook/detail/top-interview-questions-easy/">https://leetcode-cn.com/leetbook/detail/top-interview-questions-easy/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>240. 搜索二维矩阵 II</title>
      <link href="/2020/09/11/htcng7/"/>
      <url>/2020/09/11/htcng7/</url>
      
        <content type="html"><![CDATA[<p>编写一个高效的算法来搜索  m x n  矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：<br>每行的元素从左到右升序排列。<br>每列的元素从上到下升序排列。<br>示例:<br>现有矩阵 matrix 如下：<br>[<br> [1,   4,  7, 11, 15],<br> [2,   5,  8, 12, 19],<br> [3,   6,  9, 16, 22],<br> [10, 13, 14, 17, 24],<br> [18, 21, 23, 26, 30]<br>]<br>给定 target = 5，返回  true。<br>给定  target = 20，返回  false。</p><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 借鉴了org 但是又不一样</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// int row = matrix.length-1;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token operator">==</span>null<span class="token operator">||</span>matrix<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> col <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>row <span class="token operator">&lt;=</span>matrix<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> col<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">></span>matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    row<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    col<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到了 就没有必要col——了</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>88. 合并两个有序数组</title>
      <link href="/2020/09/11/szqy8n/"/>
      <url>/2020/09/11/szqy8n/</url>
      
        <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions/xmi2l7/">https://leetcode-cn.com/leetbook/read/top-interview-questions/xmi2l7/</a><br><a href="https://leetcode-cn.com/leetbook/read/top-interview-questions/xmi2l7/">https://leetcode-cn.com/leetbook/read/top-interview-questions/xmi2l7/</a><br><strong>给你两个有序整数数组  nums1 和 nums2，请你将 nums2 合并到  nums1  中，使 nums1 成为一个有序数组。</strong><br>说明:<br>初始化  nums1 和 nums2 的元素数量分别为  m 和 n 。<br>你可以假设  nums1  有足够的空间（空间大小大于或等于  m + n）来保存 nums2 中的元素。<br>示例 1:<br>输入:<br>nums1 = [1,2,3,0,0,0], m = 3<br>nums2 = [2,5,6],       n = 3<br>输出: [1,2,2,3,5,6]<br>示例 2:<br>输入:<br>[1,2,3,0,0,0,0]<br>3<br>[2,5,6]<br>3<br>输出:<br>[1,2,2,3,5,6,0]</p><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//借鉴了org</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p1<span class="token operator">=</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p2<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//尾插</span>        <span class="token keyword">int</span> p <span class="token operator">=</span>m<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>p2<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            nums1<span class="token punctuation">[</span>p<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">=</span>nums1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token operator">></span>nums2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token operator">?</span>nums1<span class="token punctuation">[</span>p1<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">:</span>nums2<span class="token punctuation">[</span>p2<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//把nums2 剩余的元素复制过去</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>nums2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>p2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">arraycopy</span><span class="token punctuation">(</span>Object src<span class="token punctuation">,</span>  <span class="token keyword">int</span>  srcPos<span class="token punctuation">,</span>                                    Object dest<span class="token punctuation">,</span> <span class="token keyword">int</span> destPos<span class="token punctuation">,</span>                                    <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>思维导图</title>
      <link href="/2020/09/07/yogcmu/"/>
      <url>/2020/09/07/yogcmu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.processon.com/i/5d9497efe4b03d4e28a6a0b2">https://www.processon.com/i/5d9497efe4b03d4e28a6a0b2</a><br><a href="https://www.processon.com/i/5d9497efe4b03d4e28a6a0b2">https://www.processon.com/i/5d9497efe4b03d4e28a6a0b2</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>雷军与周鸿祎的江湖往事</title>
      <link href="/2020/09/07/sxm775/"/>
      <url>/2020/09/07/sxm775/</url>
      
        <content type="html"><![CDATA[<p>雷军与周鸿祎的江湖往事<br>2019-09-22 15:15<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1599488142700-313e04fe-7d85-45c1-8c04-bb4ea8a2a69f.jpeg#align=left&display=inline&height=360&originHeight=360&originWidth=640&size=0&status=done&style=none&width=640"><br>“湖北第一聪明的当属陈一舟，雷军第二，我第三。”<br>周鸿祎曾经这么评价自己和两个老乡，三个人都很成功，赚钱能力都强，人也非常聪明，而从事业成就来看，老大发财早却落后了，老二公司成了世界 500 强，老三则显得很不服气。<br>一开始，周鸿祎对雷军是有些仰视的，雷军成明早，年纪轻轻就成了金山软件的总经理，是江湖上的风云人物，周鸿祎那时候还在方正上班，他说雷军是人中龙凤：<br>“在我们这一拨人里，他出道的时候……没准儿陈天桥还在学校呢，我也刚毕业参加工作。按世俗的标准，他更早获得了社会的认可。实话说，从江湖辈分来说，他比我们(要高)，他应该可以赶上算求伯君那一代，和杨元庆，和(当时)中关村的这些人是齐名的，我们互联网这一拨人只能算第二拨。”<br>雷军也自认是资历老，是“爷爷辈”的一批互联网人。而按照一般的剧情，雷军最喜欢收小弟，周鸿祎又是才能出众，本来，周鸿祎可以成为雷军“兄弟”中的一员。但内心充满骄傲的两个强人似乎是注定走不到一起的。<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1599488142703-f2659573-c86e-4b58-a0ca-7f0a5c30900b.jpeg#align=left&display=inline&height=346&originHeight=346&originWidth=640&size=0&status=done&style=none&width=640"><br>周鸿祎似乎永远都比雷军慢一步  <br>1969 年，雷军出生于湖北仙桃市。1970 年，周鸿祎出生于仙桃市 100 多公里外的黄冈（后随父母迁居河南）。1987 年雷军考入武汉大学的计算机系，1988 年周鸿祎考上了西安交大的计算机专业。后来参加工作，雷军名声鹊起，周鸿祎还默默无闻，再后来，雷军做小米，周鸿祎也做了 360 手机。<br>雷军在上大学时候就尝试做生意、创业了，而周鸿祎在学校帮人打架，头上被啤酒瓶砸，腰被扎破。后来周鸿祎说，在自己被打的时候，他帮着出头的老乡、同学却袖手旁观，这个经历对他此后的价值观影响深远。<br>毕业后，雷军和周鸿祎都去了北京，雷军被求伯君慧眼赏识，完成了从技术人才到管理人才的跨越。周鸿祎则在方正公司崭露头角，3 年时间从程序员干到了部门经理。<br>那时候方正有个美女胡欢，据说在快要嫁人的时候，被周鸿祎在 BBS 上聊天泡成了自己老婆，哎呀，真别说互联网早期的女网友质量真高啊，咳咳，这个话题打住。<br>胡欢在公司有个闺蜜叫张彤，有天张彤喊胡欢去家里吃饭，介绍自己老公叫雷军，老乡见老乡，气氛很友好，小周还下厨做了两个家乡菜。嗯，从此湖北第二聪明和第三聪明就接上头了，成了朋友。后来，小周在方正做飞扬项目，他心里很得意，就拿着去雷军那里显摆，雷军不屑：“你这是在马桶上绣花，绣得再漂亮，还是个马桶”。<br>雷军经常开车带周鸿祎出去玩，有次周鸿祎在车上批评金山的“盘古”做得太烂，他说的高兴，却发现雷军转头看着车窗一言不发，车里充满了尴尬和冷意，周鸿祎后来才知道盘古是雷军耗费大量心血做的项目，失败后雷军一度想要辞职。但这似乎也没有影响交往，雷军依然经常喊周鸿祎出来喝酒，有次还送了周鸿祎一个从日本带回来的相机，雷军准备离开金山的时候，周鸿祎他们还坐在一起喝酒。<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1599488142700-ba2e1275-9856-4907-8295-7608cf7aeb18.jpeg#align=left&display=inline&height=288&originHeight=288&originWidth=550&size=0&status=done&style=none&width=550"><br>江湖有恩必有怨  <br>抱得美人归的周鸿祎事业心彻底激活了，爱情满足之后就自然是追求事业上的功成名就，按照自己的思路，时任研发中心副主任、事业部总经理的周鸿祎向公司提出了“3721”的项目，方正上层举棋不定，据说还征求过雷军的意见，雷军表示不看好。<br>此路不通，周鸿祎的狠劲上来了，1998 年，28 岁的他决定 “不管三七二十一”，辞职创业。此后，中文网址导航 3721 网站在互联网江湖掀起了很大的风波。<br>当年很多城市的网络公司都是 3721 的代理商，周鸿祎也经常跑出去谈业务，从市场规模上看，3721 的企业用户付费群体比当时的百度更大，这就在雅虎与谷歌竞争的时候，选择了要价更低的 3721，雅虎出价 1.2 亿美金收编了 3721 和周鸿祎。对此，周鸿祎说，“我太想做网页搜索，太着急，正好碰上雅虎……2003 年的雅虎还是互联网第一，当时想如果能跟雅虎拼到一起，用雅虎的资金、品牌和技术，再加上我的渠道、客户端和运作能力，我们把 Google 都能给灭了，所以就加入了豪门。”<br>传言此前周鸿祎找过对手谈合作：</p><blockquote><p>“我发现 Robin 和我的性格形成了强烈的反差，我像机关枪一样，把想说的话一股脑地都说了，包括怎么推广、怎么做插件，毫无保留。但是，对面坐着 Robin 很沉静，一直在听，也不表态。到了最后，他才缓缓地说：“我觉得 3721 本质上做的也是搜索，以后肯定会有竞争。”</p></blockquote><p>后来，周鸿祎承认 Robin 的路线是对了，3721 应该独立发展。因为在雅虎中国时期不开心，周鸿祎与杨致远、马云先后闹翻，然后带着人马转头做了奇虎公司，要“报仇雪恨”，没想到搜索没成，老部下傅盛做的安全卫士起来了，周鸿祎马上亲自接手，导致傅盛投奔去了雷军麾下。为此，周鸿祎喊话雷军封杀傅盛，雷军根本不鸟他。话说老周还是威望不够啊，看看当年任正非打李一男，江湖上谁敢为李一男出头、触怒任正非？<br>关键是 360 安全卫生打出的“免费杀毒”牌子，直接动了金山毒霸的奶酪，据金山毒霸当时的总经理说，他们一下子被打懵了，很长时间没反应过来，要知道金山毒霸是国内杀毒市场的霸主啊。金山和 360 互相打官司和口水战，金山说对方毫无底线。但总体来说周鸿祎的 360 是赢了这一场。<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1599488142694-3a203981-3c5a-4daa-bf72-6e7bb5a2a623.jpeg#align=left&display=inline&height=411&originHeight=411&originWidth=550&size=0&status=done&style=none&width=550"><br>“红衣大炮”的手机梦  <br>梁子是结深了，可周鸿祎还是盯着雷军的动向，“即使商业上有竞争，也不会与对方成为敌人”，他说，“其实最了解雷军的人还是我”。<br>当小米一战成名后，周鸿祎也按捺不住了，研究过雷军的互联网模式后，他先找华为（据说被任正非否了），再谈酷派，要做 360 特供机，他还在网上批评“小米质量差”、“小米手机暴利”。<br>口水战越来越紧张，“红衣大炮”放言约架：“约你见面谈一谈，下周一上午十点朝阳公园门口见。”雷布斯再次不屑：“他有什么本事约谈我？把自己看得太大了”。<br>做手机供应链是命脉，老罗就手机失败有一部分原因就是被供应链折磨得欲仙欲死。老周想到的是联合，2014 年 12 月 16 日，奇虎 360 向传统厂商酷派投资 4.0905 亿美元现金成立合资公司奇酷，奇虎 360 将持有该合资公司 45%的股权，后增持至 49.5%。酷派负责提供智能手机设计、研发、技术以及生产制造、供应链管理、品质控制、营销、售后服务等资源，360 则提供安全软件、移动应用程序设计及网上营销推广等资源。两家联手，欲挑战小米地位，那时候老周认为有很大把握成功。<br>但计划没有变化快，“宁可玉碎，同归于尽，所以我说了，谁拦我做手机我就干死谁，这不是威胁，更不是恐吓，我说了就会做到，至于有人扬言要弄死我，我一直等着呢。”随着乐视“第三者插足”，与酷派的合作是黄了，老周也只能放狠话，“谁在我背后捅刀子试图 screw 我，我的原则是一定 fk 回去”。<br>忙活一场，“AK47”瞄准了对手但却打不中了，老周终于还是看着雷军的小米一骑绝尘，这一局，终究是雷军赢了。<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1599488142726-79fc2dae-5366-4d93-b3c7-7671bcf87596.jpeg#align=left&display=inline&height=456&originHeight=456&originWidth=600&size=0&status=done&style=none&width=600"><br>一个“相爱相杀”的眼神  <br>在 2015 年的互联网大会上，酣睡的周鸿祎遭遇了雷军的一个眼神，话说拍照的人也很毒啊，这张照片完美体现了两个人的关系。<br>周鸿祎说，我没办法让雷军用那种眼神看我。<br>1995 年-1998 年，两个人一起愉快玩耍的时候，周鸿祎就觉得雷军“骄傲而难以接近”，后来两人在安全软件和手机领域各有胜负，有过利益争斗，有过斗嘴吵架，但在一起的时候，两人互动还是很和气的。<br>实际上，从 2013 年以后，周鸿祎就渐渐变得温和友善了许多，不知有没有受到雷军“把朋友变得多多的”的准则影响。<br>世界就是这样，人与人之间，有交情，有争斗，有恩怨，有缘分，其实，这也是我们人在江湖的常态。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件工程师-职业发展路径</title>
      <link href="/2020/09/05/oy20xn/"/>
      <url>/2020/09/05/oy20xn/</url>
      
        <content type="html"><![CDATA[<h1 id="1-关于职业规划"><a href="#1-关于职业规划" class="headerlink" title="1.关于职业规划"></a>1.关于职业规划</h1><p>很程序员每天都在写代码，每天都很忙，而当面试官问他：“你的职业规划是什么？”程序员答：“没有”。那如果让你选择一个角色你会选择什么？比如技术主管。程序员答：“ＣＥＯ吧”。我。。。。。。<br>我们应该给自己制定一个职业规划，对未来的工作要有一个方向，当方向对的时候，你会少走很多弯路。就像小时候别人问你，你长大后的梦想是什么，我家隔壁的小明答到：“我想当一个数学家”。这是一个很好的梦想！虽然后来小明只当了超市里的会计——收银员。</p><h1 id="2-程序员的成长过程"><a href="#2-程序员的成长过程" class="headerlink" title="2. 程序员的成长过程"></a>2. 程序员的成长过程</h1><p><strong>程序小白</strong><br>第一阶段：刚毕业到公司，每天就是打杂，总做一些简单又重复的事情，这就是程序员所说的“搬砖工”。搬砖工其实没什么，成长都是从这里开始，当你多年以后，回过头看，你会发现曾经搬的砖其实对自己很有用。<br><strong>（你的工资水平大概在 3K~5K 左右）</strong><br><strong>初级程序员</strong><br>第二阶段：终于，小白不再是自己，从现在开始你可以说自己是一个程序员了，但是你能做的还是一些简单的事情。写代码的时候还是会依靠复制粘贴的方式完成代码的编写，通常一个方法写了几百行代码，恨不得一个方法可以将所有的功能都实现。他们不考虑程序的质量，代码也写的很乱，也没有注释，他们只要求程序能够运行就好。所以，你需要继续努力，继续学习。<br><strong>（你的工资水平大概在 6K~8K 左右）</strong><br><strong>中级程序员</strong><br>到了这个阶段，你已经掌握了较好的技术，你可以靠自己去做一些项目了，不在需要靠复制粘贴别人的代码了，开始关注代码的质量，代码的规范，把该注释的地方，注释好，开始做很多实用的项目。<br><strong>（你的工资水平大概在 10K~20K 左右）</strong><br><strong>高级程序员</strong><br>到了这个阶段，你的技术已经非常棒了，很多人开始走设计路线，你比如系统设计等等。公司会有很多的技术难题需要靠你去解决，这个时候是属于大神级别了。<br><strong>（你的工资水平大概在 20K~30K 左右）</strong><br><strong>转折点</strong><br>再往上走，就面临一个转折点了，或者叫“换乘站”，你需要考虑自己走哪个方向，一个路线是走管理路线，另一个路线是走技术路线。走管理路线的话，你需要有较好的管理能力；而走技术路线，你的技术要过硬，要有牛逼的技术。</p><h1 id="3-程序员需要不断的学习"><a href="#3-程序员需要不断的学习" class="headerlink" title="3. 程序员需要不断的学习"></a>3. 程序员需要不断的学习</h1><p>序员的人生，是一个不断学习，不断提升的过程，这当中包含了心酸，也包含了成就。有人说程序员吃的是“青春饭”，只有年轻人可以胜任，当年龄大了，就干不动，干不过年轻人了。小编却认为，老程序员干不过年轻程序员，哪要看在哪方面，可别忘了，老程序员有很好的工作经验，项目经验。我们只要记住一句话就好：“活到老，学到老”。</p><h1 id="4-架构师"><a href="#4-架构师" class="headerlink" title="4. 架构师"></a>4. 架构师</h1><p>听很多人说，架构师薪资很棒，年薪百万，当然只有少数人能达到这个水平，但是还是很高的薪资哦。理想还是要有的，万一实现了呢。我们确实要有理想，因为有理想才能有动力，你才知道自己想要什么，你就会去努力，去拼搏。就像中国富豪王健林说的那样“我们先给自己定一个小目标，比如说，先挣它一个亿”。在很多人看来这是天文数字，可是你不努力，你怎么知道自己实现不了呢。有很多事情，只有去尝试，你才知道行不行！</p><h1 id="5-学习需要学会交流"><a href="#5-学习需要学会交流" class="headerlink" title="5. 学习需要学会交流"></a>5. 学习需要学会交流</h1><p>所以，努力吧。希望我们可以相互学习，共同进步。技术，只有当交流的时候，才会变的更好！我很期待和网友们进行技术交流， 不说为中国技术进步做努力吧。就说帮助身边的人，帮助你我他。我们共同学习，共同交流，共同进步。谢谢！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/2020/09/04/isxwy0/"/>
      <url>/2020/09/04/isxwy0/</url>
      
        <content type="html"><![CDATA[<h1 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h1><p>线程主要有“新建”（NEW）、“就绪”（RUNNABLE）、“运行”（RUNNING）、“阻塞”（BLOCKED）、“死亡”（DEAD）五种状态。<br>**<br>**<br>多处理器，处理器提供了<strong>总线锁定</strong>和<strong>缓存锁定</strong>两个机制来保证复杂内存操作的原子性。<br>当处理器要操作一个共享变量的时候，其在总线上会发出一个 Lock 信号，这时其它处理器就不能操作共享变量了，该处理器会独享此共享内存中的变量。但总线锁定在阻塞其它处理器获取该共享变量的操作请求时，也可能会导致大量阻塞，从而增加系统的性能开销。<br>于是，后来的<strong>处理器都提供了缓存锁定机制，也就说当某个处理器对缓存中的共享变量进行了操作，就会通知其它处理器放弃存储该共享资源或者重新读取该共享资源。</strong>目前最新的处理器都支持缓存锁定机制。<br>**<br>Linux 内核提供的 vmstat 命令，来监视 Java 程序运行过程中系统的上下文切换频率。<br>[root@aliyun ~]# vmstat 2 <strong>//时间间隔</strong><br>procs ———–memory———- —swap– —–io—- -system– ——cpu—–<br>r   b   swpd   free   buff   cache   si   so    bi    bo   in   cs us sy id wa st<br>2  0      0   82800 133624 537868    0    0     4    13   12   25  1  0 99  0  0<br><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1599227584883-fec6985f-f6f8-4ef6-86ca-5d216cc23359.png#align=left&display=inline&height=177&originHeight=177&originWidth=746&size=191086&status=done&style=none&width=746" alt="image.png"><br>如果是监视某个应用的上下文切换，可以使用 pidstat 命令监控进程的 上下文切换。<br> pidstat -w -l -p <strong>26571</strong> 1 100</p><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1595921713500-ef983e78-c5e3-46f3-abe1-bbdc74c1f384.jpeg#align=left&display=inline&height=582&originHeight=582&originWidth=1564&size=0&status=done&style=none&width=1564"></p><p>**</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>锁优化</title>
      <link href="/2020/09/04/xu92ar/"/>
      <url>/2020/09/04/xu92ar/</url>
      
        <content type="html"><![CDATA[<h3 id="垃圾回收会导致上下文切换"><a href="#垃圾回收会导致上下文切换" class="headerlink" title="垃圾回收会导致上下文切换"></a>垃圾回收会导致上下文切换</h3><p>很多 <strong>JVM 垃圾回收器</strong>（serial 收集器、ParNew 收集器）在回收旧对象时，会产生<strong>内存碎片</strong>，从而需要进行内存整理，在这个过程中就需要移动存活的对象。而<strong>移动内存对象就意味着这些对象所在的内存地址会发生变化</strong>，因此在移动对象前需要暂停线程，在移动完成后需要再次唤醒该线程。因此减少 JVM 垃圾回收的频率可以有效地减少上下文切换。</p><p>Executors.newCachedThreadPool，只适合处理大量且耗时短的非阻塞任务。</p><h2 id="竞争锁优化"><a href="#竞争锁优化" class="headerlink" title="竞争锁优化"></a><a href="#R0KWu">竞争锁优化</a></h2><h3 id="1-减少锁的持有时间"><a href="#1-减少锁的持有时间" class="headerlink" title="1.减少锁的持有时间"></a><a href="#JeIgg">1.减少锁的持有时间</a></h3><p>同步的代码要尽量少。</p><h3 id="2-降低锁的粒度"><a href="#2-降低锁的粒度" class="headerlink" title="2.降低锁的粒度"></a><a href="#wjdvJ">2.降低锁的粒度</a></h3><p>锁分离(读写锁)；锁分段。</p><h3 id="3-非阻塞乐观锁替代竞争锁"><a href="#3-非阻塞乐观锁替代竞争锁" class="headerlink" title="3.非阻塞乐观锁替代竞争锁"></a><a href="#lCdUa">3.非阻塞乐观锁替代竞争锁</a></h3><p>cas 代替 sync。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gc 调优</title>
      <link href="/2020/09/04/zgykxe/"/>
      <url>/2020/09/04/zgykxe/</url>
      
        <content type="html"><![CDATA[<h2 id="GC-调优策略"><a href="#GC-调优策略" class="headerlink" title="GC 调优策略"></a><a href="#S4gAF">GC 调优策略</a></h2><h3 id="1-降低-Minor-GC-频率"><a href="#1-降低-Minor-GC-频率" class="headerlink" title="1. 降低 Minor GC 频率"></a><a href="#NO6sY">1. 降低 Minor GC 频率</a></h3><p>由于新生代空间较小，Eden 区很快被填满，就会导致频繁 Minor GC，因此我们可以通过增大新生代空间来降低 Minor GC 的频率。</p><p>单次 Minor GC 时间更多取决于 GC 后存活对象的数量，而非 Eden 区的大小。</p><h3 id="2-降低-Full-GC-的频率"><a href="#2-降低-Full-GC-的频率" class="headerlink" title="2. 降低 Full GC 的频率"></a>2. 降低 Full GC 的频率</h3><p>通常情况下，由于堆内存空间不足或老年代对象太多，会触发 Full GC，频繁的 Full GC 会带来上下文切换，增加系统的性能开销。我们可以使用哪些方法来降低 Full GC 的频率呢？<br><strong>减少创建大对象：</strong>在平常的业务场景中，我们习惯一次性从数据库中查询出一个大对象用于 web 端显示。例如，我之前碰到过一个一次性查询出 60 个字段的业务操作，这种大对象如果超过年轻代最大对象阈值，会被直接创建在老年代；即使被创建在了年轻代，由于年轻代的内存空间有限，通过 Minor GC 之后也会进入到老年代。<strong>这种大对象很容易产生较多的 Full GC。</strong><br>我们可以将这种大对象拆解出来，首次只查询一些比较重要的字段，如果还需要其它字段辅助查看，再通过第二次查询显示剩余的字段。<br><strong>增大堆内存空间：</strong>在堆内存不足的情况下，增大堆内存空间，且设置初始化堆内存为最大堆内存，也可以降低 Full GC 的频率。</p><h3 id="3-选择合适的-GC-回收器"><a href="#3-选择合适的-GC-回收器" class="headerlink" title="3. 选择合适的 GC 回收器"></a>3. <a href="#i3GG7">选择合适的 GC 回收器</a></h3><p>对响应速度有要求的可以用 CMS（Concurrent Mark Sweep）回收器和 G1 回收器。<br>对系统吞吐量有要求时，可以选择 Parallel Scavenge。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jvm 命令</title>
      <link href="/2020/09/04/dkrt72/"/>
      <url>/2020/09/04/dkrt72/</url>
      
        <content type="html"><![CDATA[<h2 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h2><ul><li>S1C：年轻代中 From Survivor 的容量（单位 KB）；</li><li>S0U：年轻代中 To Survivor 目前已使用空间（单位 KB）；</li><li>S1U：年轻代中 From Survivor 目前已使用空间（单位 KB）；</li><li>EC：年轻代中 Eden 的容量（单位 KB）；</li><li>EU：年轻代中 Eden 目前已使用空间（单位 KB）；</li><li>OC：Old 代的容量（单位 KB）；</li><li>OU：Old 代目前已使用空间（单位 KB）；</li><li>MC：Metaspace 的容量（单位 KB）；</li><li>MU：Metaspace 目前已使用空间（单位 KB）；</li><li>YGC：从应用程序启动到采样时年轻代中 gc 次数；</li><li>YGCT：从应用程序启动到采样时年轻代中 gc 所用时间(s)；</li><li>FGC：从应用程序启动到采样时 old 代（全 gc）gc 次数；</li><li>FGCT：从应用程序启动到采样时 old 代（全 gc）gc 所用时间(s)；</li><li>GCT：从应用程序启动到采样时 gc 用的总时间(s)。</li></ul><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>root<span class="token annotation punctuation">@aliyun</span> <span class="token operator">~</span><span class="token punctuation">]</span># jstat <span class="token operator">-</span>gc <span class="token number">27788</span> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT<span class="token number">8704.0</span> <span class="token number">8704.0</span> <span class="token number">3301.0</span>  <span class="token number">0.0</span>   <span class="token number">69952.0</span>  <span class="token number">67721.2</span>   <span class="token number">174784.0</span>   <span class="token number">105202.2</span>  <span class="token number">104140.0</span> <span class="token number">98328.1</span> <span class="token number">13272.0</span> <span class="token number">12227.3</span>    <span class="token number">176</span>    <span class="token number">2.736</span>   <span class="token number">4</span>      <span class="token number">0.421</span>    <span class="token number">3.158</span><span class="token punctuation">[</span>root<span class="token annotation punctuation">@aliyun</span> <span class="token operator">~</span><span class="token punctuation">]</span>#</code></pre><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用的数据结构</title>
      <link href="/2020/09/04/csa1em/"/>
      <url>/2020/09/04/csa1em/</url>
      
        <content type="html"><![CDATA[<h3 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h3><p><strong>跳跃表是基于链表扩展实现的一种特殊链表</strong>，类似于树的实现，跳跃表不仅实现了横向链表，还<strong>实现了垂直方向的分层索引。</strong><br><strong>一个跳跃表由若干层链表组成，每一层都实现了一个有序链表索引，只有最底层包含了所有数据</strong>，每一层由下往上依次通过一个指针指向上层相同值的元素，每层数据依次减少，等到了最顶层就只会保留部分数据了。<br><strong>跳跃表</strong>的这种结构，是利用了<strong>空间换时间</strong>的方法来提高了查询效率。<strong>程序总是从最顶层开始查询访问，通过判断元素值来缩小查询范围</strong>。</p><h3 id="ConcurrentSkipListMap"><a href="#ConcurrentSkipListMap" class="headerlink" title="ConcurrentSkipListMap"></a>ConcurrentSkipListMap</h3><p><strong>ConcurrentSkipListMap</strong>是基于 TreeMap 的设计原理实现的，略有不同的是<strong>前者基于跳表实现</strong>，后者基于<strong>红黑树</strong>实现，<strong>ConcurrentSkipListMap 的特点是存取平均时间复杂度是**</strong>O（log（n））<strong>，适用于大数据量存取的场景，</strong>最常见的是基于跳跃表实现的数据量比较大的缓存。**</p><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><p><strong>Hashtable 使用 Synchronized 同步锁修饰了 put、get、remove 等方法。</strong></p><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>该容器在数据量比较大的时候，链表会转换为红黑树。<strong>红黑树在并发情况下，删除和插入过程中有个平衡的过程，会牵涉到大量节点，因此竞争锁资源的代价相对比较高。</strong><br><strong>在 JDK1.7 中，ConcurrentHashMap 就使用了分段锁 Segment 减小了锁粒度，最终优化了锁的并发操作。</strong><br><strong>JDK1.8 中 ConcurrentHashMap 做了大量的改动，摒弃了 Segment 的概念</strong>。由于 Synchronized 锁在 Java6 之后的性能已经得到了很大的提升，所以<strong>在 JDK1.8 中，Java 重新启用了 Synchronized 同步锁，通过 Synchronized 实现**</strong>HashEntry*<strong>*作为锁粒度。</strong><br>与 JDK1.7 的 put 方法一样，<strong>JDK1.8 在添加元素时</strong>，在没有哈希冲突的情况下，会使用<strong>CAS 进行添加元素操作</strong>；如果有冲突，则通过 Synchronized 将链表锁定，再执行接下来的操作。</p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p><strong>Vector 也是基于 Synchronized 同步锁实现的线程安全</strong>，Synchronized 关键字几乎修饰了所有对外暴露的方法，所以在读远大于写的操作场景中，Vector 将会发生大量锁竞争，从而给系统带来性能开销。</p><h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><p><strong>CopyOnWriteArrayList</strong>是 java.util.concurrent 包提供的方法，它实现了<strong>读操作无锁，写操作则通过操作底层数组的新副本来实现</strong>，是一种读写分离的并发策略。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jvm参数</title>
      <link href="/2020/09/04/gc91c3/"/>
      <url>/2020/09/04/gc91c3/</url>
      
        <content type="html"><![CDATA[<p>-XX:+DoEscapeAnalysis 开启逃逸分析（jdk1.8 默认开启，其它版本未测试）<br>-XX:-DoEscapeAnalysis 关闭逃逸分析<br>-XX:+EliminateLocks 开启锁消除（jdk1.8 默认开启，其它版本未测试）<br>-XX:-EliminateLocks 关闭锁消除<br>-XX:+EliminateAllocations 开启标量替换（jdk1.8 默认开启，其它版本未测试）<br>-XX:-EliminateAllocations 关闭就可以了</p><p>-XX:+PrintCompilation //在控制台打印编译过程信息<br>-XX:+UnlockDiagnosticVMOptions //解锁对 JVM 进行诊断的选项参数。默认是关闭的，开启后支持一些特定参数对 JVM 进行诊断<br>-XX:+PrintInlining //将内联方法打印出来</p><p>-XX:+PrintGC 输出 GC 日志<br>-XX:+PrintGCDetails 输出 GC 的详细日志<br>-XX:+PrintGCTimeStamps 输出 GC 的时间戳（以基准时间的形式）<br>-XX:+PrintGCDateStamps 输出 GC 的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800）<br>-XX:+PrintHeapAtGC 在进行 GC 的前后打印出堆的信息<br>-Xloggc:../logs/gc.log 日志文件的输出路径</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>StringBuffer</title>
      <link href="/2020/09/04/gaqcd1/"/>
      <url>/2020/09/04/gaqcd1/</url>
      
        <content type="html"><![CDATA[<p>由于 StringBuffer 中的 append 方法被 Synchronized 关键字修饰，会使用到锁，从而导致性能下降。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>类</title>
      <link href="/2020/09/04/we5szc/"/>
      <url>/2020/09/04/we5szc/</url>
      
        <content type="html"><![CDATA[<p>类编译，加载，链接，初始化。</p><h3 id="类连接"><a href="#类连接" class="headerlink" title="类连接"></a>类连接</h3><p>类在加载进来之后，会进行连接、初始化，最后才会被使用。在连接过程中，又包括验证、准备和解析三个部分。<br><strong>验证：</strong>验证类符合 Java 规范和 JVM 规范，在保证符合规范的前提下，避免危害虚拟机安全。<br><strong>准备：</strong>为类的静态变量分配内存，初始化为系统的初始值。对于 final static 修饰的变量，直接赋值为用户的定义值。例如，private final static int value=123，会在准备阶段分配内存，并初始化值为 123，而如果是 private static int value=123，这个阶段 value 的值仍然为 0。<br><strong>解析：</strong>将符号引用转为直接引用的过程。<br>**<br>javap 反编译命令，查看 class 文件。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><strong>初始化类的静态变量和静态代码块为用户自定义的值，初始化的顺序和 Java 源码从上到下的顺序一致。</strong><br>**<br><strong>JVM 会保证 <clinit>() 方法的线程安全，保证同一时间只有一个线程执行。</strong><br>**<br>**</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mmap零拷贝</title>
      <link href="/2020/09/04/ailstm/"/>
      <url>/2020/09/04/ailstm/</url>
      
        <content type="html"><![CDATA[<p>DirectBuffer 只优化了用户空间内部的拷贝。<br>MappedByteBuffer，跟 DirectBuffer 不同的是，MappedByteBuffer 是通过本地类调用<strong>mmap</strong>进行文件内存映射的，<strong>省去了向用户态的内存复制。</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>I/O操作</title>
      <link href="/2020/09/03/rbw833/"/>
      <url>/2020/09/03/rbw833/</url>
      
        <content type="html"><![CDATA[<p>I/O 操作分为磁盘 I/O 操作和网络 I/O 操作。<br>InputStream 的 read 操作：</p><ul><li>JVM 会发出 read()系统调用，并通过 read 系统调用向内核发起读请求；</li><li>内核向硬件发送读指令，并等待读就绪；</li><li>内核把将要读取的数据复制到指向的内核缓存中；</li><li>操作系统内核将数据复制到用户空间缓冲区，然后 read 系统调用返回。</li></ul><p>在这个过程中，数据先从外部设备复制到内核空间，再从内核空间复制到用户空间，这就<strong>发生了两次内存复制操作</strong>。这种操作会导致不必要的数据拷贝和上下文切换，从而降低 I/O 的性能。</p><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p><strong>如果没有数据就绪，这个读取操作将会一直被挂起，用户线程将会处于阻塞状态。</strong></p><h2 id="优化-I-O-操作"><a href="#优化-I-O-操作" class="headerlink" title="优化 I/O 操作"></a>优化 I/O 操作</h2><h3 id="1-使用缓冲区优化读写流操作"><a href="#1-使用缓冲区优化读写流操作" class="headerlink" title="1. 使用缓冲区优化读写流操作"></a>1. 使用缓冲区优化读写流操作</h3><p>NIO 与传统 I/O 不同，它是基于块（Block）的，它以块为基本单位处理数据。在 NIO 中，最为重要的两个组件是缓冲区（Buffer）和通道（Channel）。Buffer 是一块连续的内存块，是 NIO 读写数据的中转地。Channel 表示缓冲数据的源头或者目的地，它用于读取缓冲或者写入数据，是访问缓冲的接口。<br>传统 I/O 和 NIO 的最大区别就是传统 I/O 是面向流，NIO 是面向 Buffer。Buffer 可以将文件一次性读入内存再做后续处理，而传统的方式是边读文件边处理数据。</p><h3 id="2-使用-DirectBuffer-减少内存复制"><a href="#2-使用-DirectBuffer-减少内存复制" class="headerlink" title="2. 使用 DirectBuffer 减少内存复制"></a>2. 使用 DirectBuffer 减少内存复制</h3><p>NIO 的 Buffer 除了做了缓冲块优化之外，还提供了一个可以直接访问物理内存的类 DirectBuffer。</p><h3 id="3-多路复用器（Selector）"><a href="#3-多路复用器（Selector）" class="headerlink" title="3. 多路复用器（Selector）"></a>3. 多路复用器（Selector）</h3><p>Selector 是 Java NIO 编程的基础。用于检查一个或多个 NIO Channel 的状态是否处于可读、可写。<br>Selector 是基于<strong>事件驱动</strong>实现的，我们可以在 Selector 中注册 accpet、read 监听事件，Selector 会不断轮询注册在其上的 Channel，如果某个 Channel 上面发生监听事件，这个 Channel 就处于就绪状态，然后进行 I/O 操作。<br><strong>一个线程使用一个 Selector，通过轮询的方式，可以监听多个 Channel 上的事件</strong>。我们可以<strong>在注册 Channel 时设置该通道为非阻塞，当 Channel 上没有 I/O 操作时，该线程就不会一直等待了，而是会不断轮询所有 Channel，从而避免发生阻塞。</strong><br>**<br>目前操作系统的 I/O 多路复用机制都使用了 epoll，相比传统的 select 机制，epoll 没有最大连接句柄 1024 的限制。所以 Selector 在理论上可以轮询成千上万的客户端。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络I/O模型优化</title>
      <link href="/2020/09/03/xxtar0/"/>
      <url>/2020/09/03/xxtar0/</url>
      
        <content type="html"><![CDATA[<h2 id="网络-I-O-模型优化"><a href="#网络-I-O-模型优化" class="headerlink" title="网络 I/O 模型优化"></a>网络 I/O 模型优化</h2><h3 id="1-阻塞式-I-O"><a href="#1-阻塞式-I-O" class="headerlink" title="1.阻塞式 I/O"></a>1.阻塞式 I/O</h3><p>在整个 socket 通信工作流程中，socket 的默认状态是阻塞的。<strong>当发出一个不能立即完成的套接字调用时，其进程将被阻塞，被系统挂起，进入睡眠状态，一直等待相应的操作响应</strong>。</p><h3 id="2-非阻塞式-I-O"><a href="#2-非阻塞式-I-O" class="headerlink" title="2.非阻塞式 I/O"></a>2.非阻塞式 I/O</h3><p>我们需要设置一个线程对该操作进行轮询检查，这也是最传统的非阻塞 I/O 模型。</p><h3 id="3-I-O-复用"><a href="#3-I-O-复用" class="headerlink" title="3. I/O 复用"></a>3. I/O 复用</h3><p>如果使用用户线程轮询查看一个 I/O 操作的状态，在大量请求的情况下，这对于 CPU 的使用率无疑是种灾难。<br><strong>Linux 提供了 I/O 复用函数 select/poll/epoll：<br>**<br>**select()函数</strong>：它的用途是，在超时时间内，监听用户感兴趣的文件描述符上的可读可写和异常事件的发生。<br><strong>调用后 select() 函数会阻塞，直到有描述符就绪或者超时，函数返回。</strong><br>**<br><strong>poll()函数</strong>：在每次调用<strong>select()**函数之前，系统需要把一个 fd 从用户态拷贝到内核态，这样就给系统带来了一定的性能开销。再有</strong>单个进程监视的 fd 数量默认是 1024。**<br><strong>poll() 管理多个描述符也是通过轮询，根据描述符的状态进行处理，但 poll() 没有最大文件描述符数量的限制。</strong><br>poll() 和 select() 存在一个相同的<strong>缺点</strong>，那就是包含大量文件描述符的数组被整体复制到用户态和内核的地址空间之间，而无论这些文件描述符是否就绪，他们的开销都会随着文件描述符数量的增加而线性增大。</p><p><strong>epoll()函数</strong>：<strong>select/poll 是顺序扫描 fd 是否就绪，而且支持的 fd 数量不宜过大</strong>，<strong>epoll 使用事件驱动的方式代替轮询扫描 fd，**</strong>epoll 的性能更胜一筹，而且不会受到 fd 数量的限制。**<br>**</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>线程数大小</title>
      <link href="/2020/09/03/hogz4t/"/>
      <url>/2020/09/03/hogz4t/</url>
      
        <content type="html"><![CDATA[<p>一般多线程执行的任务类型可以分为<strong>CPU 密集型和 I/O 密集型</strong>，根据不同的任务类型，我们计算线程数的方法也不一样。<br><strong>CPU 密集型任务**</strong>：<strong>这种任务消耗的主要是 CPU 资源，可以将线程数设置为</strong>N（CPU 核心数）+1<strong>，比 CPU 核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其它原因导致的任务暂停而带来的影响。一旦任务暂停，CPU 就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用 CPU 的空闲时间。<br>当线程数量太小，同一时间大量请求将被阻塞在线程队列中排队等待执行线程，此时 CPU 没有得到充分利用；当线程数量太大，被创建的执行线程同时在争取 CPU 资源，又会导致大量的上下文切换，从而增加线程的执行时间，影响了整体执行效率。<br>**I/O 密集型任务：</strong>这种任务应用起来，系统会用大部分的时间来处理 I/O 交互，而线程在处理 I/O 的时间段内不会占用 CPU 来处理，这时就可以将 CPU 交出给其它线程使用。因此在*<em>I/O 密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是 2N。\</em>*</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>助力中小企业复产复工-云服务器优惠</title>
      <link href="/2020/09/03/lmvdl2/"/>
      <url>/2020/09/03/lmvdl2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://i.didiyun.com/2brfgkTahZt">https://i.didiyun.com/2brfgkTahZt</a><br><a href="https://i.didiyun.com/2brfgkTahZt">https://i.didiyun.com/2brfgkTahZt</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>内存模型</title>
      <link href="/2020/09/03/rsals7/"/>
      <url>/2020/09/03/rsals7/</url>
      
        <content type="html"><![CDATA[<hr><ul><li><p><a href="#m69Bp">JVM 内存模型的具体设计</a></p></li><li><p><a href="#TE5qQ">1. 堆（Heap）</a></p></li><li><p><a href="#5nAju">2. 程序计数器（Program Counter Register）</a></p></li><li><p><a href="#ClBVw">3. 方法区（Method Area）</a></p></li><li><p><a href="#2sdpJ">4.虚拟机栈（VM stack）</a></p></li><li><p><a href="#nnVDR">5.本地方法栈（Native Method Stack）</a></p></li></ul><h3 id="3-方法区（Method-Area）"><a href="#3-方法区（Method-Area）" class="headerlink" title="3. 方法区（Method Area）"></a>3. 方法区（Method Area）</h3><p>很多开发者都习惯将方法区称为“永久代”，其实这两者并不是等价的。<br>HotSpot 虚拟机使用永久代来实现方法区，但在其它虚拟机中，不存在永久代一说。因此，方法区只是 JVM 中规范的一部分，可以说，在 HotSpot 虚拟机中，设计人员使用了永久代来实现了 JVM 规范的方法区。<br>方法区主要是用来存放已被虚拟机加载的类相关信息，包括类信息、运行时常量池、字符串常量池。类信息又包括了类的版本、字段、方法、接口和父类等信息。<br>JVM 在执行某个类的时候，必须经过加载、连接、初始化，而连接又包括验证、准备、解析三个阶段。在加载类的时候，JVM 会先加载 class 文件，而在 class 文件中除了有类的版本、字段、方法和接口等描述信息外，还有一项信息是常量池(Constant Pool Table)，用于存放编译期间生成的各种字面量和符号引用。<br>字面量包括字符串（String a=“b”）、基本类型的常量（final 修饰的变量），符号引用则包括类和方法的全限定名（例如 String 这个类，它的全限定名就是 Java/lang/String）、字段的名称和描述符以及方法的名称和描述符。<br>而<strong>当类加载到内存中后，JVM 就会将 class 文件常量池中的内容存放到运行时的常量池中；在解析阶段，JVM 会把符号引用替换为直接引用（对象的索引值）</strong>。<br>例如，类中的一个字符串常量在 class 文件中时，存放在 class 文件常量池中的；在 JVM 加载完类之后，JVM 会将这个字符串常量放到运行时常量池中，并在解析阶段，指定该字符串对象的索引值。运行时常量池是全局共享的，多个类共用一个运行时常量池，class 文件中常量池多个相同的字符串在运行时常量池只会存在一份。<br>方法区与堆空间类似，也是一个共享内存区，<strong>所以方法区是线程共享的。假如两个线程都试图访问方法区中的同一个类信息，而这个类还没有装入 JVM，那么此时就只允许一个线程去加载它，另一个线程必须等待。</strong><br>在 HotSpot 虚拟机、Java7 版本中已经将永久代的静态变量和运行时常量池转移到了堆中，其余部分则存储在 JVM 的非堆内存中，而 Java8 版本已经将方法区中实现的永久代去掉了，并用元空间（class metadata）代替了之前的永久代，并且元空间的存储位置是本地内存。<strong>之前永久代的类的元数据存储在了元空间</strong>，<strong>永久代的静态变量（class static variables）以及运行时常量池（runtime constant pool）则跟 Java7 一样，转移到了堆中</strong>。</p><h3 id="4-虚拟机栈（VM-stack）"><a href="#4-虚拟机栈（VM-stack）" class="headerlink" title="4.虚拟机栈（VM stack）"></a>4.虚拟机栈（VM stack）</h3><p>当创建一个线程时，会在虚拟机栈中申请一个<strong>线程栈，用来保存方法的局部变量、操作数栈、动态链接方法和返回地址等信息，并参与方法的调用和返回</strong>。每一个方法的调用都伴随着栈帧的入栈操作，方法的返回则是栈帧的出栈操作。</p><h3 id="5-本地方法栈（Native-Method-Stack）"><a href="#5-本地方法栈（Native-Method-Stack）" class="headerlink" title="5.本地方法栈（Native Method Stack）"></a>5.本地方法栈（Native Method Stack）</h3><p>本地方法栈则用于管理本地方法的调用。但本地方法并不是用 Java 实现的，而是由 C 语言实现的。</p><p><strong>垃圾回收的重点就是关注堆和方法区中的内存了</strong>，堆中的回收主要是对象的回收，<strong>方法区的回收主要是废弃常量和无用的类的回收。</strong><br>**<br><strong>程序计数器、虚拟机栈和本地方法栈这 3 个区域是线程私有的。</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Happens-before规则</title>
      <link href="/2020/09/03/tz4aem/"/>
      <url>/2020/09/03/tz4aem/</url>
      
        <content type="html"><![CDATA[<p>##</p><hr><p>title: Happens-before 规则<br>author: future<br>top: true<br>cover: false<br>coverImg: /medias/featureimages/11.jpg<br>toc: true<br>mathjax: false<br>summary: Happens-before 规则<br>categories:</p><ul><li>Hexo</li></ul><p>tags:</p><ul><li>Github Actions</li><li>持续集成</li><li>语雀</li><li>Hexo</li><li>CI/CD</li></ul><p>urlname: Happens-before</p><p>date: 2020-03-02 23:15:33</p><p>img:</p><p>password:</p><p>updated:</p><hr><h2 id="Happens-before-规则"><a href="#Happens-before-规则" class="headerlink" title="Happens-before 规则"></a>Happens-before 规则</h2><p>Happens-before 规则来规范线程的执行顺序：</p><ul><li>程序次序规则：在单线程中，代码的执行是有序的，虽然可能会存在运行指令的重排序，但最终执行的结果和顺序执行的结果是一致的；</li><li>锁定规则：一个锁处于被一个线程锁定占用状态，那么只有当这个线程释放锁之后，其它线程才能再次获取锁操作；</li><li>volatile 变量规则：如果一个线程正在写 volatile 变量，其它线程读取该变量会发生在写入之后；</li><li>线程启动规则：Thread 对象的 start()方法先行发生于此线程的其它每一个动作；</li><li>线程终结规则：线程中的所有操作都先行发生于对此线程的终止检测；</li><li>对象终结规则：一个对象的初始化完成先行发生于它的 finalize()方法的开始；</li><li>传递性：如果操作 A happens-before 操作 B，操作 B happens-before 操作 C，那么操作 A happens-before 操作 C；</li><li>线程中断规则：对线程 interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>堆的信息</title>
      <link href="/2020/09/02/eq45ui/"/>
      <url>/2020/09/02/eq45ui/</url>
      
        <content type="html"><![CDATA[<p>[root@aliyun ~]# jps<br>1476 WrapperSimpleApp<br>27788 halo-latest.jar<br>25245 Jps<br>[root@aliyun ~]#<br>[root@aliyun ~]#** jmap -heap 27788**<br>Attaching to process ID 27788, please wait…<br>Debugger attached successfully.<br>Server compiler detected.<br>JVM version is 25.181-b13</p><p>using thread-local object allocation.<br>Mark Sweep Compact GC</p><p>Heap Configuration:<br>  MinHeapFreeRatio         = 40<br>  MaxHeapFreeRatio         = 70<br>  MaxHeapSize              = 268435456 (256.0MB)<br>  NewSize                  = 89456640 (85.3125MB)<br>  MaxNewSize               = 89456640 (85.3125MB)<br>  OldSize                  = 178978816 (170.6875MB)<br>  NewRatio                 = 2<br>  SurvivorRatio            = 8<br>  MetaspaceSize            = 21807104 (20.796875MB)<br>  CompressedClassSpaceSize = 1073741824 (1024.0MB)<br>  MaxMetaspaceSize         = 17592186044415 MB<br>  G1HeapRegionSize         = 0 (0.0MB)</p><p>Heap Usage:<br>New Generation (Eden + 1 Survivor Space):<br>  capacity = 80543744 (76.8125MB)<br>  used     = 43017784 (41.02495574951172MB)<br>  free     = 37525960 (35.78754425048828MB)<br>  53.40921822556448% used<br>Eden Space:<br>  capacity = 71630848 (68.3125MB)<br>  used     = 38657384 (36.866554260253906MB)<br>  free     = 32973464 (31.445945739746094MB)<br>  53.967508523701966% used<br>From Space:<br>  capacity = 8912896 (8.5MB)<br>  used     = 4360400 (4.1584014892578125MB)<br>  free     = 4552496 (4.3415985107421875MB)<br>  48.922370461856616% used<br>To Space:<br>  capacity = 8912896 (8.5MB)<br>  used     = 0 (0.0MB)<br>  free     = 8912896 (8.5MB)<br>  0.0% used<br>tenured generation:<br>  capacity = 178978816 (170.6875MB)<br>  used     = 48757456 (46.49873352050781MB)<br>  free     = 130221360 (124.18876647949219MB)<br>  27.242026229517577% used</p><p>32843 interned Strings occupying 3294488 bytes.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>都9月份了，今年就快过去了</title>
      <link href="/2020/09/01/tcnwt9/"/>
      <url>/2020/09/01/tcnwt9/</url>
      
        <content type="html"><![CDATA[<p>大家都有啥进步吗？</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>主题上传不上去  git rm -r --cached halo/</title>
      <link href="/2020/09/01/dq6307/"/>
      <url>/2020/09/01/dq6307/</url>
      
        <content type="html"><![CDATA[<p>spring@springdeMacBook-Pro halo % touch a<br>spring@springdeMacBook-Pro halo % git status<br>On branch master<br>Your branch is up to date with ‘origin/master’.<br>Changes to be committed:<br>  (use “git reset HEAD <file>…” to unstage)<br>new file:   ../halo-bak/halo-bak<br>spring@springdeMacBook-Pro halo % ls -l<br>total 120<br>-rw-r–r–   1 spring  staff   1070  9  1 14:55 LICENSE<br>-rw-r–r–   1 spring  staff  28963  9  1 14:55 README.md<br>-rw-r–r–   1 spring  staff  22063  9  1 14:55 _config.yml<br>-rw-r–r–   1 spring  staff      0  9  1 15:05 a<br>drwxr-xr-x   4 spring  staff    128  9  1 14:55 config<br>drwxr-xr-x   4 spring  staff    128  9  1 14:55 languages<br>drwxr-xr-x  20 spring  staff    640  9  1 14:55 layout<br>drwxr-xr-x   7 spring  staff    224  9  1 14:55 source<br>spring@springdeMacBook-Pro halo % git add .<br>fatal: in unpopulated submodule ‘themes/halo’<br>spring@springdeMacBook-Pro halo % ls -l            <br>total 120<br>-rw-r–r–   1 spring  staff   1070  9  1 14:55 LICENSE<br>-rw-r–r–   1 spring  staff  28963  9  1 14:55 README.md<br>-rw-r–r–   1 spring  staff  22063  9  1 14:55 _config.yml<br>-rw-r–r–   1 spring  staff      0  9  1 15:05 a<br>drwxr-xr-x   4 spring  staff    128  9  1 14:55 config<br>drwxr-xr-x   4 spring  staff    128  9  1 14:55 languages<br>drwxr-xr-x  20 spring  staff    640  9  1 14:55 layout<br>drwxr-xr-x   7 spring  staff    224  9  1 14:55 source<br>spring@springdeMacBook-Pro halo % pwd<br>/Users/spring/hexo/blog/themes/halo<br>spring@springdeMacBook-Pro halo % pwd              <br>/Users/spring/hexo/blog/themes/halo<br>spring@springdeMacBook-Pro halo % cd ..<br>spring@springdeMacBook-Pro themes % ls -l<br>total 0<br>drwxr-xr-x  10 spring  staff  320  9  1 15:05 halo<br>drwxr-xr-x   3 spring  staff   96  9  1 14:47 halo-bak<br>drwxr-xr-x  12 spring  staff  384  9  1 14:53 landscape<br>spring@springdeMacBook-Pro themes % git rm -r –cached halo<br>fatal: pathspec ‘–cached’ did not match any files <strong>//-命令不对 **<br>spring@springdeMacBook-Pro themes % git rm -r –cached halo/<br>fatal: pathspec ‘–cached’ did not match any files<br>spring@springdeMacBook-Pro themes % git  –cached halo/<br>git: ‘–cached’ is not a git command. See ‘git –help’.<br>spring@springdeMacBook-Pro themes % git  –cached halo/<br>unknown option: –cached<br>usage: git [–version] [–help] [-C <path>] [-c <name>=<value>]<br>           [–exec-path[=<path>]] [–html-path] [–man-path] [–info-path]<br>           [-p | –paginate | -P | –no-pager] [–no-replace-objects] [–bare]<br>           [–git-dir=<path>] [–work-tree=<path>] [–namespace=<name>]<br>           <command> [<args>]<br>spring@springdeMacBook-Pro themes % git git rm -r –cached halo/<br>git: ‘git’ is not a git command. See ‘git –help’.<br>The most similar command is<br>init<br>spring@springdeMacBook-Pro themes % <br>spring@springdeMacBook-Pro themes %</strong> **<strong>git*</strong>* rm -r –cached **<strong>halo/*</strong>* **<br>rm ‘themes/halo’<br>spring@springdeMacBook-Pro themes % ls -l<br>total 0<br>drwxr-xr-x  10 spring  staff  320  9  1 15:05 halo<br>drwxr-xr-x   3 spring  staff   96  9  1 14:47 halo-bak<br>drwxr-xr-x  12 spring  staff  384  9  1 14:53 landscape<br>spring@springdeMacBook-Pro themes % ls -la halo<br>total 120<br>drwxr-xr-x  10 spring  staff    320  9  1 15:05 .<br>drwxr-xr-x   5 spring  staff    160  9  1 14:53 ..<br>-rw-r–r–   1 spring  staff   1070  9  1 14:55 LICENSE<br>-rw-r–r–   1 spring  staff  28963  9  1 14:55 README.md<br>-rw-r–r–   1 spring  staff  22063  9  1 14:55 _config.yml<br>-rw-r–r–   1 spring  staff      0  9  1 15:05 a<br>drwxr-xr-x   4 spring  staff    128  9  1 14:55 config<br>drwxr-xr-x   4 spring  staff    128  9  1 14:55 languages<br>drwxr-xr-x  20 spring  staff    640  9  1 14:55 layout<br>drwxr-xr-x   7 spring  staff    224  9  1 14:55 source<br>spring@springdeMacBook-Pro themes % git status<br>On branch master<br>Your branch is up to date with ‘origin/master’.<br>Changes to be committed:<br>  (use “git reset HEAD <file>…” to unstage)<br>renamed:    halo -&gt; halo-bak/halo-bak<br>Untracked files:<br>  (use “git add <file>…” to include in what will be committed)<br>halo/<br>spring@springdeMacBook-Pro themes % cd halo<br>spring@springdeMacBook-Pro halo % ls -l<br>total 120<br>-rw-r–r–   1 spring  staff   1070  9  1 14:55 LICENSE<br>-rw-r–r–   1 spring  staff  28963  9  1 14:55 README.md<br>-rw-r–r–   1 spring  staff  22063  9  1 14:55 _config.yml<br>-rw-r–r–   1 spring  staff      0  9  1 15:05 a<br>drwxr-xr-x   4 spring  staff    128  9  1 14:55 config<br>drwxr-xr-x   4 spring  staff    128  9  1 14:55 languages<br>drwxr-xr-x  20 spring  staff    640  9  1 14:55 layout<br>drwxr-xr-x   7 spring  staff    224  9  1 14:55 source<br>spring@springdeMacBook-Pro halo % cd ..<br>spring@springdeMacBook-Pro themes % <strong>git add .</strong><br>spring@springdeMacBook-Pro themes % ls -l<br>total 0<br>drwxr-xr-x  10 spring  staff  320  9  1 15:05 halo<br>drwxr-xr-x   3 spring  staff   96  9  1 14:47 halo-bak<br>drwxr-xr-x  12 spring  staff  384  9  1 14:53 landscape<br>spring@springdeMacBook-Pro themes % <strong>git status</strong><br>On branch master<br>Your branch is up to date with ‘origin/master’.<br>Changes to be committed:<br>  (use “git reset HEAD <file>…” to unstage)<br>renamed:    halo -&gt; halo-bak/halo-bak<br>new file:   halo/LICENSE<br>new file:   halo/README.md<br>spring@springdeMacBook-Pro themes % <br>spring@springdeMacBook-Pro themes % <br>spring@springdeMacBook-Pro themes % <strong>git commit -m “halo-cache”</strong><br>[master 1326941] halo-cache<br> 198 files changed, 25301 insertions(+)<br> rename themes/{halo =&gt; halo-bak/halo-bak} (100%)<br> create mode 100644 themes/halo/LICENSE<br> create mode 100644 themes/halo/README.md<br> create mode 100644 themes/halo/_config.yml<br> create mode 100644 themes/halo/a<br> create mode 100644 themes/halo/config/scaffolds/draft.md</p><p>spring@springdeMacBook-Pro themes % <br>spring@springdeMacBook-Pro themes % <br>spring@springdeMacBook-Pro themes % git status                <br>On branch master<br>Your branch is ahead of ‘origin/master’ by 1 commit.<br>  (use “git push” to publish your local commits)<br>nothing to commit, working tree clean<br>spring@springdeMacBook-Pro themes % git remote <br>origin<br>spring@springdeMacBook-Pro themes % git remote  -vv<br>origin <a href="https://github.com/future1314/blog.git">https://github.com/future1314/blog.git</a> (fetch)<br>origin <a href="https://github.com/future1314/blog.git">https://github.com/future1314/blog.git</a> (push)<br>spring@springdeMacBook-Pro themes % <br>spring@springdeMacBook-Pro themes % <br>spring@springdeMacBook-Pro themes % <strong>git push</strong><br>Enumerating objects: 256, done.<br>Counting objects: 100% (256/256), done.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (224/224), done.<br>Writing objects: 100% (254/254), 5.02 MiB | 334.00 KiB/s, done.<br>Total 254 (delta 10), reused 241 (delta 9)<br>remote: Resolving deltas: 100% (10/10), completed with 1 local object.<br>To <a href="https://github.com/future1314/blog.git">https://github.com/future1314/blog.git</a><br>   d694e47..1326941  master -&gt; master<br>spring@springdeMacBook-Pro themes % git remote  -vv<br>origin <a href="https://github.com/future1314/blog.git">https://github.com/future1314/blog.git</a> (fetch)<br>origin <a href="https://github.com/future1314/blog.git">https://github.com/future1314/blog.git</a> (push)<br>spring@springdeMacBook-Pro themes % git status     <br>On branch master<br>Your branch is up to date with ‘origin/master’.<br>nothing to commit, working tree clean</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac配置.bash_profile，重启终端后配置失效</title>
      <link href="/2020/08/31/osop7e/"/>
      <url>/2020/08/31/osop7e/</url>
      
        <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>使用的终端是 zsh，zsh 加载的是 ~/.zshrc 文件，而 ‘.zshrc’ 文件中并没有定义任务环境变量</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>1、终端中执行命令，打开.zshrc 文件：</p><table><thead><tr><th><code>open -e ~/.zshrc</code></th></tr></thead></table><p>2、在~/.zshrc 文件最后，增加一行：</p><table><thead><tr><th><code>source ~/.bash_profile</code></th></tr></thead></table><p>3、执行命令，使其立即生效</p><table><thead><tr><th><code>source ~/.zshrc </code></th></tr></thead></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>语雀自动同步到hexo博客(转摘)</title>
      <link href="/2020/08/31/wcu8bq/"/>
      <url>/2020/08/31/wcu8bq/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.yuque.com/hxfqg9">yichen 的信安知识库</a>/<a href="https://www.yuque.com/hxfqg9/web">web 方向</a>/<a href="https://www.yuque.com/hxfqg9/web/gtb5ck">语雀自动同步到 hexo 博客</a>/</p><h1 id="语雀自动同步到-hexo-博客"><a href="#语雀自动同步到-hexo-博客" class="headerlink" title="语雀自动同步到 hexo 博客"></a>语雀自动同步到 hexo 博客</h1><blockquote><p>hexo+github pages+yuque-hexo 插件+github actions+serverless 云函数+语雀<br>实现语雀写完文章能够自动同步到 hexo 博客</p></blockquote><p>本文针对已经搭建好 hexo 博客的，如果没有搭好正常的 hexo 博客的可以去网上找一下，很方便</p><h1 id="hexo-同步语雀内容"><a href="#hexo-同步语雀内容" class="headerlink" title="hexo 同步语雀内容"></a>hexo 同步语雀内容</h1><p>用到了这个项目：<a href="https://github.com/x-cold/yuque-hexo">https://github.com/x-cold/yuque-hexo</a><br>安装：npm i -g yuque-hexo</p><p>然后把 package.json 的内容添加上下面这些</p><pre class=" language-json"><code class="language-json">  <span class="token property">"yuqueConfig"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"postPath"</span><span class="token operator">:</span> <span class="token string">"source/_posts"</span><span class="token punctuation">,</span>    <span class="token property">"cachePath"</span><span class="token operator">:</span> <span class="token string">"yuque.json"</span><span class="token punctuation">,</span>    <span class="token property">"mdNameFormat"</span><span class="token operator">:</span> <span class="token string">"slug"</span><span class="token punctuation">,</span>    <span class="token property">"adapter"</span><span class="token operator">:</span> <span class="token string">"hexo"</span><span class="token punctuation">,</span>    <span class="token property">"concurrency"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"https://www.yuque.com/api/v2"</span><span class="token punctuation">,</span>    <span class="token property">"login"</span><span class="token operator">:</span> <span class="token string">"hxfqg9"</span><span class="token punctuation">,</span>    <span class="token property">"repo"</span><span class="token operator">:</span> <span class="token string">"web"</span><span class="token punctuation">,</span>    <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"语雀token"</span><span class="token punctuation">,</span>    <span class="token property">"onlyPublished"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"onlyPublic"</span><span class="token operator">:</span> <span class="token boolean">true</span>  &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"yuque-hexo"</span><span class="token operator">:</span> <span class="token string">"^1.6.0"</span>  &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token property">"hexo"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"4.2.1"</span>  &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span></code></pre><p>这里说一下里面的 baseurl 是固定的<br>login 和 repo 是如下图这样对应的，个人界面和团队界面都可以</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594906415602-fa6f487a-b51b-4dbc-8ee7-49cbadeb94aa.png#align=left&display=inline&height=484&originHeight=968&originWidth=1920&size=217553&status=done&style=none&width=960" alt="image.png"></p><p>token 是在右上角头像 -&gt; 账户设置 -&gt; Token 添加的，权限的话只给读取就可以<br>ps.公开的知识库也要设置 Token</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594906494636-a353aa41-83de-478c-bd10-908e927671ad.png#align=left&display=inline&height=358&originHeight=716&originWidth=1360&size=70891&status=done&style=stroke&width=680" alt="image.png"></p><p>在 “scripts” 中添加</p><pre class=" language-json"><code class="language-json">    <span class="token property">"sync"</span><span class="token operator">:</span> <span class="token string">"yuque-hexo sync"</span><span class="token punctuation">,</span>    <span class="token property">"clean:yuque"</span><span class="token operator">:</span> <span class="token string">"yuque-hexo clean"</span><span class="token punctuation">,</span></code></pre><p>这样整体下来我的 package.json 内容如下</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"hexo-site"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"hexo generate"</span><span class="token punctuation">,</span>    <span class="token property">"clean"</span><span class="token operator">:</span> <span class="token string">"hexo clean"</span><span class="token punctuation">,</span>    <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"hexo deploy"</span><span class="token punctuation">,</span>    <span class="token property">"server"</span><span class="token operator">:</span> <span class="token string">"hexo server"</span><span class="token punctuation">,</span>    <span class="token property">"sync"</span><span class="token operator">:</span> <span class="token string">"yuque-hexo sync"</span><span class="token punctuation">,</span>    <span class="token property">"clean:yuque"</span><span class="token operator">:</span> <span class="token string">"yuque-hexo clean"</span>  &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token property">"yuqueConfig"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"postPath"</span><span class="token operator">:</span> <span class="token string">"source/_posts"</span><span class="token punctuation">,</span>    <span class="token property">"cachePath"</span><span class="token operator">:</span> <span class="token string">"yuque.json"</span><span class="token punctuation">,</span>    <span class="token property">"mdNameFormat"</span><span class="token operator">:</span> <span class="token string">"slug"</span><span class="token punctuation">,</span>    <span class="token property">"adapter"</span><span class="token operator">:</span> <span class="token string">"hexo"</span><span class="token punctuation">,</span>    <span class="token property">"concurrency"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"https://www.yuque.com/api/v2"</span><span class="token punctuation">,</span>    <span class="token property">"login"</span><span class="token operator">:</span> <span class="token string">"hxfqg9"</span><span class="token punctuation">,</span>    <span class="token property">"repo"</span><span class="token operator">:</span> <span class="token string">"web"</span><span class="token punctuation">,</span>    <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"语雀token"</span><span class="token punctuation">,</span>    <span class="token property">"onlyPublished"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"onlyPublic"</span><span class="token operator">:</span> <span class="token boolean">true</span>  &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"yuque-hexo"</span><span class="token operator">:</span> <span class="token string">"^1.6.0"</span>  &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token property">"hexo"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"4.2.1"</span>  &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"hexo"</span><span class="token operator">:</span> <span class="token string">"^4.2.1"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-deployer-git"</span><span class="token operator">:</span> <span class="token string">"^2.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-archive"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-baidu-sitemap"</span><span class="token operator">:</span> <span class="token string">"^0.1.6"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-category"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-feed"</span><span class="token operator">:</span> <span class="token string">"^2.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-index"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-json-content"</span><span class="token operator">:</span> <span class="token string">"^4.2.3"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-searchdb"</span><span class="token operator">:</span> <span class="token string">"^1.3.1"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-sitemap"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-generator-tag"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-renderer-ejs"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-renderer-marked"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-renderer-stylus"</span><span class="token operator">:</span> <span class="token string">"^1.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-server"</span><span class="token operator">:</span> <span class="token string">"^1.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"hexo-wordcount"</span><span class="token operator">:</span> <span class="token string">"^6.0.1"</span>  &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这时候用 <code>yuque-hexo sync</code> 就会把语雀的文章给下载下来，下载到 \source_posts</p><p>然后 <code>hexo g &amp;&amp; hexo s</code> 就可以访问 <code>127.0.0.1:4000</code> 本地看一下了<br>手动发布是 <code>hexo g &amp;&amp; hexo d</code></p><p><strong>针对语雀图片无法正常显示的解决办法</strong><br>在主题的 layout 文件夹中的 post.ejs 文件中加上一句</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>referrer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no-referrer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594907231130-a2e3c7c0-d207-4151-9242-1f50e0d7ce7e.png#align=left&display=inline&height=195&originHeight=351&originWidth=841&size=45968&status=done&style=stroke&width=468" alt="image.png"></p><h1 id="github-actions-自动更新"><a href="#github-actions-自动更新" class="headerlink" title="github actions 自动更新"></a>github actions 自动更新</h1><p>在 github 上创建一个私有仓库（因为会涉及到一些 token 啥的）仓库名字无所谓<br><strong>注意</strong>：在仓库里面再放一个仓库是没法把里面那个仓库 push 到 github 的，只会传一个空文件夹，导致后期博客成了空白页面，最简单粗暴的办法就是把你 git clone 的 hexo 主题里的 <code>.git</code> 文件夹给删掉</p><p>然后在 hexo 的目录下运行如下命令</p><pre class=" language-git"><code class="language-git">git initgit add .git commit -m <span class="token string">"first commit"</span>git remote add origin https://github.com/yichen115/blog.gitgit push -u origin master</code></pre><p>去 github 的 settings 创建一个 token</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594907389117-35b3ce5c-a92c-4aa7-92be-54649660707f.png#align=left&display=inline&height=293&originHeight=585&originWidth=1620&size=86343&status=done&style=stroke&width=810" alt="image.png"></p><p>只勾上这一个即可</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594907459775-b583ee13-02ef-43a1-9ae4-0ca550bfafd2.png#align=left&display=inline&height=314&originHeight=627&originWidth=746&size=51696&status=done&style=stroke&width=373" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594907515533-450ee291-fb82-43d5-b398-6c71161fb93d.png#align=left&display=inline&height=223&originHeight=445&originWidth=1015&size=45884&status=done&style=stroke&width=507.5" alt="image.png"></p><p>生成了 token 之后一定要记下来，再回来就没法看了</p><p>然后来到刚才创建的私有仓库的 settings</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594907596811-6c001063-9e2a-4f7d-86b3-0fe426dfc794.png#align=left&display=inline&height=343&originHeight=686&originWidth=1769&size=86336&status=done&style=stroke&width=884.5" alt="image.png"></p><p>添加两个 secret<br><strong>GH_REF</strong> 是你博客的仓库地址 github.com/yichen115/yichen115.github.io<br>注意去掉前面 https://</p><p><strong>GE_TOKEN</strong> 是刚才生成的 token</p><p>然后来到 actions，点击 set up a workflow yourself</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594907728538-4ded4257-da88-4361-8f2f-e8ba4d107e75.png#align=left&display=inline&height=267&originHeight=534&originWidth=1023&size=70314&status=done&style=stroke&width=511.5" alt="image.png"></p><p>编辑内容如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Blog CI/CD<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">,</span> repository_dispatch<span class="token punctuation">]</span><span class="token key atrule">jobs</span><span class="token punctuation">:</span>  <span class="token key atrule">blog-cicd</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo blog build &amp; deploy    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest    <span class="token key atrule">env</span><span class="token punctuation">:</span>      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai    <span class="token key atrule">steps</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout codes        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup node        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"12.x"</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache node modules        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v1        <span class="token key atrule">with</span><span class="token punctuation">:</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> ~/.npm          <span class="token key atrule">key</span><span class="token punctuation">:</span> $&amp;<span class="token comment" spellcheck="true">#123;&amp;#123; runner.os &amp;#125;&amp;#125;-node-$&amp;#123;&amp;#123; hashFiles('**/package-lock.json') &amp;#125;&amp;#125;</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install dependencies        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          npm install hexo-cli -g          npm install yuque-hexo -g          npm install          yuque-hexo sync</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Generate files        <span class="token key atrule">run</span><span class="token punctuation">:</span> hexo generate      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy blog        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">          git clone "https://$&amp;#123;&amp;#123; secrets.GH_REF &amp;#125;&amp;#125;" deploy_git          mv ./deploy_git/.git ./public/          cd ./public          git config user.name "yichen"          git config user.email "1097179511@qq.com"          git add .          git commit -m "GitHub Actions Auto Builder at $(date +'%Y-%m-%d %H:%M:%S')"          git push --force --quiet "https://$&amp;#123;&amp;#123; secrets.GH_TOKEN &amp;#125;&amp;#125;@$&amp;#123;&amp;#123; secrets.GH_REF &amp;#125;&amp;#125;" master:master</span></code></pre><p>下面那个 user.name 和 user.email 根据自己的情况改一下，注意对齐</p><p>弄完之后每当 push 或 repository_dispatch 的时候都会自动的进行更新</p><h1 id="配置-serverless-云函数"><a href="#配置-serverless-云函数" class="headerlink" title="配置 serverless 云函数"></a>配置 serverless 云函数</h1><p>来这里 <a href="https://console.cloud.tencent.com/scf/">https://console.cloud.tencent.com/scf/</a> 注册个账号<br>新建一个函数服务</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594908198919-65a8454a-6c7f-423c-9f1c-8f2303dba8e1.png#align=left&display=inline&height=219&originHeight=438&originWidth=1084&size=39713&status=done&style=stroke&width=542" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594908241755-2c116717-6257-4157-b901-c5f815fa0746.png#align=left&display=inline&height=244&originHeight=488&originWidth=776&size=31268&status=done&style=stroke&width=388" alt="image.png"></p><p>内容写</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">main_handler</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"https://api.github.com/repos/yichen115/blog/dispatches"</span><span class="token punctuation">,</span>    json <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"event_type": "run-it"&amp;#125;,</span>    headers <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"User-Agent":'curl/7.52.1',</span>              <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>              <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/vnd.github.everest-preview+json'</span><span class="token punctuation">,</span>              <span class="token string">'Authorization'</span><span class="token punctuation">:</span> <span class="token string">'token 你的GH_TOKEN'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;)</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">204</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"This's OK!"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> r<span class="token punctuation">.</span>status_code</code></pre><p>post 请求里只需要改用户名和仓库名（yichen115/blog）后面是固定的<br>那个 token 是带着的，完整的就是 ‘Authorization’: ‘token xxxxxxxxxxxxxx’</p><p>点下面那个测试，返回 This’s OK!</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594908381040-ed7eea9c-3a31-4aa9-b5bf-f52aedbc3b2c.png#align=left&display=inline&height=160&originHeight=320&originWidth=582&size=13660&status=done&style=stroke&width=291" alt="image.png"></p><p>同时 github actions 也会收到指令，去执行之前在 main.yml 设定好的</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594908463062-3bfbcd34-0652-4de5-b222-0f0b01a8258a.png#align=left&display=inline&height=270&originHeight=539&originWidth=1115&size=50764&status=done&style=stroke&width=557.5" alt="image.png"></p><p>过一阵就成下面那个绿色的对号了，然后去访问一下博客，看看是否正常。可以的话就证明云函数可以了</p><p>创建一个触发器</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594908622171-b3d1f2e4-9e6e-4ef1-9e39-689c0ad36fef.png#align=left&display=inline&height=200&originHeight=400&originWidth=730&size=32431&status=done&style=stroke&width=365" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594905642566-7df0adc3-6d78-409c-bec0-7886aefed25b.png#align=left&display=inline&height=332&originHeight=663&originWidth=925&size=46379&status=done&style=stroke&width=462.5" alt="image.png"></p><p>他会给你一个访问路径，记下来</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594908721093-7679f975-e4c2-4386-bc3f-adae0bdc91b8.png#align=left&display=inline&height=234&originHeight=467&originWidth=712&size=30610&status=done&style=stroke&width=356" alt="image.png"></p><h1 id="配置语雀-webhook"><a href="#配置语雀-webhook" class="headerlink" title="配置语雀 webhook"></a>配置语雀 webhook</h1><p>在知识库中选择设置</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594908818070-60085ef8-46d5-44b3-af0b-e6946125f6dd.png#align=left&display=inline&height=175&originHeight=349&originWidth=473&size=13535&status=done&style=stroke&width=236.5" alt="image.png"></p><p>触发规则自己定就好啦</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594908880210-34a97734-e0a4-4d64-89bd-8e6976ce7a37.png#align=left&display=inline&height=280&originHeight=559&originWidth=1134&size=54956&status=done&style=stroke&width=567" alt="image.png"></p><p>**<br>这篇文章更新的时候发现有失败的可能<br>**<br><strong><img src="https://cdn.nlark.com/yuque/0/2020/png/268938/1594909836406-93471a4a-4ea0-4417-89d3-d1230ca044f7.png#align=left&display=inline&height=155&originHeight=172&originWidth=290&size=6687&status=done&style=stroke&width=262" alt="image.png"></strong><br>**<br><strong>我的博客地址：</strong><a href="https://yichen115.github.io/"><strong>https://yichen115.github.io</strong></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试语雀--变量“无法”引用&amp;yq 文本加密</title>
      <link href="/2020/08/30/rzt7w7/"/>
      <url>/2020/08/30/rzt7w7/</url>
      
        <content type="html"><![CDATA[<p>测试通过！</p><p>有的时候云函数回调用失败！</p><p><strong>变量需要在源 blog 里。</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>报错 git push -u origin master</title>
      <link href="/2020/08/30/drkrdi/"/>
      <url>/2020/08/30/drkrdi/</url>
      
        <content type="html"><![CDATA[<p>1884  2020-08-28 17:29:45 root git clone <a href="https://gitee.com/yadong.zhang/DBlog.git">https://gitee.com/yadong.zhang/DBlog.git</a><br>1885  2020-08-28 17:29:51 root ls -l<br>1886  2020-08-28 17:29:56 root cd DBlog/<br>1887  2020-08-28 17:30:37 root ls -l<br>1888  2020-08-28 17:30:55 root chmod 755 build.sh<br>1889  2020-08-28 17:30:57 root ls -l<br>1890  2020-08-28 17:31:06 root ./build.sh dev<br>1891  2020-08-28 18:17:39 root cd project/<br>1892  2020-08-28 18:17:49 root cd DBlog/<br>1893  2020-08-28 18:17:51 root ls -l<br>1894  2020-08-28 18:18:00 root cd docs/<br>1895  2020-08-28 18:18:01 root ls -l<br>1896  2020-08-28 18:18:06 root cd db/<br>1897  2020-08-28 18:18:09 root ls -l<br>1898  2020-08-28 18:18:12 root pwd<br>1899  2020-08-28 18:22:07 root cd ../../<br>1900  2020-08-28 18:23:23 root ls -l<br>1901  2020-08-28 18:23:27 root cd ..<br>1902  2020-08-28 18:23:30 root ls -l<br>1903  2020-08-28 17:54:28 root redis-cli<br>1904  2020-08-28 18:01:20 root mysql -udb_ketang -p<br>1905  2020-08-28 18:02:25 root mysql -u db_ketang -p<br>1906  2020-08-28 18:02:44 root mysql -u root -p<br>1907  2020-08-28 18:07:08 root mysql -uroot -p<br>1908  2020-08-28 18:10:44 root mysql -udb_ketang -p<br>1909  2020-08-28 18:11:03 root mysql -udb_ketang -pguest2020@<br>1910  2020-08-28 18:11:15 root mysql -udb_ketang -p<br>1911  2020-08-28 18:11:27 root mysql -uroot -p<br>1912  2020-08-28 18:21:52 root top<br>1913  2020-08-28 18:48:04 root ls<br>1914  2020-08-28 18:48:06 root jps<br>1915  2020-08-28 18:48:12 root ps<br>1916  2020-08-28 18:48:54 root jps<br>1917  2020-08-28 18:49:09 root ps<br>1918  2020-08-28 18:49:13 root jps<br>1919  2020-08-28 18:49:25 root natstat<br>1920  2020-08-28 18:49:31 root netstat<br>1921  2020-08-28 18:49:47 root netstat |grep 8085<br>1922  2020-08-28 18:51:13 root jps<br>1923  2020-08-28 18:51:19 root ps<br>1924  2020-08-29 12:02:05 root cd project/lastest/<br>1925  2020-08-29 12:02:07 root ls -l<br>1926  2020-08-29 12:02:23 root java -jar ketang-v1.jar &amp;<br>1927  2020-08-29 23:23:11 root ls -l<br>1928  2020-08-29 23:23:30 root ls -ltr<br>1929  2020-08-29 23:22:23 root ls -l<br>1930  2020-08-29 23:22:32 root npm i -g yuque-hexo<br>1931  2020-08-29 23:23:54 root ls -l<br>1932  2020-08-29 23:24:48 root git clone <a href="https://github.com/x-cold/yuque-hexo">https://github.com/x-cold/yuque-hexo</a><br>1933  2020-08-29 23:25:01 root ls -ltr<br>1934  2020-08-29 23:25:06 root cd yuque-hexo/<br>1935  2020-08-29 23:25:09 root ls -l<br>1936  2020-08-29 23:25:58 root cp package.json ../pr/<br>1937  2020-08-29 23:26:21 root cp package.json ../packa<br>1938  2020-08-29 23:26:27 root ls -ltr<br>1939  2020-08-29 23:26:32 root ll<br>1940  2020-08-29 23:26:54 root vi package.json<br>1941  2020-08-29 23:31:18 root cat package.json<br>1942  2020-08-29 23:32:16 root vi package.json<br>1943  2020-08-29 23:37:11 root cat package.json<br>1944  2020-08-29 23:39:48 root ls -l<br>1945  2020-08-29 23:39:55 root cd ..<br>1946  2020-08-29 23:39:58 root ls -l<br>1947  2020-08-29 23:40:20 root cp -R yuque-hexo yuque-hexo-bak<br>1948  2020-08-29 23:40:23 root ls -l<br>1949  2020-08-29 23:40:30 root ls -l yuque-hexo-bak/<br>1950  2020-08-29 23:40:34 root ls -l<br>1951  2020-08-29 23:40:40 root cd -<br>1952  2020-08-29 23:40:44 root pwd<br>1953  2020-08-29 23:40:46 root ls -l<br>1954  2020-08-29 23:40:56 root git init<br>1955  2020-08-29 23:41:04 root ls -la<br>1956  2020-08-29 23:42:46 root git add .<br>1957  2020-08-29 23:42:58 root git commit -m “first commit”<br>1958  2020-08-29 23:43:59 root git config –global user.email “2488809638.com”<br>1959  2020-08-29 23:44:29 root git config –global user.name “future1314”<br>1960  2020-08-29 23:44:34 root git commit -m “first commit”<br>1961  2020-08-29 23:46:04 root git remote add origin <a href="https://github.com/future1314/yqblog.git">https://github.com/future1314/yqblog.git</a><br>1962  2020-08-29 23:47:08 root git remote -vv<br>1963  2020-08-29 23:48:05 root git remote add origin <a href="https://github.com/future1314/yqblog.git">https://github.com/future1314/yqblog.git</a><br>1964  2020-08-29 23:48:32 root git remote add origi2n <a href="https://github.com/future1314/yqblog.git">https://github.com/future1314/yqblog.git</a><br>1965  2020-08-29 23:48:43 root git remote -vv<br>1966  2020-08-29 23:49:07 root git push -u origi2n master<br>1967  2020-08-30 11:18:14 root cd ../lib/node_modules/hexo-cli/bin/hexo<br>1968  2020-08-30 11:18:24 root cd /lib/node_modules/hexo-cli/bin/hexo<br>1969  2020-08-30 11:19:04 root cd /opt/node-v12.18.3-linux-x64<br>1970  2020-08-30 11:19:06 root cd /lib/node_modules/hexo-cli/bin/hexo<br>1971  2020-08-30 11:19:14 root cd lib/node_modules/hexo-cli/bin/hexo<br>1972  2020-08-30 11:19:24 root cd lib/node_modules/hexo-cli/bin/<br>1973  2020-08-30 11:19:27 root hxo<br>1974  2020-08-30 11:19:31 root hexo<br>1975  2020-08-30 11:19:34 root ls -l<br>1976  2020-08-30 11:19:41 root ./hexo<br>1977  2020-08-30 11:19:51 root ./hexo -version<br>1978  2020-08-30 11:19:57 root ./hexo -v<br>1979  2020-08-30 11:20:01 root ./hexo v<br>1980  2020-08-30 11:22:30 root pwd<br>1981  2020-08-30 11:22:45 root top<br>1982  2020-08-30 11:27:12 root ls -l<br>1983  2020-08-30 11:27:18 root cd ..<br>1984  2020-08-30 11:27:20 root ls -l<br>1985  2020-08-30 11:27:24 root cd ../<br>1986  2020-08-30 11:27:26 root ls -l<br>1987  2020-08-30 11:27:31 root cd yuque-hexo/<br>1988  2020-08-30 11:27:33 root pwd<br>1989  2020-08-30 11:28:34 root cd -<br>1990  2020-08-30 11:28:38 root pwd<br>1991  2020-08-30 11:29:03 root cd ~<br>1992  2020-08-30 11:29:05 root pwd<br>1993  2020-08-30 11:29:14 root cd project/yu<br>1994  2020-08-30 11:29:19 root cd project/<br>1995  2020-08-30 11:29:22 root cd ../<br>1996  2020-08-30 11:29:24 root cd yuque-hexo<br>1997  2020-08-30 11:29:27 root ls -l<br>1998  2020-08-30 11:29:32 root yuque-hexo sync<br>1999  2020-08-30 11:29:57 root pwd<br>2000  2020-08-30 11:30:04 root cat package.json<br>2001  2020-08-30 11:31:01 root tsource /etc/profile<br>2002  2020-08-30 11:31:02 root source /etc/profile<br>2003  2020-08-30 11:31:06 root yuque-hexo sync<br>2004  2020-08-30 11:33:04 root top<br>2005  2020-08-30 11:34:02 root pwdf<br>2006  2020-08-30 11:34:03 root pwd<br>2007  2020-08-30 11:34:10 root ls -l<br>2008  2020-08-30 11:34:23 root yuque-hexo sync<br>2009  2020-08-30 11:34:30 root ./yuque-hexo sync<br>2010  2020-08-30 11:34:38 root top<br>2011  2020-08-30 11:39:08 root yuque-hexo sync<br>2012  2020-08-30 11:39:13 root yuque-hexo.js<br>2013  2020-08-30 11:40:33 root yuque-hexo.js sync<br>2014  2020-08-30 11:41:08 root ls -l<br>2015  2020-08-30 11:41:16 root cd source/<br>2016  2020-08-30 11:41:18 root ls -l<br>2017  2020-08-30 11:41:20 root cd _posts/<br>2018  2020-08-30 11:41:23 root ls -l<br>2019  2020-08-30 11:42:29 root hexo g &amp;&amp; hexo s<br>2020  2020-08-30 11:42:47 root cd ../..<br>2021  2020-08-30 11:42:50 root ls -l<br>2022  2020-08-30 11:42:54 root hexo g &amp;&amp; hexo s<br>2023  2020-08-30 11:43:40 root cat config.js<br>2024  2020-08-30 11:44:32 root ls -l<br>2025  2020-08-30 11:44:47 root hexo g &amp;&amp; hexo s<br>2026  2020-08-30 11:45:10 root hexo<br>2027  2020-08-30 11:45:47 root source /etc/profile<br>2028  2020-08-30 11:45:49 root hexo<br>2029  2020-08-30 11:47:41 root hexo g &amp;&amp; hexo s<br>2030  2020-08-30 11:48:06 root ls -l<br>2031  2020-08-30 11:48:12 root cat yuque.json<br>2032  2020-08-30 11:48:49 root ls -l<br>2033  2020-08-30 11:48:53 root cat package.json<br>2034  2020-08-30 11:50:25 root hexo g &amp;&amp; hexo s<br>2035  2020-08-30 11:50:33 root cd /<br>2036  2020-08-30 11:50:35 root hexo g &amp;&amp; hexo s<br>2037  2020-08-30 11:55:56 root hexo g &amp;&amp; hexo s<br>2038  2020-08-30 11:56:33 root top<br>2039  2020-08-30 11:58:48 root hexo g &amp;&amp; hexo s<br>2040  2020-08-30 11:59:11 root hexo help<br>2041  2020-08-30 11:59:35 root hexo<br>2042  2020-08-30 11:59:42 root hexo -v<br>2043  2020-08-30 12:00:13 root top<br>2044  2020-08-30 12:04:38 root pwd<br>2045  2020-08-30 12:04:42 root hexo s<br>2046  2020-08-30 12:04:51 root hexo server<br>2047  2020-08-30 12:05:08 root cd yuque-hexo<br>2048  2020-08-30 12:05:24 root hexo s<br>2049  2020-08-30 12:05:28 root hexo server<br>2050  2020-08-30 12:05:39 root ls -l<br>2051  2020-08-30 12:05:51 root hexo server<br>2052  2020-08-30 12:06:25 root rm -rf node_modules &amp;&amp; npm install –force<br>2053  2020-08-30 12:07:07 root hexo server<br>2054  2020-08-30 12:07:29 root npm audit fix<br>2055  2020-08-30 12:07:57 root hexo server<br>2056  2020-08-30 12:08:18 root top<br>2057  2020-08-30 12:09:38 root npm install hexo –save<br>2058  2020-08-30 12:10:14 root hexo server<br>2059  2020-08-30 12:10:24 root ls -l<br>2060  2020-08-30 12:10:45 root hexo g &amp;&amp; hexo s<br>2061  2020-08-30 12:13:08 root top<br>2062  2020-08-30 12:13:35 root npm install -g hexo-cli<br>2063  2020-08-30 12:13:48 root hexo g &amp;&amp; hexo s<br>2064  2020-08-30 12:13:57 root top<br>2065  2020-08-30 12:15:04 root npm install hexo-deployer-git –save<br>2066  2020-08-30 12:15:48 root hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy<br>2067  2020-08-30 12:15:59 root ls -l<br>2068  2020-08-30 12:16:22 root hexo g &amp;&amp; hexo s<br>2069  2020-08-30 12:16:53 root hexo generate &amp;&amp; hexo server<br>2070  2020-08-30 12:18:04 root npm install hexo-deployer-git –save<br>2071  2020-08-30 12:18:20 root hexo generate &amp;&amp; hexo server<br>2072  2020-08-30 12:19:09 root hexo g &amp;&amp; hexo s<br>2073  2020-08-30 12:19:13 root git config –list<br>2074  2020-08-30 12:19:49 root git config –global user.email “<em>**@163.com”<br>2075  2020-08-30 12:19:51 root git config –list<br>2076  2020-08-30 12:20:25 root ls -l<br>2077  2020-08-30 12:20:37 root vi config.js<br>2078  2020-08-30 12:21:56 root hexo deploy<br>2079  2020-08-30 12:23:56 root top<br>2080  2020-08-30 12:26:56 root ls -l<br>2081  2020-08-30 12:27:03 root cd source/_posts/<br>2082  2020-08-30 12:27:06 root ll<br>2083  2020-08-30 12:27:14 root cat bfeage.md<br>2084  2020-08-30 12:27:22 root ll<br>2085  2020-08-30 12:27:25 root ls -l<br>2086  2020-08-30 12:27:48 root npm i -g yuque-hexo<br>2087  2020-08-30 12:28:34 root ls -l<br>2088  2020-08-30 12:28:37 root cd -<br>2089  2020-08-30 12:28:40 root ls -l<br>2090  2020-08-30 12:28:45 root cd node_modules/<br>2091  2020-08-30 12:28:48 root ll<br>2092  2020-08-30 12:29:02 root cd ..<br>2093  2020-08-30 12:29:04 root ls -l<br>2094  2020-08-30 12:29:24 root hexo<br>2095  2020-08-30 13:01:16 root cd yuque-hexo<br>2096  2020-08-30 13:01:18 root ls -l<br>2097  2020-08-30 13:01:29 root git diff<br>2098  2020-08-30 13:01:56 root ls -ltr<br> 2099  2020-08-30 13:02:00 root ls -ltr<br>2100  2020-08-30 13:02:15 root hexo<br>2101  2020-08-30 12:52:23 root git remote add origin <a href="https://github.com/future1314/yqblog.git">https://github.com/future1314/yqblog.git</a><br>2102  2020-08-30 12:52:26 root cd yuque-hexo<br>2103  2020-08-30 12:52:28 root ls -l<br>2104  2020-08-30 12:52:32 root top<br>2105  2020-08-30 12:53:43 root npm install -g hexo<br>2106  2020-08-30 12:54:04 root ls -l<br>2107  2020-08-30 12:54:31 root hexo init<br>2108  2020-08-30 12:55:08 root ls -l<br>2109  2020-08-30 12:55:17 root cd public/<br>2110  2020-08-30 12:55:19 root ls -l<br>2111  2020-08-30 12:55:23 root cd ..<br>2112  2020-08-30 13:42:54 root cd yuque-hexo<br>2113  2020-08-30 13:43:00 root git remote -vv<br>2114  2020-08-30 13:43:16 root top<br>2115  2020-08-30 13:46:09 root pwd<br>2116  2020-08-30 13:46:13 root hexo<br>2117  2020-08-30 13:46:26 root which hexo<br>2118  2020-08-30 13:46:35 root ls -l<br>2119  2020-08-30 13:46:39 root cd node_modules/<br>2120  2020-08-30 13:46:43 root ls -l<br>2121  2020-08-30 13:46:49 root ls -l h<br>2122  2020-08-30 13:46:52 root ls -l h</em><br>2123  2020-08-30 13:47:13 root ll<br>2124  2020-08-30 13:47:21 root cd ..<br>2125  2020-08-30 13:47:27 root cd bin/<br>2126  2020-08-30 13:47:29 root ls -l<br>2127  2020-08-30 13:47:52 root cd ..<br>2128  2020-08-30 13:48:02 root git push -u origi2n master<br>2129  2020-08-30 13:49:14 root git add .<br>2130  2020-08-30 13:49:38 root git commit -m “update”<br>2131  2020-08-30 13:50:04 root cat package.json<br>2132  2020-08-30 13:50:13 root git commit -m “update”<br>2133  2020-08-30 13:50:25 root git push -u origi2n master<br>2134  2020-08-30 13:50:59 root git diff<br>2135  2020-08-30 13:51:09 root git pull<br>2136  2020-08-30 13:53:25 root git push -u origi2n master<br>2137  2020-08-30 13:54:14 root git diff<br>2138  2020-08-30 16:34:20 root cd h<br>2139  2020-08-30 16:34:29 root cd blog/<br>2140  2020-08-30 16:34:31 root ls -ltr<br>2141  2020-08-30 16:34:41 root vi package.json<br>2142  2020-08-30 16:38:49 root cat  package.json<br>2143  2020-08-30 16:40:20 root vi package.json<br>2144  2020-08-30 16:41:15 root ls -l<br>2145  2020-08-30 16:42:54 root top<br>2146  2020-08-30 16:43:42 root histyory<br>2147  2020-08-30 16:43:46 root history<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#</p><hr><h2 id="hexo-init-foderName"><a href="#hexo-init-foderName" class="headerlink" title="hexo init foderName"></a>hexo init foderName</h2><p>[root@hecs-x-medium-2-linux-20200322093022 blog]# ls -l<br>总用量 80<br>-rw-r–r–   1 root root  2441 8 月  30 16:16 _config.yml<br>drwxr-xr-x 162 root root  4096 8 月  30 16:17 node_modules<br>-rw-r–r–   1 root root  1070 8 月  30 16:40 package.json<br>-rw-r–r–   1 root root 55016 8 月  30 16:17 package-lock.json<br>drwxr-xr-x   2 root root  4096 8 月  30 16:16 scaffolds<br>drwxr-xr-x   3 root root  4096 8 月  30 16:16 source<br>drwxr-xr-x   3 root root  4096 8 月  30 16:16 themes<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# <strong>npm install</strong><br>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: <a href="mailto:&#102;&#115;&#101;&#x76;&#x65;&#x6e;&#x74;&#115;&#x40;&#50;&#x2e;&#x31;&#46;&#51;">&#102;&#115;&#101;&#x76;&#x65;&#x6e;&#x74;&#115;&#x40;&#50;&#x2e;&#x31;&#46;&#51;</a> (node_modules/fsevents):<br>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for <a href="mailto:&#x66;&#x73;&#101;&#x76;&#x65;&#110;&#x74;&#x73;&#x40;&#50;&#46;&#x31;&#x2e;&#51;">&#x66;&#x73;&#101;&#x76;&#x65;&#110;&#x74;&#x73;&#x40;&#50;&#46;&#x31;&#x2e;&#51;</a>: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”linux”,”arch”:”x64”})</p><p>added 225 packages from 160 contributors and audited 409 packages in 11.415s</p><p>10 packages are looking for funding<br> run <code>npm fund</code> for details</p><p>found 2 low severity vulnerabilities<br> run <code>npm audit fix</code> to fix them, or <code>npm audit</code> for details<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# ls -l<br>总用量 156<br>-rw-r–r–   1 root root   2441 8 月  30 16:16 _config.yml<br>drwxr-xr-x 313 root root  12288 8 月  30 16:44 node_modules<br>-rw-r–r–   1 root root   1068 8 月  30 16:44 package.json<br>-rw-r–r–   1 root root 124126 8 月  30 16:44 package-lock.json<br>drwxr-xr-x   2 root root   4096 8 月  30 16:16 scaffolds<br>drwxr-xr-x   3 root root   4096 8 月  30 16:16 source<br>drwxr-xr-x   3 root root   4096 8 月  30 16:16 themes<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# tree .<br>-bash: tree: 未找到命令<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# <strong>cat _config.yml</strong></p><h1 id="Hexo-Configuration"><a href="#Hexo-Configuration" class="headerlink" title="Hexo Configuration"></a>Hexo Configuration</h1><h2 id="Docs-https-hexo-io-docs-configuration-html"><a href="#Docs-https-hexo-io-docs-configuration-html" class="headerlink" title="Docs: https://hexo.io/docs/configuration.html"></a>Docs: <a href="https://hexo.io/docs/configuration.html">https://hexo.io/docs/configuration.html</a></h2><h2 id="Source-https-github-com-hexojs-hexo"><a href="#Source-https-github-com-hexojs-hexo" class="headerlink" title="Source: https://github.com/hexojs/hexo/"></a>Source: <a href="https://github.com/hexojs/hexo/">https://github.com/hexojs/hexo/</a></h2><h1 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h1><p>title: Hexo<br>subtitle: ‘’<br>description: ‘’<br>keywords:<br>author: John Doe<br>language: en<br>timezone: ‘’</p><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><h2 id="If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child-39-and-root-as-‘-child-‘"><a href="#If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child-39-and-root-as-‘-child-‘" class="headerlink" title="If your site is put in a subdirectory, set url as ‘http://yoursite.com/child&#39; and root as ‘/child/‘"></a>If your site is put in a subdirectory, set url as ‘<a href="http://yoursite.com/child&#39;">http://yoursite.com/child&#39;</a> and root as ‘/child/‘</h2><p>url: <a href="http://yoursite.com/">http://yoursite.com</a><br>root: /<br>permalink: :year/:month/:day/:title/<br>permalink_defaults:<br>pretty_urls:<br> trailing_index: true # Set to false to remove trailing ‘index.html’ from permalinks<br> trailing_html: true # Set to false to remove trailing ‘.html’ from permalinks</p><h1 id="Directory"><a href="#Directory" class="headerlink" title="Directory"></a>Directory</h1><p>source_dir: source<br>public_dir: public<br>tag_dir: tags<br>archive_dir: archives<br>category_dir: categories<br>code_dir: downloads/code<br>i18n_dir: :lang<br>skip_render:</p><h1 id="Writing"><a href="#Writing" class="headerlink" title="Writing"></a>Writing</h1><p>new_post_name: :title.md # File name of new posts<br>default_layout: post<br>titlecase: false # Transform title into titlecase<br>external_link:<br> enable: true # Open external links in new tab<br> field: site # Apply to the whole site<br> exclude: ‘’<br>filename_case: 0<br>render_drafts: false<br>post_asset_folder: false<br>relative_link: false<br>future: true<br>highlight:<br> enable: true<br> line_number: true<br> auto_detect: false<br> tab_replace: ‘’<br> wrap: true<br> hljs: false<br>prismjs:<br> enable: false<br> preprocess: true<br> line_number: true<br> tab_replace: ‘’</p><h1 id="Home-page-setting"><a href="#Home-page-setting" class="headerlink" title="Home page setting"></a>Home page setting</h1><h1 id="path-Root-path-for-your-blogs-index-page-default-‘’"><a href="#path-Root-path-for-your-blogs-index-page-default-‘’" class="headerlink" title="path: Root path for your blogs index page. (default = ‘’)"></a>path: Root path for your blogs index page. (default = ‘’)</h1><h1 id="per-page-Posts-displayed-per-page-0-disable-pagination"><a href="#per-page-Posts-displayed-per-page-0-disable-pagination" class="headerlink" title="per_page: Posts displayed per page. (0 = disable pagination)"></a>per_page: Posts displayed per page. (0 = disable pagination)</h1><h1 id="order-by-Posts-order-Order-by-date-descending-by-default"><a href="#order-by-Posts-order-Order-by-date-descending-by-default" class="headerlink" title="order_by: Posts order. (Order by date descending by default)"></a>order_by: Posts order. (Order by date descending by default)</h1><p>index_generator:<br> path: ‘’<br> per_page: 10<br> order_by: -date</p><h1 id="Category-amp-Tag"><a href="#Category-amp-Tag" class="headerlink" title="Category &amp; Tag"></a>Category &amp; Tag</h1><p>default_category: uncategorized<br>category_map:<br>tag_map:</p><h1 id="Metadata-elements"><a href="#Metadata-elements" class="headerlink" title="Metadata elements"></a>Metadata elements</h1><h2 id="https-developer-mozilla-org-en-US-docs-Web-HTML-Element-meta"><a href="#https-developer-mozilla-org-en-US-docs-Web-HTML-Element-meta" class="headerlink" title="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta"></a><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta">https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</a></h2><p>meta_generator: true</p><h1 id="Date-Time-format"><a href="#Date-Time-format" class="headerlink" title="Date / Time format"></a>Date / Time format</h1><h2 id="Hexo-uses-Moment-js-to-parse-and-display-date"><a href="#Hexo-uses-Moment-js-to-parse-and-display-date" class="headerlink" title="Hexo uses Moment.js to parse and display date"></a>Hexo uses Moment.js to parse and display date</h2><h2 id="You-can-customize-the-date-format-as-defined-in"><a href="#You-can-customize-the-date-format-as-defined-in" class="headerlink" title="You can customize the date format as defined in"></a>You can customize the date format as defined in</h2><h2 id="http-momentjs-com-docs-displaying-format"><a href="#http-momentjs-com-docs-displaying-format" class="headerlink" title="http://momentjs.com/docs/#/displaying/format/"></a><a href="http://momentjs.com/docs/#/displaying/format/">http://momentjs.com/docs/#/displaying/format/</a></h2><p>date_format: YYYY-MM-DD<br>time_format: HH:mm:ss</p><h2 id="updated-option-supports-‘mtime’-‘date’-‘empty’"><a href="#updated-option-supports-‘mtime’-‘date’-‘empty’" class="headerlink" title="updated_option supports ‘mtime’, ‘date’, ‘empty’"></a>updated_option supports ‘mtime’, ‘date’, ‘empty’</h2><p>updated_option: ‘mtime’</p><h1 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a>Pagination</h1><h2 id="Set-per-page-to-0-to-disable-pagination"><a href="#Set-per-page-to-0-to-disable-pagination" class="headerlink" title="Set per_page to 0 to disable pagination"></a>Set per_page to 0 to disable pagination</h2><p>per_page: 10<br>pagination_dir: page</p><h1 id="Include-Exclude-file-s"><a href="#Include-Exclude-file-s" class="headerlink" title="Include / Exclude file(s)"></a>Include / Exclude file(s)</h1><h2 id="include-exclude-options-only-apply-to-the-‘source-‘-folder"><a href="#include-exclude-options-only-apply-to-the-‘source-‘-folder" class="headerlink" title="include:/exclude: options only apply to the ‘source/‘ folder"></a>include:/exclude: options only apply to the ‘source/‘ folder</h2><p>include:<br>exclude:<br>ignore:</p><h1 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h1><h2 id="Plugins-https-hexo-io-plugins"><a href="#Plugins-https-hexo-io-plugins" class="headerlink" title="Plugins: https://hexo.io/plugins/"></a>Plugins: <a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></h2><h2 id="Themes-https-hexo-io-themes"><a href="#Themes-https-hexo-io-themes" class="headerlink" title="Themes: https://hexo.io/themes/"></a>Themes: <a href="https://hexo.io/themes/">https://hexo.io/themes/</a></h2><p>theme: landscape</p><h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><h2 id="Docs-https-hexo-io-docs-one-command-deployment"><a href="#Docs-https-hexo-io-docs-one-command-deployment" class="headerlink" title="Docs: https://hexo.io/docs/one-command-deployment"></a>Docs: <a href="https://hexo.io/docs/one-command-deployment">https://hexo.io/docs/one-command-deployment</a></h2><p><strong>deploy:</strong><br>**  type: ‘’**</p><h1 id="Hexo-Configuration-1"><a href="#Hexo-Configuration-1" class="headerlink" title="Hexo Configuration"></a>Hexo Configuration</h1><h2 id="Docs-https-hexo-io-docs-configuration-html-1"><a href="#Docs-https-hexo-io-docs-configuration-html-1" class="headerlink" title="Docs: https://hexo.io/docs/configuration.html"></a>Docs: <a href="https://hexo.io/docs/configuration.html">https://hexo.io/docs/configuration.html</a></h2><h2 id="Source-https-github-com-hexojs-hexo-1"><a href="#Source-https-github-com-hexojs-hexo-1" class="headerlink" title="Source: https://github.com/hexojs/hexo/"></a>Source: <a href="https://github.com/hexojs/hexo/">https://github.com/hexojs/hexo/</a></h2><h1 id="Site-1"><a href="#Site-1" class="headerlink" title="Site"></a>Site</h1><p>title: Hexo<br>subtitle: ‘’<br>description: ‘’<br>keywords:<br>author: John Doe<br>language: en<br>timezone: ‘’</p><h1 id="URL-1"><a href="#URL-1" class="headerlink" title="URL"></a>URL</h1><h2 id="If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child-39-and-root-as-‘-child-‘-1"><a href="#If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child-39-and-root-as-‘-child-‘-1" class="headerlink" title="If your site is put in a subdirectory, set url as ‘http://yoursite.com/child&#39; and root as ‘/child/‘"></a>If your site is put in a subdirectory, set url as ‘<a href="http://yoursite.com/child&#39;">http://yoursite.com/child&#39;</a> and root as ‘/child/‘</h2><p>url: <a href="http://yoursite.com/">http://yoursite.com</a><br>root: /<br>permalink: :year/:month/:day/:title/<br>permalink_defaults:<br>pretty_urls:<br> trailing_index: true # Set to false to remove trailing ‘index.html’ from permalinks<br> trailing_html: true # Set to false to remove trailing ‘.html’ from permalinks</p><h1 id="Directory-1"><a href="#Directory-1" class="headerlink" title="Directory"></a>Directory</h1><p>“_config.yml” 106L, 2441C<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#** npm install hexo-deployer-git –save**<br>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: <a href="mailto:&#x66;&#x73;&#101;&#118;&#101;&#110;&#x74;&#x73;&#64;&#50;&#46;&#49;&#46;&#x33;">&#x66;&#x73;&#101;&#118;&#101;&#110;&#x74;&#x73;&#64;&#50;&#46;&#49;&#46;&#x33;</a> (node_modules/fsevents):<br>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for <a href="mailto:&#x66;&#x73;&#101;&#118;&#101;&#110;&#x74;&#x73;&#x40;&#50;&#46;&#x31;&#46;&#51;">&#x66;&#x73;&#101;&#118;&#101;&#110;&#x74;&#x73;&#x40;&#50;&#46;&#x31;&#46;&#51;</a>: wanted {“os”:”darwin”,”arch”:”any”} (current: {“os”:”linux”,”arch”:”x64”})</p><ul><li><a href="mailto:&#x68;&#x65;&#x78;&#x6f;&#x2d;&#x64;&#x65;&#112;&#x6c;&#111;&#121;&#x65;&#114;&#45;&#x67;&#x69;&#x74;&#64;&#x32;&#x2e;&#49;&#46;&#48;">&#x68;&#x65;&#x78;&#x6f;&#x2d;&#x64;&#x65;&#112;&#x6c;&#111;&#121;&#x65;&#114;&#45;&#x67;&#x69;&#x74;&#64;&#x32;&#x2e;&#49;&#46;&#48;</a><br>added 28 packages from 336 contributors and audited 437 packages in 7.521s</li></ul><p>10 packages are looking for funding<br> run <code>npm fund</code> for details</p><p>found 3 low severity vulnerabilities<br> run <code>npm audit fix</code> to fix them, or <code>npm audit</code> for details<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# ls -ltr<br>总用量 164<br>drwxr-xr-x   3 root root   4096 8 月  30 16:16 source<br>drwxr-xr-x   2 root root   4096 8 月  30 16:16 scaffolds<br>-rw-r–r–   1 root root   2441 8 月  30 16:16 _config.yml<br>drwxr-xr-x   3 root root   4096 8 月  30 16:16 themes<br>drwxr-xr-x 330 root root  12288 8 月  30 16:47 node_modules<br>-rw-r–r–   1 root root   1103 8 月  30 16:47 package.json<br>-rw-r–r–   1 root root 132199 8 月  30 16:47 package-lock.json<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# ls -l<br>总用量 164<br>-rw-r–r–   1 root root   2441 8 月  30 16:16 _config.yml<br>drwxr-xr-x 330 root root  12288 8 月  30 16:47 node_modules<br>-rw-r–r–   1 root root   1103 8 月  30 16:47 package.json<br>-rw-r–r–   1 root root 132199 8 月  30 16:47 package-lock.json<br>drwxr-xr-x   2 root root   4096 8 月  30 16:16 scaffolds<br>drwxr-xr-x   3 root root   4096 8 月  30 16:16 source<br>drwxr-xr-x   3 root root   4096 8 月  30 16:16 themes<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# vi _config.yml<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# ls -ltr<br>总用量 164<br>drwxr-xr-x   3 root root   4096 8 月  30 16:16 source<br>drwxr-xr-x   2 root root   4096 8 月  30 16:16 scaffolds<br>drwxr-xr-x   3 root root   4096 8 月  30 16:16 themes<br>drwxr-xr-x 330 root root  12288 8 月  30 16:47 node_modules<br>-rw-r–r–   1 root root   1103 8 月  30 16:47 package.json<br>-rw-r–r–   1 root root 132199 8 月  30 16:47 package-lock.json<br>-rw-r–r–   1 root root   2522 8 月  30 16:50 _config.yml<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# ls -l<br>总用量 164<br>-rw-r–r–   1 root root   2522 8 月  30 16:50 _config.yml<br>drwxr-xr-x 330 root root  12288 8 月  30 16:47 node_modules<br>-rw-r–r–   1 root root   1103 8 月  30 16:47 package.json<br>-rw-r–r–   1 root root 132199 8 月  30 16:47 package-lock.json<br>drwxr-xr-x   2 root root   4096 8 月  30 16:16 scaffolds<br>drwxr-xr-x   3 root root   4096 8 月  30 16:16 source<br>drwxr-xr-x   3 root root   4096 8 月  30 16:16 themes<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# cat _config.yml</p><h1 id="Hexo-Configuration-2"><a href="#Hexo-Configuration-2" class="headerlink" title="Hexo Configuration"></a>Hexo Configuration</h1><h2 id="Docs-https-hexo-io-docs-configuration-html-2"><a href="#Docs-https-hexo-io-docs-configuration-html-2" class="headerlink" title="Docs: https://hexo.io/docs/configuration.html"></a>Docs: <a href="https://hexo.io/docs/configuration.html">https://hexo.io/docs/configuration.html</a></h2><h2 id="Source-https-github-com-hexojs-hexo-2"><a href="#Source-https-github-com-hexojs-hexo-2" class="headerlink" title="Source: https://github.com/hexojs/hexo/"></a>Source: <a href="https://github.com/hexojs/hexo/">https://github.com/hexojs/hexo/</a></h2><h1 id="Site-2"><a href="#Site-2" class="headerlink" title="Site"></a>Site</h1><p>title: Hexo<br>subtitle: ‘’<br>description: ‘’<br>keywords:<br>author: John Doe<br>language: en<br>timezone: ‘’</p><h1 id="URL-2"><a href="#URL-2" class="headerlink" title="URL"></a>URL</h1><h2 id="If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child-39-and-root-as-‘-child-‘-2"><a href="#If-your-site-is-put-in-a-subdirectory-set-url-as-‘http-yoursite-com-child-39-and-root-as-‘-child-‘-2" class="headerlink" title="If your site is put in a subdirectory, set url as ‘http://yoursite.com/child&#39; and root as ‘/child/‘"></a>If your site is put in a subdirectory, set url as ‘<a href="http://yoursite.com/child&#39;">http://yoursite.com/child&#39;</a> and root as ‘/child/‘</h2><p>url: <a href="http://yoursite.com/">http://yoursite.com</a><br>root: /<br>permalink: :year/:month/:day/:title/<br>permalink_defaults:<br>pretty_urls:<br> trailing_index: true # Set to false to remove trailing ‘index.html’ from permalinks<br> trailing_html: true # Set to false to remove trailing ‘.html’ from permalinks</p><h1 id="Directory-2"><a href="#Directory-2" class="headerlink" title="Directory"></a>Directory</h1><p>source_dir: source<br>public_dir: public<br>tag_dir: tags<br>archive_dir: archives<br>category_dir: categories<br>code_dir: downloads/code<br>i18n_dir: :lang<br>skip_render:</p><h1 id="Writing-1"><a href="#Writing-1" class="headerlink" title="Writing"></a>Writing</h1><p>new_post_name: :title.md # File name of new posts<br>default_layout: post<br>titlecase: false # Transform title into titlecase<br>external_link:<br> enable: true # Open external links in new tab<br> field: site # Apply to the whole site<br> exclude: ‘’<br>filename_case: 0<br>render_drafts: false<br>post_asset_folder: false<br>relative_link: false<br>future: true<br>highlight:<br> enable: true<br> line_number: true<br> auto_detect: false<br> tab_replace: ‘’<br> wrap: true<br> hljs: false<br>prismjs:<br> enable: false<br> preprocess: true<br> line_number: true<br> tab_replace: ‘’</p><h1 id="Home-page-setting-1"><a href="#Home-page-setting-1" class="headerlink" title="Home page setting"></a>Home page setting</h1><h1 id="path-Root-path-for-your-blogs-index-page-default-‘’-1"><a href="#path-Root-path-for-your-blogs-index-page-default-‘’-1" class="headerlink" title="path: Root path for your blogs index page. (default = ‘’)"></a>path: Root path for your blogs index page. (default = ‘’)</h1><h1 id="per-page-Posts-displayed-per-page-0-disable-pagination-1"><a href="#per-page-Posts-displayed-per-page-0-disable-pagination-1" class="headerlink" title="per_page: Posts displayed per page. (0 = disable pagination)"></a>per_page: Posts displayed per page. (0 = disable pagination)</h1><h1 id="order-by-Posts-order-Order-by-date-descending-by-default-1"><a href="#order-by-Posts-order-Order-by-date-descending-by-default-1" class="headerlink" title="order_by: Posts order. (Order by date descending by default)"></a>order_by: Posts order. (Order by date descending by default)</h1><p>index_generator:<br> path: ‘’<br> per_page: 10<br> order_by: -date</p><h1 id="Category-amp-Tag-1"><a href="#Category-amp-Tag-1" class="headerlink" title="Category &amp; Tag"></a>Category &amp; Tag</h1><p>default_category: uncategorized<br>category_map:<br>tag_map:</p><h1 id="Metadata-elements-1"><a href="#Metadata-elements-1" class="headerlink" title="Metadata elements"></a>Metadata elements</h1><h2 id="https-developer-mozilla-org-en-US-docs-Web-HTML-Element-meta-1"><a href="#https-developer-mozilla-org-en-US-docs-Web-HTML-Element-meta-1" class="headerlink" title="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta"></a><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta">https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta</a></h2><p>meta_generator: true</p><h1 id="Date-Time-format-1"><a href="#Date-Time-format-1" class="headerlink" title="Date / Time format"></a>Date / Time format</h1><h2 id="Hexo-uses-Moment-js-to-parse-and-display-date-1"><a href="#Hexo-uses-Moment-js-to-parse-and-display-date-1" class="headerlink" title="Hexo uses Moment.js to parse and display date"></a>Hexo uses Moment.js to parse and display date</h2><h2 id="You-can-customize-the-date-format-as-defined-in-1"><a href="#You-can-customize-the-date-format-as-defined-in-1" class="headerlink" title="You can customize the date format as defined in"></a>You can customize the date format as defined in</h2><h2 id="http-momentjs-com-docs-displaying-format-1"><a href="#http-momentjs-com-docs-displaying-format-1" class="headerlink" title="http://momentjs.com/docs/#/displaying/format/"></a><a href="http://momentjs.com/docs/#/displaying/format/">http://momentjs.com/docs/#/displaying/format/</a></h2><p>date_format: YYYY-MM-DD<br>time_format: HH:mm:ss</p><h2 id="updated-option-supports-‘mtime’-‘date’-‘empty’-1"><a href="#updated-option-supports-‘mtime’-‘date’-‘empty’-1" class="headerlink" title="updated_option supports ‘mtime’, ‘date’, ‘empty’"></a>updated_option supports ‘mtime’, ‘date’, ‘empty’</h2><p>updated_option: ‘mtime’</p><h1 id="Pagination-1"><a href="#Pagination-1" class="headerlink" title="Pagination"></a>Pagination</h1><h2 id="Set-per-page-to-0-to-disable-pagination-1"><a href="#Set-per-page-to-0-to-disable-pagination-1" class="headerlink" title="Set per_page to 0 to disable pagination"></a>Set per_page to 0 to disable pagination</h2><p>per_page: 10<br>pagination_dir: page</p><h1 id="Include-Exclude-file-s-1"><a href="#Include-Exclude-file-s-1" class="headerlink" title="Include / Exclude file(s)"></a>Include / Exclude file(s)</h1><h2 id="include-exclude-options-only-apply-to-the-‘source-‘-folder-1"><a href="#include-exclude-options-only-apply-to-the-‘source-‘-folder-1" class="headerlink" title="include:/exclude: options only apply to the ‘source/‘ folder"></a>include:/exclude: options only apply to the ‘source/‘ folder</h2><p>include:<br>exclude:<br>ignore:</p><h1 id="Extensions-1"><a href="#Extensions-1" class="headerlink" title="Extensions"></a>Extensions</h1><h2 id="Plugins-https-hexo-io-plugins-1"><a href="#Plugins-https-hexo-io-plugins-1" class="headerlink" title="Plugins: https://hexo.io/plugins/"></a>Plugins: <a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a></h2><h2 id="Themes-https-hexo-io-themes-1"><a href="#Themes-https-hexo-io-themes-1" class="headerlink" title="Themes: https://hexo.io/themes/"></a>Themes: <a href="https://hexo.io/themes/">https://hexo.io/themes/</a></h2><p>theme: landscape</p><h1 id="Deployment-1"><a href="#Deployment-1" class="headerlink" title="Deployment"></a>Deployment</h1><h2 id="Docs-https-hexo-io-docs-one-command-deployment-1"><a href="#Docs-https-hexo-io-docs-one-command-deployment-1" class="headerlink" title="Docs: https://hexo.io/docs/one-command-deployment"></a>Docs: <a href="https://hexo.io/docs/one-command-deployment">https://hexo.io/docs/one-command-deployment</a></h2><p><strong>deploy:</strong><br>**  type: ‘git’**<br>**  repo: <a href="mailto:&#x67;&#105;&#116;&#64;&#x67;&#105;&#116;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;">&#x67;&#105;&#116;&#64;&#x67;&#105;&#116;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;</a>:future1314/future1314.github.io.git**<br>**  branch: master**</p><p>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# hexo<br>INFO  Validating config<br>Usage: hexo <command></p><p>Commands:<br> clean     Remove generated files and cache.<br> config    Get or set configurations.<br> deploy    Deploy your website.<br> generate  Generate static files.<br> help      Get help on a command.<br> init      Create a new Hexo folder.<br> list      List the information of the site<br> migrate   Migrate your site from other system to Hexo.<br> new       Create a new post.<br> publish   Moves a draft post from _drafts to _posts folder.<br> render    Render files with renderer plugins.<br> server    Start the server.<br> version   Display version information.</p><p>Global Options:<br> –config  Specify config file instead of using _config.yml<br> –cwd     Specify the CWD<br> –debug   Display all verbose messages in the terminal<br> –draft   Display draft posts<br> –safe    Disable all plugins and scripts<br> –silent  Hide output on console</p><p>For more help, you can use ‘hexo help [command]’ for the detailed information<br>or you can check the docs: <a href="http://hexo.io/docs/">http://hexo.io/docs/</a><br>[root@hecs-x-medium-2-linux-20200322093022 blog]# hexo g &amp; hexo d<br>[1] 4339<br>INFO  Validating config<br>INFO  Validating config<br>INFO  Start processing<br>INFO  Start processing<br>INFO  Files loaded in 463 ms<br>INFO  Files loaded in 533 ms<br>INFO  Generated: archives/index.html<br>INFO  Generated: archives/2020/index.html<br>INFO  Generated: archives/2020/08/index.html<br>INFO  Generated: index.html<br>INFO  Generated: fancybox/helpers/fancybox_buttons.png<br>INFO  Generated: fancybox/blank.gif<br>INFO  Generated: fancybox/fancybox_loading.gif<br>INFO  Generated: fancybox/fancybox_loading@2x.gif<br>INFO  Generated: fancybox/fancybox_overlay.png<br>INFO  Generated: fancybox/fancybox_sprite.png<br>INFO  Generated: fancybox/fancybox_sprite@2x.png<br>INFO  Generated: js/script.js<br>INFO  Generated: fancybox/jquery.fancybox.css<br>INFO  Generated: fancybox/helpers/jquery.fancybox-buttons.css<br>INFO  Generated: fancybox/helpers/jquery.fancybox-buttons.js<br>INFO  Generated: fancybox/helpers/jquery.fancybox-media.js<br>INFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.css<br>INFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.js<br>INFO  Generated: css/fonts/FontAwesome.otf<br>INFO  Generated: css/style.css<br>INFO  Generated: fancybox/jquery.fancybox.pack.js<br>INFO  Generated: 2020/08/30/hello-world/index.html<br>INFO  Generated: css/fonts/fontawesome-webfont.ttf<br>INFO  Generated: css/fonts/fontawesome-webfont.eot<br>INFO  Generated: css/fonts/fontawesome-webfont.woff<br>INFO  Generated: fancybox/jquery.fancybox.js<br>INFO  Generated: css/images/banner.jpg<br>INFO  Generated: css/fonts/fontawesome-webfont.svg<br>INFO  28 files generated in 1.71 s<br>INFO  Generated: fancybox/blank.gif<br>INFO  Generated: archives/index.html<br>INFO  Generated: archives/2020/index.html<br>INFO  Generated: archives/2020/08/index.html<br>INFO  Generated: index.html<br>INFO  Generated: fancybox/fancybox_loading.gif<br>INFO  Generated: fancybox/fancybox_loading@2x.gif<br>INFO  Generated: fancybox/fancybox_overlay.png<br>INFO  Generated: fancybox/fancybox_sprite.png<br>INFO  Generated: fancybox/fancybox_sprite@2x.png<br>INFO  Generated: fancybox/helpers/fancybox_buttons.png<br>INFO  Generated: css/fonts/fontawesome-webfont.woff<br>INFO  Generated: fancybox/jquery.fancybox.css<br>INFO  Generated: js/script.js<br>INFO  Generated: fancybox/helpers/jquery.fancybox-buttons.css<br>INFO  Generated: fancybox/helpers/jquery.fancybox-buttons.js<br>INFO  Generated: fancybox/helpers/jquery.fancybox-media.js<br>INFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.css<br>INFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.js<br>INFO  Generated: css/fonts/FontAwesome.otf<br>INFO  Generated: css/fonts/fontawesome-webfont.eot<br>INFO  Generated: css/style.css<br>INFO  Generated: fancybox/jquery.fancybox.pack.js<br>INFO  Generated: css/fonts/fontawesome-webfont.ttf<br>INFO  Generated: fancybox/jquery.fancybox.js<br>INFO  Generated: 2020/08/30/hello-world/index.html<br>INFO  Generated: css/fonts/fontawesome-webfont.svg<br>INFO  Generated: css/images/banner.jpg<br>INFO  28 files generated in 1.71 s<br>INFO  Deploying: git<br>INFO  Setting up Git deployment…<br>初始化空的 Git 版本库于 /root/blog/.deploy_git/.git/<br>[master（根提交） 94cc63f] First commit<br>1 file changed, 0 insertions(+), 0 deletions(-)<br>create mode 100644 placeholder<br>INFO  Clearing .deploy_git folder…<br>INFO  Copying files from public folder…<br>INFO  Copying files from extend dirs…<br>[master b839331] Site updated: 2020-08-30 16:51:33<br>29 files changed, 5825 insertions(+)<br>create mode 100644 2020/08/30/hello-world/index.html<br>create mode 100644 archives/2020/08/index.html<br>create mode 100644 archives/2020/index.html<br>create mode 100644 archives/index.html<br>create mode 100644 css/fonts/FontAwesome.otf<br>create mode 100644 css/fonts/fontawesome-webfont.eot<br>create mode 100644 css/fonts/fontawesome-webfont.svg<br>create mode 100644 css/fonts/fontawesome-webfont.ttf<br>create mode 100644 css/fonts/fontawesome-webfont.woff<br>create mode 100644 css/images/banner.jpg<br>create mode 100644 css/style.css<br>create mode 100644 fancybox/blank.gif<br>create mode 100644 fancybox/fancybox_loading.gif<br>create mode 100644 fancybox/fancybox_loading@2x.gif<br>create mode 100644 fancybox/fancybox_overlay.png<br>create mode 100644 fancybox/fancybox_sprite.png<br>create mode 100644 fancybox/fancybox_sprite@2x.png<br>create mode 100644 fancybox/helpers/fancybox_buttons.png<br>create mode 100644 fancybox/helpers/jquery.fancybox-buttons.css<br>create mode 100644 fancybox/helpers/jquery.fancybox-buttons.js<br>create mode 100644 fancybox/helpers/jquery.fancybox-media.js<br>create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.css<br>create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.js<br>create mode 100644 fancybox/jquery.fancybox.css<br>create mode 100644 fancybox/jquery.fancybox.js<br>create mode 100644 fancybox/jquery.fancybox.pack.js<br>create mode 100644 index.html<br>create mode 100644 js/script.js<br>delete mode 100644 placeholder<br>Warning: Permanently added the RSA host key for IP address ‘13.229.188.59’ to the list of known hosts.<br>Counting objects: 46, done.<br>Compressing objects: 100% (36/36), done.<br>Writing objects: 100% (46/46), 507.64 KiB | 0 bytes/s, done.<br>Total 46 (delta 4), reused 0 (delta 0)<br>remote: Resolving deltas: 100% (4/4), done.<br>To <a href="mailto:&#x67;&#x69;&#116;&#x40;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#x69;&#116;&#x40;&#103;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#x63;&#111;&#x6d;</a>:future1314/future1314.github.io.git</p><ul><li>aad9e4f…b839331 HEAD -&gt; master (forced update)<br><strong>分支 master 设置为跟踪来自 <a href="mailto:&#103;&#105;&#x74;&#x40;&#103;&#105;&#x74;&#x68;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;">&#103;&#105;&#x74;&#x40;&#103;&#105;&#x74;&#x68;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;</a>:future1314/future1314.github.io.git 的远程分支 master。</strong><br><strong>INFO  Deploy done: git</strong><br><strong>[1]+   完成                  hexo g</strong><br>[root@hecs-x-medium-2-linux-20200322093022 blog]# top<br>top - 16:55:59 up 2 days, 23:02,  8 users,  load average: 0.01, 0.08, 0.08<br>Tasks: 114 total,   1 running, 113 sleeping,   0 stopped,   0 zombie<br>%Cpu(s):  1.0 us,  0.7 sy,  0.0 ni, 98.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st<br>KiB Mem :  1881700 total,   194372 free,  1000260 used,   687068 buff/cache<br>KiB Swap:  1049596 total,  1049596 free,        0 used.   676568 avail Mem</li></ul><p>PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND<br>2578 root      20   0  741600   8796   3344 S  0.3  0.5   6:36.58 hostguard<br>8903 root      20   0  473684  63452   5400 S  0.3  3.4   5:43.77 BT-Panel<br>   1 root      20   0  125856   3780   2068 S  0.0  0.2   0:03.44 systemd<br>   2 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kthreadd<br>   4 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H<br>   5 root      20   0       0      0      0 S  0.0  0.0   0:00.39 kworker/u2:0<br>   6 root      20   0       0      0      0 S  0.0  0.0   0:03.24 ksoftirqd/0<br>   7 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 migration/0<br>   8 root      20   0       0      0      0 S  0.0  0.0   0:00.00 rcu_bh<br>   9 root      20   0       0      0      0 S  0.0  0.0   0:40.40 rcu_sched<br>  10 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 lru-add-drain<br>  11 root      rt   0       0      0      0 S  0.0  0.0   0:00.93 watchdog/0<br>  13 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kdevtmpfs<br>  14 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 netns<br>  15 root      20   0       0      0      0 S  0.0  0.0   0:00.07 khungtaskd<br>  16 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 writeback<br>  17 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kintegrityd<br>  18 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset</p><p>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# <strong>hexo s</strong><br>INFO  Validating config<br>INFO  Start processing<br><strong>INFO  Hexo is running at … . Press Ctrl+C to stop.</strong><br>^CINFO  Have a nice day <strong>直接写 hexo 会解析报错的。</strong><br>[root@hecs-x-medium-2-linux-20200322093022 blog]# hexo s &amp;<br>[1] 4440<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# INFO  Validating config<br>INFO  Start processing<br><strong>INFO  Hexo is running at … . Press Ctrl+C to stop.</strong><br>^C<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# jps<br>1476 WrapperSimpleApp<br>4459 Jps<br>27788 halo-latest.jar<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# ps<br> PID TTY          TIME CMD<br>4084 pts/1    00:00:00 bash<br>4440 pts/1    00:00:02 node<br>4469 pts/1    00:00:00 ps<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# ls -ltr<br>总用量 192<br>drwxr-xr-x   3 root root   4096 8 月  30 16:16 source<br>drwxr-xr-x   2 root root   4096 8 月  30 16:16 scaffolds<br>drwxr-xr-x   3 root root   4096 8 月  30 16:16 themes<br>drwxr-xr-x 330 root root  12288 8 月  30 16:47 node_modules<br>-rw-r–r–   1 root root 132199 8 月  30 16:47 package-lock.json<br>-rw-r–r–   1 root root   2522 8 月  30 16:50 _config.yml<br>-rw-r–r–   1 root root   1102 8 月  30 16:51 package.json<br>drwxr-xr-x   7 root root   4096 8 月  30 16:51 public<br>-rw-r–r–   1 root root  24567 8 月  30 16:58 db.json<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# git init<br>初始化空的 Git 版本库于 /root/blog/.git/<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# <strong>git add .</strong><br>[root@hecs-x-medium-2-linux-20200322093022 blog]# <strong>git commit -m “first commit-hexo init not yuque-hexo “</strong><br>[master（根提交） f22dc77] first commit-hexo init not yuque-hexo<br>93 files changed, 9286 insertions(+)<br>create mode 100644 .gitignore<br>create mode 100644 _config.yml<br>create mode 100644 package-lock.json<br>create mode 100644 package.json<br>create mode 100644 scaffolds/draft.md<br>create mode 100644 scaffolds/page.md<br>create mode 100644 scaffolds/post.md<br>create mode 100644 source/_posts/hello-world.md<br>create mode 100644 themes/landscape/.gitignore<br>create mode 100644 themes/landscape/Gruntfile.js<br>create mode 100644 themes/landscape/LICENSE<br>create mode 100644 themes/landscape/README.md<br>create mode 100644 themes/landscape/_config.yml<br>create mode 100644 themes/landscape/languages/de.yml<br>create mode 100644 themes/landscape/languages/default.yml<br>create mode 100644 themes/landscape/languages/es.yml<br>create mode 100644 themes/landscape/languages/fr.yml<br>create mode 100644 themes/landscape/languages/ja.yml<br>create mode 100644 themes/landscape/languages/ko.yml<br>create mode 100644 themes/landscape/languages/nl.yml<br>create mode 100644 themes/landscape/languages/no.yml<br>create mode 100644 themes/landscape/languages/pt.yml<br>create mode 100644 themes/landscape/languages/ru.yml<br>create mode 100644 themes/landscape/languages/zh-CN.yml<br>create mode 100644 themes/landscape/languages/zh-TW.yml<br>create mode 100644 themes/landscape/layout/_partial/after-footer.ejs<br>create mode 100644 themes/landscape/layout/_partial/archive-post.ejs<br>create mode 100644 themes/landscape/layout/_partial/archive.ejs<br>create mode 100644 themes/landscape/layout/_partial/article.ejs<br>create mode 100644 themes/landscape/layout/_partial/footer.ejs<br>create mode 100644 themes/landscape/layout/_partial/gauges-analytics.ejs<br>create mode 100644 themes/landscape/layout/_partial/google-analytics.ejs<br>create mode 100644 themes/landscape/layout/_partial/head.ejs<br>create mode 100644 themes/landscape/layout/_partial/header.ejs<br>create mode 100644 themes/landscape/layout/_partial/mobile-nav.ejs<br>create mode 100644 themes/landscape/layout/_partial/post/category.ejs<br>create mode 100644 themes/landscape/layout/_partial/post/date.ejs<br>create mode 100644 themes/landscape/layout/_partial/post/gallery.ejs<br>create mode 100644 themes/landscape/layout/_partial/post/nav.ejs<br>create mode 100644 themes/landscape/layout/_partial/post/tag.ejs<br>create mode 100644 themes/landscape/layout/_partial/post/title.ejs<br>create mode 100644 themes/landscape/layout/_partial/sidebar.ejs<br>create mode 100644 themes/landscape/layout/_widget/archive.ejs<br>create mode 100644 themes/landscape/layout/_widget/category.ejs<br>create mode 100644 themes/landscape/layout/_widget/recent_posts.ejs<br>create mode 100644 themes/landscape/layout/_widget/tag.ejs<br>create mode 100644 themes/landscape/layout/_widget/tagcloud.ejs<br>create mode 100644 themes/landscape/layout/archive.ejs<br>create mode 100644 themes/landscape/layout/category.ejs<br>create mode 100644 themes/landscape/layout/index.ejs<br>create mode 100644 themes/landscape/layout/layout.ejs<br>create mode 100644 themes/landscape/layout/page.ejs<br>create mode 100644 themes/landscape/layout/post.ejs<br>create mode 100644 themes/landscape/layout/tag.ejs<br>create mode 100644 themes/landscape/package.json<br>create mode 100644 themes/landscape/scripts/fancybox.js<br>create mode 100644 themes/landscape/source/css/_extend.styl<br>create mode 100644 themes/landscape/source/css/_partial/archive.styl<br>create mode 100644 themes/landscape/source/css/_partial/article.styl<br>create mode 100644 themes/landscape/source/css/_partial/comment.styl<br>create mode 100644 themes/landscape/source/css/_partial/footer.styl<br>create mode 100644 themes/landscape/source/css/_partial/header.styl<br>create mode 100644 themes/landscape/source/css/_partial/highlight.styl<br>create mode 100644 themes/landscape/source/css/_partial/mobile.styl<br>create mode 100644 themes/landscape/source/css/_partial/sidebar-aside.styl<br>create mode 100644 themes/landscape/source/css/_partial/sidebar-bottom.styl<br>create mode 100644 themes/landscape/source/css/_partial/sidebar.styl<br>create mode 100644 themes/landscape/source/css/_util/grid.styl<br>create mode 100644 themes/landscape/source/css/_util/mixin.styl<br>create mode 100644 themes/landscape/source/css/_variables.styl<br>create mode 100644 themes/landscape/source/css/fonts/FontAwesome.otf<br>create mode 100644 themes/landscape/source/css/fonts/fontawesome-webfont.eot<br>create mode 100644 themes/landscape/source/css/fonts/fontawesome-webfont.svg<br>create mode 100644 themes/landscape/source/css/fonts/fontawesome-webfont.ttf<br>create mode 100644 themes/landscape/source/css/fonts/fontawesome-webfont.woff<br>create mode 100644 themes/landscape/source/css/images/banner.jpg<br>create mode 100644 themes/landscape/source/css/style.styl<br>create mode 100644 themes/landscape/source/fancybox/blank.gif<br>create mode 100644 themes/landscape/source/fancybox/fancybox_loading.gif<br>create mode 100644 themes/landscape/source/fancybox/fancybox_loading@2x.gif<br>create mode 100644 themes/landscape/source/fancybox/fancybox_overlay.png<br>create mode 100644 themes/landscape/source/fancybox/fancybox_sprite.png<br>create mode 100644 themes/landscape/source/fancybox/fancybox_sprite@2x.png<br>create mode 100644 themes/landscape/source/fancybox/helpers/fancybox_buttons.png<br>create mode 100644 themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css<br>create mode 100644 themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js<br>create mode 100644 themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js<br>create mode 100644 themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css<br>create mode 100644 themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js<br>create mode 100644 themes/landscape/source/fancybox/jquery.fancybox.css<br>create mode 100644 themes/landscape/source/fancybox/jquery.fancybox.js<br>create mode 100644 themes/landscape/source/fancybox/jquery.fancybox.pack.js<br>create mode 100644 themes/landscape/source/js/script.js<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# <strong>git remote add origin **<a href="https://github.com/future1314/blog.git"><strong>https://github.com/future1314/blog.git</strong></a><br>[root@hecs-x-medium-2-linux-20200322093022 blog]# **git push -u origin master</strong><br>Username for ‘<a href="https://github.com&/#39;">https://github.com&#39;</a>: future1314<br>Password for ‘<a href="https://future1314@github.com&/#39;">https://future1314@github.com&#39;</a>:</p><p>To <a href="https://github.com/future1314/blog.git">https://github.com/future1314/blog.git</a><br>! [rejected]        master -&gt; master (fetch first)<br><strong>error: 无法推送一些引用到 ‘<a href="https://github.com/future1314/blog.git&#39;">https://github.com/future1314/blog.git&#39;</a></strong><br><strong>提示：更新被拒绝，因为远程版本库包含您本地尚不存在的提交。这通常是因为另外</strong><br><strong>提示：一个版本库已推送了相同的引用。再次推送前，您可能需要先合并远程变更</strong><br><strong>提示：（如 ‘git pull’）。</strong><br>提示：详见 ‘git push –help’ 中的 ‘Note about fast-forwards’ 小节。<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# git diff<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# git stash pop<br>未发现 stash。<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# git pull<br>Username for ‘<a href="https://github.com&/#39;">https://github.com&#39;</a>: future1314<br>Password for ‘<a href="https://future1314@github.com&/#39;">https://future1314@github.com&#39;</a>:<br>warning: no common commits<br>remote: Enumerating objects: 13, done.<br>remote: Counting objects: 100% (13/13), done.<br>remote: Compressing objects: 100% (8/8), done.<br>remote: Total 13 (delta 0), reused 0 (delta 0), pack-reused 0<br>Unpacking objects: 100% (13/13), done.<br>来自 <a href="https://github.com/future1314/blog">https://github.com/future1314/blog</a></p><ul><li>[新分支]          master     -&gt; origin/master<br>There is no tracking information for the current branch.<br>Please specify which branch you want to merge with.<br>See git-pull(1) for details</li></ul><p>git pull <remote> <branch></p><p>If you wish to set tracking information for this branch you can do so with:</p><p>git branch –set-upstream-to=origin/<branch> master</p><p>[root@hecs-x-medium-2-linux-20200322093022 blog]# git stash pop<br>未发现 stash。<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# git push -u origin master<br>Username for ‘<a href="https://github.com&/#39;">https://github.com&#39;</a>: future1314<br>Password for ‘<a href="https://future1314@github.com&/#39;">https://future1314@github.com&#39;</a>:<br>To <a href="https://github.com/future1314/blog.git">https://github.com/future1314/blog.git</a><br>! [rejected]        master -&gt; master (non-fast-forward)<br>error: 无法推送一些引用到 ‘<a href="https://github.com/future1314/blog.git&#39;">https://github.com/future1314/blog.git&#39;</a><br>提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。<br>提示：再次推送前，先与远程变更合并（如 ‘git pull’）。详见<br>提示：’git push –help’ 中的 ‘Note about fast-forwards’ 小节。<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# git merge<br>fatal: 未指定提交并且 merge.defaultToUpstream 未设置。<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# git diff<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# git merge master<br>Already up-to-date.<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# git push -u origin master<br>Username for ‘<a href="https://github.com&/#39;">https://github.com&#39;</a>: future1314<br>Password for ‘<a href="https://future1314@github.com&/#39;">https://future1314@github.com&#39;</a>:<br>To <a href="https://github.com/future1314/blog.git">https://github.com/future1314/blog.git</a><br>! [rejected]        master -&gt; master (non-fast-forward)<br><strong>error: 无法推送一些引用到 ‘<a href="https://github.com/future1314/blog.git&#39;">https://github.com/future1314/blog.git&#39;</a></strong><br><strong>提示：更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支。</strong><br><strong>提示：再次推送前，先与远程变更合并（如 ‘git pull’）。详见</strong><br><strong>提示：’git push –help’ 中的 ‘Note about fast-forwards’ 小节。</strong><br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]#<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# ls -ltr<br>总用量 192<br>drwxr-xr-x   3 root root   4096 8 月  30 16:16 source<br>drwxr-xr-x   2 root root   4096 8 月  30 16:16 scaffolds<br>drwxr-xr-x   3 root root   4096 8 月  30 16:16 themes<br>drwxr-xr-x 330 root root  12288 8 月  30 16:47 node_modules<br>-rw-r–r–   1 root root 132199 8 月  30 16:47 package-lock.json<br>-rw-r–r–   1 root root   2522 8 月  30 16:50 _config.yml<br>-rw-r–r–   1 root root   1102 8 月  30 16:51 package.json<br>drwxr-xr-x   7 root root   4096 8 月  30 16:51 public<br>-rw-r–r–   1 root root  24567 8 月  30 16:58 db.json<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# cd p<br>-bash: cd: p: 没有那个文件或目录<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# cd p<br>package.json       package-lock.json  public/<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# cd pu<br>-bash: cd: pu: 没有那个文件或目录<br>[root@hecs-x-medium-2-linux-20200322093022 blog]# cd public/<br>[root@hecs-x-medium-2-linux-20200322093022 public]# ls -l<br>总用量 28<br>drwxr-xr-x 3 root root 4096 8 月  30 16:51 2020<br>drwxr-xr-x 3 root root 4096 8 月  30 16:51 archives<br>drwxr-xr-x 4 root root 4096 8 月  30 16:51 css<br>drwxr-xr-x 3 root root 4096 8 月  30 16:51 fancybox<br>-rw-r–r– 1 root root 6689 8 月  30 16:51 index.html<br>drwxr-xr-x 2 root root 4096 8 月  30 16:51 js<br>[root@hecs-x-medium-2-linux-20200322093022 public]# pwd<br>/root/blog/public<br>[root@hecs-x-medium-2-linux-20200322093022 public]#<br>[root@hecs-x-medium-2-linux-20200322093022 public]#<br>[root@hecs-x-medium-2-linux-20200322093022 public]# <strong>git fetch origin</strong><br>Username for ‘<a href="https://github.com&/#39;">https://github.com&#39;</a>: future1314<br>Password for ‘<a href="https://future1314@github.com&/#39;">https://future1314@github.com&#39;</a>:</p><p>[root@hecs-x-medium-2-linux-20200322093022 public]#<br>[root@hecs-x-medium-2-linux-20200322093022 public]# git diff<br>[root@hecs-x-medium-2-linux-20200322093022 public]# <strong>git merge origin/master</strong><br><strong>Merge made by the ‘recursive’ strategy.</strong><br>** .github/workflows/blog.yml | 43 +++++++++++++++++++++++++++++++++++++++++++**<br>** .github/workflows/main.yml | 33 +++++++++++++++++++++++++++++++++**<br>** README.md                  |  1 +**<br><strong>3 files changed, 77 insertions(+)</strong><br>** create mode 100644 .github/workflows/blog.yml**<br>** create mode 100644 .github/workflows/main.yml**<br>** create mode 100644 README.md**<br>[root@hecs-x-medium-2-linux-20200322093022 public]#<br>[root@hecs-x-medium-2-linux-20200322093022 public]# git diff<br>[root@hecs-x-medium-2-linux-20200322093022 public]#** **<strong>git push -u origin master**<br>**Username for ‘<a href="https://github.com&/#39;">https://github.com&#39;</a>: future1314</strong><br><strong>Password for ‘<a href="https://future1314@github.com&/#39;">https://future1314@github.com&#39;</a>:</strong></p><p><strong>Counting objects: 117, done.</strong><br><strong>Compressing objects: 100% (106/106), done.</strong><br><strong>Writing objects: 100% (116/116), 558.06 KiB | 0 bytes/s, done.</strong><br><strong>Total 116 (delta 2), reused 0 (delta 0)</strong><br><strong>remote: Resolving deltas: 100% (2/2), done.</strong><br><strong>To **<a href="https://github.com/future1314/blog.git"><strong>https://github.com/future1314/blog.git</strong></a><br>**   3fd7db5..dfba4e6  master -&gt; master</strong><br><strong>分支 master 设置为跟踪来自 origin 的远程分支 master。</strong><br>[root@hecs-x-medium-2-linux-20200322093022 public]#<br>[root@hecs-x-medium-2-linux-20200322093022 public]#</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>再不行我就先不搞了</title>
      <link href="/2020/08/30/ro0z5g/"/>
      <url>/2020/08/30/ro0z5g/</url>
      
        <content type="html"><![CDATA[<p>太费事了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>语雀测试</title>
      <link href="/2020/08/29/glv0gn/"/>
      <url>/2020/08/29/glv0gn/</url>
      
        <content type="html"><![CDATA[<p>测试触发云函数<br>第 3.次修改的沙发上</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>服务器搭建</title>
      <link href="/2020/03/22/pxds7y/"/>
      <url>/2020/03/22/pxds7y/</url>
      
        <content type="html"><![CDATA[<p>华为云+宝塔面板 服务器小白保姆级配置</p><h3 id="78-88-一年服务器"><a href="#78-88-一年服务器" class="headerlink" title="78.88 一年服务器"></a>78.88 一年服务器</h3><p>【2 核 4G 云服务器低至 331 元/年，限时抢购】华为云开年回馈用户，产品低至 1 折，您的专属链接：<a href="https://activity.huaweicloud.com/2020feb_promotion/invite.html?fromuser=082789ba3200265d0f49c01f8c00e6c0&fromacct=dc8f412a-981f-4d07-80b0-e027d4b24ff1&needGalaxy=true">https://activity.huaweicloud.com/2020feb_promotion/invite.html?fromuser=082789ba3200265d0f49c01f8c00e6c0&amp;fromacct=dc8f412a-981f-4d07-80b0-e027d4b24ff1&amp;needGalaxy=true</a><br>也可以<strong>扫码，领取优惠券</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1584854539682-ae16ecc0-1796-4b81-b7ee-6c188967dea9.jpeg#align=left&display=inline&height=249&originHeight=498&originWidth=634&size=78150&status=done&style=none&width=317" alt="huawei.jpg"></p><p><a href="https://activity.huaweicloud.com/2020feb_promotion/index.html">https://activity.huaweicloud.com/2020feb_promotion/index.html</a><br><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1584854316957-5985da03-c05e-4e97-a7ae-c662270cb2f1.png#align=left&display=inline&height=477&originHeight=954&originWidth=1654&size=1594268&status=done&style=none&width=827" alt="image.png"><br>这次活动只需要定时定点去抢服务器就可以了，不需要投入很大，只要 78.88，可以说是很划算了。我本人是一名大学生/编程小白，使用服务器是用来学习一些编程的知识，这台入门级的服务器可以说是很契合我现在的状况了。接下来我来为大家提供一波保姆级的小白服务器前期配置。</p><p>因为入门级服务器的性能相对羸弱，我这里是不建议使用带图形化界面的 windows 系统的。相对于 Windows，Linux 没有图形化页面，也就会让服务器的性能更大化，使用起来更加顺畅。所以这里只介绍 Linux 服务器哦。</p><p>1.注册购买之后<br>进入到后台的控制台点击云耀云服务器<br>图片说明<img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1584853266846-cdb5a6a4-2e27-48d6-8f3e-786c766356b0.png#align=left&display=inline&height=329&originHeight=329&originWidth=792&size=32216&status=done&style=none&width=792" alt="image.png"><br>如果是第一次登陆我们要重置密码（如果不是 Linux 可以到 &gt;&gt; 更多&gt;&gt; 切换操作系统进行切换）<br>图片说明<img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1584853599785-b2d3bfb8-7613-49df-86d5-495f0841dd68.png#align=left&display=inline&height=305&originHeight=305&originWidth=1791&size=53716&status=done&style=none&width=1791" alt="image.png"><br>重置系统以后我们便可以进行远程 ssh 登陆了<br>我是使用的是 xshell，小伙伴们也可以使用控制台自带的远程登陆<br>默认账户是 root，密码则是你刚才重置的密码（千万不要太简单，可能会被黑客入侵用于挖矿）<br>登录以后，我们就能接触到一个命令行的世界</p><p>2.安装宝塔面板<br>首先来到宝塔官网 <a href="https://www.bt.cn/">https://www.bt.cn/</a><br>图片说明<img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1584853302330-0b6992af-b63b-45e0-9b80-ceb4b4f11a71.png#align=left&display=inline&height=174&originHeight=174&originWidth=583&size=23296&status=done&style=none&width=583" alt="image.png"></p><p>点开教程我们发现，如果安装宝塔面板我们需要开放几个端口<br>可以参考 <a href="https://www.bt.cn/bbs/thread-3923-1-1.html">https://www.bt.cn/bbs/thread-3923-1-1.html</a><br>回到控制台<br>图片说明<img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1584853320094-417aaced-eac5-4248-8e69-7d8515d355a6.png#align=left&display=inline&height=570&originHeight=570&originWidth=1852&size=84858&status=done&style=none&width=1852" alt="image.png"><br>进入到规则管理进行配置<br>图片说明<img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1584853340143-28904f5d-cf84-4a4f-b076-7cf4f9eda657.png#align=left&display=inline&height=421&originHeight=421&originWidth=1842&size=89122&status=done&style=none&width=1842" alt="image.png"><br>放行需要的端口后回到远程登陆界面，输入教程安装宝塔面板的代码（确定好系统在复制代码）<br>图片说明<img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1584853357114-5176432d-5022-4d39-b95c-567fa2e54a96.png#align=left&display=inline&height=123&originHeight=123&originWidth=1115&size=21363&status=done&style=none&width=1115" alt="image.png"><br>需要进行选择我们选择 y（yes）<br>图片说明<br><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1584853367146-5700af96-93d2-4c07-8ed1-f6d04d8b42d1.png#align=left&display=inline&height=49&originHeight=49&originWidth=542&size=2884&status=done&style=none&width=542" alt="image.png"><br>跑代码大概两分钟<br>图片说明<br><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1584853386751-634106c3-0bf6-446a-9bfb-4d37ace27444.png#align=left&display=inline&height=198&originHeight=198&originWidth=581&size=18780&status=done&style=none&width=581" alt="image.png"><br>成功后记得记录下打码的三行数据，这个便是宝塔登陆面板的网址账号和密码<br>来到浏览器地址栏输入 bt-Panel 的地址，进去后输入账号密码<br>登陆即可，宝塔面板安装成功！<br>以后就可以用这个面板来管理服务器了。</p><p>3.宝塔面板的操作<br>登录上会让我们选择安装的套件。我们按照推荐的来，当然有需求可以更改。以后也可以自由安装<br>漫长的等待安装，这个时候我们可以去看看其他人的使用博客，多多参考多多益善。<br>接下来是介绍下宝塔面板的一些功能<br>图片说明<img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1584853425209-f8310094-c8b1-4698-a732-bf700b396cac.png#align=left&display=inline&height=949&originHeight=949&originWidth=1920&size=239519&status=done&style=none&width=1920" alt="image.png"></p><p>4.简单的搭建一个网站<br>图片说明<img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1584853435627-2c12a68e-6a6d-44c7-b71e-7b190fda9d07.png#align=left&display=inline&height=807&originHeight=807&originWidth=1522&size=125959&status=done&style=none&width=1522" alt="image.png"><br>地址栏输入 ip 测试成功即可<br>图片说明<img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1584853449371-51ab18c1-a66c-4ad7-a585-ae99c1e52c5a.png#align=left&display=inline&height=503&originHeight=503&originWidth=1500&size=61420&status=done&style=none&width=1500" alt="image.png"><br>如果想修改则需要在宝塔面板 &gt;&gt;文件 &gt;&gt;网站的根目录<br>图片说明<img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1584853458704-a57c7045-647a-4e5c-a093-f0a3b3469bf6.png#align=left&display=inline&height=426&originHeight=426&originWidth=1255&size=63602&status=done&style=none&width=1255" alt="image.png"><br>例如：默认生成的 404.html<br>图片说明<img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1584853470580-1f560976-ed18-4716-9564-4a67e5c62e17.png#align=left&display=inline&height=336&originHeight=336&originWidth=1227&size=38225&status=done&style=none&width=1227" alt="image.png"><br>ps：如何不用在域名或 ip 后加后缀就能默认访问我想让别人看的网站呢<br>答：来到网站管理面板，修改默认文档即可<br>图片说明<img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1584853489033-57886dc0-0578-432a-958c-f824fb56e301.png#align=left&display=inline&height=795&originHeight=795&originWidth=1731&size=128478&status=done&style=none&width=1731" alt="image.png"></p><p>我的分享就到这里，希望大家可以好好使用自己的服务器！<br>我们的第一台服务器，理应玩的炫酷！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试-1</title>
      <link href="/2020/03/22/poq8z2/"/>
      <url>/2020/03/22/poq8z2/</url>
      
        <content type="html"><![CDATA[<p>首先说明我是 Java 开发，我的范围只适合 Java 开发的，其他方向我不太了解，并且很多公司侧重点也不一样，比如字节不侧重语言，侧重操作系统四大金刚那些，也看公司吧，就像考不同的学校，会有不同的大纲，因为我是本科生，都比较侧重基础</p><p>Java：Java 基础杂七杂八的(经典必考集合各种死磕源码吧)、多线程并发包各种死磕(我是死磕到源码)，JVM 死磕到细节、GC 死磕到细节、JVM 调优自己练习练习</p><p>框架：spring 看看 IOC 和 AOP 的源码，但是太难太难了，就光那个方法名就特别长，前期就只知道个 IOC 和 AOP 是啥，后期就去看源码记大概一个原理过程，SpringMvc 的流程，一些注解吧，Mybatis 也是那些常考的点吧，缓存可以了解一下</p><p>数据库：数据库死磕，越深越好</p><p>操作系统和网络：背常考的、但是太深了，还是菜</p><p>设计模式：太多了记不住，我就是简单了解一下，叭叭给他说有啥用，Java 里哪里用了 xx 模式</p><p>算法和数据结构：是我秋招开始补的、做完类型题进行总结，刷的就是 LeetCode 吧，我是先 LeetCode，然后剑指 offer，但是我也是有很多笔试直接挂的，除了遇到一些简单的，或者原题或者类似的题能 A，一定要总结套题，类型题，一定总结一定总结一定总结</p><p>Redis：没有用过，但是就是记吧，那些常考的东西</p><p>IO 模型、网络编程：比较菜了，不咋会</p><p>Linux：我也比较菜了，就会简单的命令</p><p>微服务、分布式、集群、中间件：我不了解，只知道有这个玩意</p><p>关于源码阅读：建立在自己会使用这个东西之后再去阅读源码，阅读常用的方法源码即可，第一次阅读源码建议看视频跟着阅读或者找博客，要不然比较生疏很难，，，，</p><p>我的项目很 low 怎么办？？</p><p>low 不是你的问题，但是项目也可以“包装“啊，此“包装”非彼包装，举个例子吧：</p><p>Q：原项目有一个等级权限管理，就 3 层等级，数据库里设计好了就分 3 级，面试官就问到你了，你这个怎么做的。</p><p>A：自己一顿叭叭叭，</p><p>Q：面试官给你提了一个新需求，如果 3 层等级变了，变成了不一定多少层，你又怎么设计？</p><p>面试官给你说出了问题，不管你有没有回答出来，但是希望你面完之后，你对这个需求去重新设计一下，下一次面试自我介绍的时候说：</p><p>对于 xx 项目，我自己私下也有复盘，比如当需求变为 xxx 的时候，我考虑到这样设计：叭叭叭…..。</p><p>这样你的 low 项目就变得不再 low 了，突出你的思考、你的想法</p><p>项目 low，无实习经验，还是个渣本，怎么拿到 offer 的</p><p>死磕基础，把很多源码看了，集合、JUC 下的，面试就磕源码，操作系统和计算机网络背不住，就是手写吧。我拿的 offer 里，基本都是 Java 问的很多</p><h3 id="关于套路和技巧"><a href="#关于套路和技巧" class="headerlink" title="关于套路和技巧"></a>关于套路和技巧</h3><p>关于面试：面完问一下面试官对你的评价，找到自己的不足，另一方面也表现出自己强烈的学习欲望，反正我每次问面试评价都是：基础不错，就是动手实践不是很好，xxx，，，，如果感觉跟面试官聊得不错的，可以厚着脸皮要个微信加，反正我面滴滴三面要微信加，被面试官拒绝了，其他的也有成功的，哈哈哈哈哈</p><p>面试复盘：我一般线上面试会录屏或者录音，面完之后复盘总结，不单单是总结，你还要找到自己的不足去弥补，防止下一次再被问，这就是为什么我面经这么全的原因，不是我记性好，，，，，哈哈哈哈哈</p><p>关于投简历：写一个 Excel 或者 Word 记录投的公司，时间，投递方式，方便后期去查询结果</p><p>你的秋招时间这么长，你的心态如何呢？</p><p>秋招历时足足 4 个月，心态就像心电图一样，考研就像前期平稳，后期曲线上涨，因为自己也很乐观，在整个秋招之路里，也有人说话，自己也有几个网上的小伙伴群，每次就是说说话，互相激励对方，如果你是一个人的话，希望找几个小伙伴一起交流说说话，避免自闭低沉消极</p><h3 id="关于众多知识点和面经你又是怎么选择去看的呢？"><a href="#关于众多知识点和面经你又是怎么选择去看的呢？" class="headerlink" title="关于众多知识点和面经你又是怎么选择去看的呢？"></a>关于众多知识点和面经你又是怎么选择去看的呢？</h3><p>1.先看众多的知识点，广度先建立起来，遇到一个不会的知识点千万不要入坑掉进去，越陷越深 2.广度那么多，我看一遍记不住咋办，那就多看几遍，理解化记忆，找一些共同点进行记忆，手写记忆（秋招以来我大概写了 20+的单面 A4 纸吧），抱团组队，互相面试，互相讲解 3.广度拉起来之后，去看看深度，了解一下源码 xx 的，深度是你从众多面试者脱颖而出的法宝 4.面经看了一定的知识点之后再去看，作为查缺补漏之用，当你要准备面哪个公司之前，去看看这个公司的面经。</p><h3 id="简历应该怎么写？？？"><a href="#简历应该怎么写？？？" class="headerlink" title="简历应该怎么写？？？"></a>简历应该怎么写？？？</h3><p>以下属于个人观点：</p><p>1.如果成绩好，写上你的 GPA 和排名 2.学校好肯定是个亮点 3.有博客（前提里面要有内容），有 GitHub 写上去 4.大厂实习是个亮点 5.项目负责模块最好用：用 xx 实现 xxx 解决了 xxx 问题，网上都说最好用 STAR 法则写， 6.计算机类的比赛加分项吧、ACM….. 7.技能栈写你会的，精通、熟悉、了解 xxxx。<br>划重点：字不能错，大小写要写明白，Java 不是 java，我不知道这个单词到底是怎么拼，去官网瞧瞧他怎么写的。</p><p>如果以上你都没有？？？我好慌，我该怎么办？？？</p><p>把你复习的众多知识点堆在技能栈上，前提是你要会！会！会！不会就不要写（别给自己挖坑），比如：</p><p>看多线程知识点前：</p><p>1.了解多线程编程<br>看知识点后：</p><p>1.熟悉多线程编程及原理，内存屏障和 CPU 缓存、线程池应用及原理、synchronize 锁优化、JVM 内存模型、J.U.C 并发编程包<br>再次重点提醒！！！一定要会才往上写！！！</p><p>实习、秋招、春招那点事</p><p>坎坷的 offer 故事：</p><p>•贝壳是第一家面完 全部流程的公司，当时认为能过，结果被挂了，不知道是什么原因，可能学校吧…，当时挺难过的。<br>•京东是 8.13 14 的一二面，面完之后一直没信，二面面试官也说我技术面过了提交了 HRBP 处理了，等到了 8.29 正式批给我发来线下面试邀请再次联系了二面面试官帮我反馈，当天晚上收到 HRBP 的 oc，给我说锁定简历，给我发 offer，问了几个 hr 的问题，9.5 问 hrbp 什么时候发 offer，hrbp 问我要了身份证，之后一直持续到 9 月底，期间给 HBRP 发了四次微信询问 offer 的事，没有一次回我微信的，9.30 二面面试官帮我反馈了我一直没有收到 offer 的情况，HR 那边还是没有给反馈，国庆期间最终找到零售校招 HR 帮我查了一下我的信息，结果说没有查找我的信息，我给他说了我是提前批，HBRP 问我要了身份证各种情况，说帮我对接一下 HBRP，最后发现是把我的信息遗漏了，重新给我提交，10.10 收到 offer，等待京东这段时间，身边的人都说我凉了凉了，但是我还是坚持下来了，天天找各种途径去查，最终也是没有辜负自己的努力。<br>•滴滴是 8.9 投的简历，8.27 笔试，邀约 9.7 的线下面试，但是我拒绝了，期间一直想去问问能不能申请线上面试，结果没有找到途径，9.12 电话邀约了 9.16 一面，面完之后一直就没有信了，也没有拒信，官网状态还是面试流程中，然后一直给滴滴的邮箱发消息问面试结果、不下 5 次吧，都是石沉大海，在牛客找滴滴 hr 联系方式，也没有方式，在 10.15 的时候再次给滴滴邮箱和滴滴招聘公众号发消息，下午来了 hr 约二面了，我坚持的等到了，9.16-10.15 一个月的时间啊，这期间也基本每个人都告诉我是挂了，是不会有感谢信的，但是我还是坚持，同样我是在 10.10 收到的京东 offer，但是我还是不甘心，还是去坚持问滴滴，就是要个结果，挂就去京东，过就继续面，再约面滴滴这期间，我同样面试了其他家为了面试查缺补漏吧，大大小小公司我都投，一直坚持到 offer，给自己的目标就是面完滴滴三面就不面了，结束秋招，因为太累太累了。。。<br>总结：</p><p>面试就是把自己变成商品，不遗余力地推销给面试官，从而打动他的过程。</p><p>面试就像一场考试，给定了要考的范围，就是你能不能去坚持死磕他了，坚持死磕对了，加上一点运气+临场发挥就是胜利，祝各位加油！！！冲冲冲！！！就是干！！！</p><p>以下面经顺序为难易度排序及 offer 排序</p><p>滴滴(11.5 offer)：线上面</p><p>8.9 投简历：</p><p>8.27 笔试：</p><h4 id="9-16-一面：80-分钟左右"><a href="#9-16-一面：80-分钟左右" class="headerlink" title="  9.16 一面：80 分钟左右"></a>  9.16 一面：80 分钟左右</h4><p>1.Java 集合说一说吧 set ，list，map 都问了一遍<br>2.TreeSet 和 HashSet 区别<br>•红黑树区别，有序无序<br>3.hashmap 和 concurrenthashmap 4.线程池用过没，线程池的参数什么意思，每个都问了一遍 5.拒绝策略说一说<br>6.synchroBlockQueue 到底可以存几个 7.锁用过没，<br>•叭叭各种锁， 8.锁的什么方法你用过<br>•tryLock<br>•getHoldCount<br>9.lock 和 tryLock 区别<br>10.lock 的公平锁和非公平锁的怎么实现的（源码级别），不限于概念 11.类加载机制，不是类加载几个过程 12.如果多个类加载器加载同一个类，会出现什么情况<br>13.tomcat 的加载过程<br>14.spring 的生命周期，不是 bean<br>15.AOP<br>16.ASM 怎么实现 cglib<br>17.mybatis 的插件用过没， 18.项目， 背景：暂存数据，每一次把用户填写的数据暂存到数据库，暂存字段，0 暂存，1 正式存 1.如果实现 a 用户暂存数据 1，b 用户暂存数据 2，实现 a 下次只能看见数据 1，<br>给 car 表加一个操作人字段，每次判断 2. car 表怎么设计的，<br>id，车牌号，xxx，xx，暂存标记 3. car 表主键是什么<br>主键 id 4.主键 id 有什么规则吗？<br>自增长 5.如果一个车牌号重复了，添加的时候怎么处理的<br>每次填入的时候，都会在数据库里查询一下，判断是否有 6.如果 4 个人同时填入车牌号为 888 的车，怎么处理这个问题 7.加锁为消化资源，你考虑一下在数据库进行操作吧 8.隔离级别是解决什么问题的啊<br>并发的时候问题，叭叭脏读等问题， 9.隔离级别什么时候才出来啊？ 19.数据库索引，索引类别<br>唯一索引，聚簇索引，非聚簇索引 20.聚簇索引和非聚簇索引区别 21.二叉树和 B+树的区别<br>叭叭半天，没有 get 到点上<br>1.B+树所有数据都在叶子节点，每次查找时间稳定 2.叶子节点都有指向下一个叶子节点的指针，范围查找比较方便 22.那如果把二叉树弄成，所有数据都存在叶子节点呢<br>二叉树，如果删除的话，可能会变成线性树，时间复杂度变高 23.那如果平衡二叉树呢<br>叭叭了，记得好像磁盘存储是用的 b+树结构，索引是存在磁盘上的，用 B+树会减少 IO 操作 24.怎么减少 IO 操作的 25.磁盘上所有文件都是 B+树存储吗？<br>文件夹的文件吧 26.磁盘上怎么存储这些数据的 27.你了解什么文件格式<br>elf，a.out<br>28.Linux 操作系统了解过吗<br>Linux 不太了解过，用过 Linux 命令，进程同步<br>29.Linux 命令用过哪些<br>cd，grep，pwd，mv，管道符，ps<br>30.Linux 根目录下有哪些文件夹<br>etc，bin，我好像记得是，可能记不太清楚了 31.手撕翻转树，递归+递推</p><pre><code>32.手撕最小路径和</code></pre><h4 id="10-17-二面：50-分钟左右"><a href="#10-17-二面：50-分钟左右" class="headerlink" title="10.17 二面：50 分钟左右"></a>10.17 二面：50 分钟左右</h4><p>1.开源项目了解什么<br>2.SpringBoot 如何加载，源码 3.学习源码如何深入学习的<br>叭叭叭 ArrayList 和 LinkedList 4.如果去了解 spring 的启动过程，你怎么去了解<br>5.tomcat 启动的流程，要加载什么资源 6.项目中有哪些收获 7.项目中负责哪些点，技术方向吧 8.为什么用 mvc 架构<br>面试官：其实这个 mvc 架构知识点还是很深的，要做好还是很难的 9.项目里 Spring 的事务是怎么管理的<br>在方法上加注解 10.那为什么加注解可以实现，这个加载机制是怎么实现的，源码级别 11.为什么这个注解可以实现事务 12.那这个事务和数据库的事务有什么关联<br>acid，事务隔离级别 13.那你们当时项目选技术是怎么思考，比如 mybatis 用的什么连接池<br>用的 c3p0 14.那你知道有其他的连接池，各自有什么区别<br>c3p0、dbcp、druid 三大连接池对比 - wawa3338 的博客 - CSDN 博客 <a href="https://blog.csdn.net/wawa3338/article/details/81380662c3p0%EF%BC%8Cdbcp%E4%B8%8Edruid">https://blog.csdn.net/wawa3338/article/details/81380662c3p0，dbcp与druid</a> 三大连接池的区别 - 泡面之家 - CSDN 博客 <a href="https://blog.csdn.net/qq_34359363/article/details/72763491druid%E7%9A%84%E5%8A%9F%E8%83%BD%E5%BC%BA%E5%A4%A7%E3%80%81%E6%89%A9%E5%B1%95%E5%A5%BD%EF%BC%8C">https://blog.csdn.net/qq_34359363/article/details/72763491druid的功能强大、扩展好，</a> 15.那你感觉连接池的功能都有什么 1.资源重用 2.更快的系统响应速度 3.新的资源分配手段 4.统一的连接管理，避免数据库连接泄漏 16.项目大概几个人，开发的人，源码包大小多少<br>17.juc 看过哪些，说 AQS 的机制<br>18.Lock 如果给线程分配锁的<br>叭叭 ReentrantLock 19.公平锁和非公平锁的区别，源码级别<br>面试官补充：非公平锁就是抢占式的嘛 20.队列呢，了解什么<br>ArrayBlockQueue，LinkedBlockQueue 21.各个队列使用场景<br>22.queue 里面都有什么方法<br>offer，add，put 23.各个方法仔细讲讲，都会出现什么情况，添加的方法有什么，都有什么不同出队列呢，都有什么，跟 offer 对应的<br>24.jvm 看过什么、jvm 常用命令<br>25.jstat 的参数，比如看一个线程的回收情况，怎么看、其他的命令呢 26.动手去编译 JDK 源码<br>27.JVM 的类加载流程，到解析到字节码 28.如何去验证版本的冲突的，比如 jdk1.6 到 jdk1.7 29.初始化去怎么做的 30.实际运用中，ClassLoader 都有了解什么 31.如何实现一个动态加载、实现哪些方法 32.如何获取当前的 ClassLoader 33.那可以保持建立多个 ClassLoader 吗？ 34.为什么加载器加载出来的类不一样<br>35.jvm 内存模型 36.多线程如何实现主存同步的<br>缓存一致性扯一扯，Java 内存模型 37.那通过什么指令去实现其他工作内存无效的<br>38.Java 里怎么实现缓存一致性的<br>volatile、synchronized、lock、信号量、wait/notify<br>面试官补充：信号量也是加锁实现的<br>39.jvm 的锁优化有什么<br>说了 synchronized， 40.那还有其他编译器的锁优化吗，比如锁粗化<br>锁消除、、、、、 41.网络编程知道吗 42.创建 socket 的过程 43.从 server 端开始说吧，几个步骤 44.   accept 操作之后，然后呢 45.   怎么解析这个信息呢，输出到什么流里呢 46.互联网这块网络编程用的也挺多的，比如 rpc 框架什么的 47.    Java 里的 IO 这块你了解吗，区别<br>48.BIO、NIO、AIO 的对应类实现了解吗<br>49.shell 命令 50.进程通信方式<br>51.Linux 调度方式有什么<br>52.Linux 的缓存有几级<br>53.jdbc 连接 mysql 的几个步骤、为什么要加载驱动呢，原理是什么、PreparedStatement 和 Statement 区别、返回结果如何查询</p><p>准备 private static final URL、、、 也可以用 properties 从文件中读取。load()、1、首先注册驱动啊？怎么注册？反射啊，Class.forName(“xx.xx.xx.Driver”);底层怎么实现的？静态代码，DriverManager.registerDriver?启动的时候，会自动调用静态代码块的内容。2、接下来就是获取连接啊，怎么连接？远程连接(三次握手操作)，连接放哪里？作为资源必须放池子里。这样能提高性能。常见的连接池有 DBCP，C3P0，传说中最安全，性能最好的 Druid(国产)，而且还能监控。<br>3、你总的有 SQL 语句吧，之后就是 Statement 编译那。这里会出现 SQL 注入的安全问题。在语句后面加”1=1”成立。所以我们采用预编译的方式，PreparedStatement。可以防止这种问题的出现。<br>4、查完之后获取结果集。rs.getString().<br>5、头疼的来了，释放资源。各种 if(xx != nu) {try{ xx.close();}catch{}} 不用担心 JDK8 出来一个新特性，可以放在 try-withresource 中。还有各种异常可以采用通道的形式 XxxException | XxxException<br>6、各种异常需要你放到一个 try{}catch{}中，出问题你也不知道问题在哪里？麻烦吗？不用担心，我们可以封装成一个工具类，需要的时候调用工具类.getConnection();还是麻烦啊，可以用 Spring 框架为我们集成提供了 jdbcTemplate，HibernaterTemplate。用模板代码消除了大量的样板代码。&gt; 遍历结果集，叭叭</p><h4 id="10-29-三面：36-分钟左右"><a href="#10-29-三面：36-分钟左右" class="headerlink" title="10.29 三面：36 分钟左右"></a>10.29 三面：36 分钟左右</h4><p>1.说说 ArrayList 的源码各种方法吧，add，remove 一系列方法<br>2.MySQL 的聚簇索引 3.知道 SQL 注入吗、Java 里怎么防止的呢<br>4.Redis 和数据库的一致性 5.了解过什么开源的东西吗<br>Spring 6.那说说 AOP 吧<br>11.1 HR 面<br>11.5 offer</p><h3 id="面试资料"><a href="#面试资料" class="headerlink" title="面试资料"></a>面试资料</h3><p><a href="https://www.yuque.com/51cto/training/irbzty">https://www.yuque.com/51cto/training/irbzty</a><br><a href="https://www.yuque.com/51cto/training/hqrxuk">https://www.yuque.com/51cto/training/hqrxuk</a></p><h4 id="公众号"><a href="#公众号" class="headerlink" title="[公众号]"></a>[公众号]</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1585809350620-4f3202cd-5b96-4aa7-b221-496fc6f585bb.png#align=left&display=inline&height=89&originHeight=178&originWidth=184&size=36506&status=done&style=none&width=92" alt="image.png"> <img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1585809357634-799dd1e4-da08-49bf-89a6-e794ce05dd35.png#align=left&display=inline&height=89&originHeight=178&originWidth=184&size=36506&status=done&style=none&width=92" alt="image.png"></p><h4 id="免费领书"><a href="#免费领书" class="headerlink" title="[免费领书]"></a>[免费领书]</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1584851820695-9c904ca2-9522-4ca4-9caf-3070318e68f8.jpeg#align=left&display=inline&height=602&originHeight=1204&originWidth=800&size=255342&status=done&style=none&width=400" alt="phone.JPG"><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1584851823672-61c2da8d-0d8a-4de4-9edf-9665174b828c.jpeg#align=left&display=inline&height=600&originHeight=1200&originWidth=800&size=170500&status=done&style=none&width=400" alt="offer.JPG"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试经验</title>
      <link href="/2020/03/22/il73gx/"/>
      <url>/2020/03/22/il73gx/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>代码</title>
      <link href="/2020/03/15/ugxy0c/"/>
      <url>/2020/03/15/ugxy0c/</url>
      
        <content type="html"><![CDATA[<p>如果想在接口中新增一个方法，但又不想子类强制实现该方法时，可以给该方法加上 default 关键字，这个在实际工作中，也经常使用到，算是重构的小技巧吧。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>鸡汤</title>
      <link href="/2020/03/14/bfeage/"/>
      <url>/2020/03/14/bfeage/</url>
      
        <content type="html"><![CDATA[<p><strong>千学不如一看，千看不如一练。<br>**</strong>古之立大事者，不唯有超世之才，亦必有坚韧不拔之志。**</p><p><strong>一个不注意小事情的人，永远不会成功大事业。</strong></p><p><strong>今天应做的事没有做，明天再早也是耽误了。</strong><br>**<br>低头要有勇气，抬头要有底气。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NIO</title>
      <link href="/2020/03/12/nio/"/>
      <url>/2020/03/12/nio/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2020/03/12/nms3u7/"/>
      <url>/2020/03/12/nms3u7/</url>
      
        <content type="html"><![CDATA[<p>数据结构</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>缓存</title>
      <link href="/2020/03/12/cache/"/>
      <url>/2020/03/12/cache/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微服务</title>
      <link href="/2020/03/12/microserv/"/>
      <url>/2020/03/12/microserv/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2020/03/12/db/"/>
      <url>/2020/03/12/db/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记</title>
      <link href="/2020/03/11/gumxz2/"/>
      <url>/2020/03/11/gumxz2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>近期学习计划</title>
      <link href="/2020/03/11/eruyyn/"/>
      <url>/2020/03/11/eruyyn/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java培训资料-极客</title>
      <link href="/2020/03/11/irbzty/"/>
      <url>/2020/03/11/irbzty/</url>
      
        <content type="html"><![CDATA[<ol><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583930772255-42fb8217-48b4-44a9-a3c6-9cf5b3472026.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583930786821-4ddc4c81-f06f-4943-b57f-6d50461d5840.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583930803115-2aed0bd7-1b3e-464a-bca3-beb65363920f.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583930814456-dea20dd0-1d04-4c6a-a167-b0e30a3e657b.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583930825323-5f8477b2-b7c2-4631-a897-4000c1f995f8.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583930835682-1ea152bc-5f68-4754-ad6d-c3b62edd2008.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583931399979-9d0e6ae9-c737-4da4-971e-a0fd5ad10b9f.png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=934475&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583931470187-2751e30c-77f6-41da-8b9c-d057d178552e.png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=739999&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583931504816-7d516cfe-071a-4888-bf01-6e28d77f2a6f.png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=922821&status=done&style=none&width=360" alt="image.png"></p></li><li><p><a href="https://www.yuque.com/51cto/training/hqrxuk">https://www.yuque.com/51cto/training/hqrxuk</a></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java培训资料-拉勾</title>
      <link href="/2020/03/11/hqrxuk/"/>
      <url>/2020/03/11/hqrxuk/</url>
      
        <content type="html"><![CDATA[<ul><li><p><a href="https://kaiwu.lagou.com/member/share?wxinfo=2&shareId=5ae64c163008a1c2e7730eb72a69267be6555d3b837055aca9ab3f6a729df09c">https://kaiwu.lagou.com/member/share?wxinfo=2&amp;shareId=5ae64c163008a1c2e7730eb72a69267be6555d3b837055aca9ab3f6a729df09c</a></p><p>领取后加我[吃瓜]确认无误奖励红包 🧧<br>或者微信扫描下面的二维码领取 VIP，免费看技术课程，并且有 10 元红包哦。截止到 24 点哈！！！</p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1597677025894-eb519783-243d-4aa7-99ed-66c0b565d0b3.png#align=left&display=inline&height=260&originHeight=260&originWidth=260&size=4297&status=done&style=none&width=260" alt="%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%9B%BE%E7%89%87_8%E6%9C%8817%E6%97%A523%E6%97%B609%E5%88%8659%E7%A7%92.png"></p></li><li><p>或者微信扫描下面的二维码领取VIP，免费看技术课程，并且有10元红包哦。截止到24点哈！！！</p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1597677037906-95629b89-04f3-43a3-9632-405c570b503a.png#align=left&display=inline&height=260&originHeight=260&originWidth=260&size=2855&status=done&style=none&width=260" alt="53287a329d61453d5e7fd069029f374e.png"></p></li><li></li><li><p><strong>Java 面试(**</strong>一元羊毛*<strong>*)</strong></p></li><li><p><a href="https://t.lagou.com/mR63RmReR0609">https://t.lagou.com/mR63RmReR0609</a>** 1 元秒杀**｜开发必看：分布式技术一站式通关!从面试到实战，全面掌握分布式技术</p></li><li><p><strong><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1585734366339-8ec5639e-0249-4cd2-b094-774a07fc573c.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=811&size=3117790&status=done&style=none&width=405.5" alt="image.png"></strong></p></li><li><p><strong><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1584571436392-59f01dd8-2aa8-4752-ad51-a5e3a168ae45.png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=713538&status=done&style=none&width=360" alt="image.png"></strong></p></li></ul><ol><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583928112711-22c171bc-44c1-49f0-ab35-fbd545466441.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583928135117-db0e8722-8629-4353-b8a5-07433f68de4a.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583928154341-d22f4357-fa73-4b6d-b837-5b14be1a0890.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583928173651-224a98a6-8603-4d86-b953-c9e4ebccab73.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583928192212-55ce1e05-1d81-483e-b554-68d014886426.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583928204251-14f07d1a-bf6c-46f5-a59c-34b2470e9962.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583928214501-5c9069c7-b7ee-46cd-b89e-d0fe4c91b017.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583928234753-beac49a3-8e6e-47ac-98d8-7c912b13b78c.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583928254578-96cf7247-7930-420d-a006-d8cd231e4805.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583928264631-f90a6e2b-a532-453f-aa97-c98e0309035d.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2020/png/282505/1583928283635-64329903-de1e-4ee8-a257-6d6828f357cf.png?x-oss-process=image/format,png#align=left&display=inline&height=640&originHeight=1280&originWidth=720&size=2768326&status=done&style=none&width=360" alt="image.png"></p></li><li><p><a href="https://www.yuque.com/51cto/training/irbzty">https://www.yuque.com/51cto/training/irbzty</a></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记</title>
      <link href="/2020/03/11/chrh36/"/>
      <url>/2020/03/11/chrh36/</url>
      
        <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2019/png/215718/1567507815646-d739438a-8ffd-4107-9d87-130e2104446a.png#align=left&display=inline&height=232&originHeight=1553&originWidth=1080&size=367334&status=done&width=161" alt="image.png"></h4><p><em>插入封面图片，点击图片，设置图片大小</em></p><h4 id="关于本书"><a href="#关于本书" class="headerlink" title="关于本书"></a>关于本书</h4><p>插入「表格」</p><table><thead><tr><th><strong>书名</strong></th><th><a href="https://book.douban.com/subject/25944034/">《菊次郎与佐纪》</a></th><th><strong>作者</strong></th><th>北野武日本</th></tr></thead><tbody><tr><td><strong>出版社</strong></td><td>译林出版社</td><td><strong>阅读日期</strong></td><td>2019 年 2 月</td></tr><tr><td><strong>豆瓣评分</strong></td><td>8.1</td><td><strong>我的评分</strong></td><td>☆☆☆☆</td></tr></tbody></table><h4 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h4><p>在此处输入文本<br>你将读到的是北野武的出身、父母、兄弟和家庭的故事。<br>但请放心，这绝非一个自我感觉良好的人写的那种“优良课外读物”。<br>相反，北野武用搞笑到甚至刻薄方式描绘这些人和事，让我们在笑与泪的交织中，看到真情和真实，看到那么多情、柔软的心。</p><h4 id="书摘"><a href="#书摘" class="headerlink" title="书摘"></a>书摘</h4><p>在此处输入文本</p><ul><li>你将读到的是北野武的出身、父母、兄弟和家庭的故事。</li><li>但请放心，这绝非一个自我感觉良好的人写的那种“优良课外读物”。很喜欢这句 ← 方便打标签的状态卡片</li><li>相反，北野武用搞笑到甚至刻薄方式描绘这些人和事，让我们在笑与泪的交织中，看到真情和真实，看到那么多情、柔软的心。</li></ul><h4 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h4><p>在此处输入文本</p><ul><li>你将读到的是北野武的出身、父母、兄弟和家庭的故事。</li><li>但请放心，这绝非一个自我感觉良好的人写的那种“优良课外读物”。</li><li>相反，北野武用搞笑到甚至刻薄方式描绘这些人和事，让我们在笑与泪的交织中，看到真情和真实，看到那么多情、柔软的心。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习计划</title>
      <link href="/2020/03/11/wrbzgy/"/>
      <url>/2020/03/11/wrbzgy/</url>
      
        <content type="html"><![CDATA[<h3 id="学习重点"><a href="#学习重点" class="headerlink" title="学习重点"></a>学习重点</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/215718/1567514692551-49e3e165-3fab-4dd7-895e-4b7e9a57ec24.png#align=left&display=inline&height=25&originHeight=25&originWidth=25&size=1539&status=done&width=25" alt="image.png">插入「脑图」并进行编辑<br><img src="https://cdn.nlark.com/yuque/0/2019/png/215718/1567567603546-29ab2829-0200-4200-94a0-c2757113ac2c.png"></p><h3 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h3><h4 id="课堂-PPT"><a href="#课堂-PPT" class="headerlink" title="课堂 PPT"></a>课堂 PPT</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/215718/1567514692551-49e3e165-3fab-4dd7-895e-4b7e9a57ec24.png#align=left&display=inline&height=25&originHeight=25&originWidth=25&size=1539&status=done&width=25" alt="image.png">嵌入「本地文件」，在文档中可预览此文件：</p><blockquote><p>脑图（XMind、Mind Manager、Mind Node）<br>设计文件（PhotoShop、Sketch、Axure)<br>办公文件（PDF、PPT、Word、Excel、Keynote、Pages、Numbers）</p></blockquote><p><a href="https://www.yuque.com/attachments/yuque/0/2019/key/105911/1570525820640-578ca4d1-d66e-4632-8835-962fa48e32f3.key">示例 keynote.key</a></p><h4 id="教学视频"><a href="#教学视频" class="headerlink" title="教学视频"></a>教学视频</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/215718/1567514692551-49e3e165-3fab-4dd7-895e-4b7e9a57ec24.png#align=left&display=inline&height=25&originHeight=25&originWidth=25&size=1539&status=done&width=25" alt="image.png">嵌入「本地视频」或「在线视频」，如优酷及 Bilibili 视频：</p><iframe src="https://player.bilibili.com/player.html?aid=55895675" frameborder="no" allowfullscreen="true"></iframe><h4 id="阅读材料"><a href="#阅读材料" class="headerlink" title="阅读材料"></a>阅读材料</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/215718/1567514692551-49e3e165-3fab-4dd7-895e-4b7e9a57ec24.png#align=left&display=inline&height=25&originHeight=25&originWidth=25&size=1539&status=done&width=25" alt="image.png">插入「附件」</p><p><a href="https://www.yuque.com/attachments/yuque/0/2019/pdf/105911/1570525820813-a79b3d0f-38cb-4a73-a2bb-ce8f091f2049.pdf?_lake_card=%7B%22uid%22:%22rc-upload-1567514495288-26%22,%22src%22:%22https://www.yuque.com/attachments/yuque/0/2019/pdf/105911/1570525820813-a79b3d0f-38cb-4a73-a2bb-ce8f091f2049.pdf%22,%22name%22:%22%E7%A4%BA%E4%BE%8BPDF.pdf%22,%22size%22:16189,%22type%22:%22application/pdf%22,%22ext%22:%22pdf%22,%22progress%22:%7B%22percent%22:0%7D,%22status%22:%22done%22,%22percent%22:0,%22id%22:%22wTSXR%22,%22refSrc%22:%22https://www.yuque.com/attachments/yuque/0/2019/pdf/105911/1569247460410-d74712f0-05ce-474b-b914-d76439248860.pdf%22,%22card%22:%22file%22%7D">示例 PDF.pdf</a></p><h3 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h3><p><img src="https://cdn.nlark.com/yuque/0/2019/png/215718/1567514692551-49e3e165-3fab-4dd7-895e-4b7e9a57ec24.png#align=left&display=inline&height=25&originHeight=25&originWidth=25&size=1539&status=done&width=25" alt="image.png">插入「表格」，可以在表格框里插入对应的图片、附件、状态</p><table><thead><tr><th align="center"><strong>书名</strong></th><th align="center"><strong>章节</strong></th><th align="center"><strong>计划阅读时间</strong></th><th align="center"><strong>进程</strong></th></tr></thead><tbody><tr><td align="center">《基础有机化学》</td><td align="center">第三章</td><td align="center">2h</td><td align="center">已完成</td></tr><tr><td align="center">《无机化学》</td><td align="center">第一章</td><td align="center">1h</td><td align="center">进行中</td></tr><tr><td align="center">《物理化学》</td><td align="center">第四章</td><td align="center">1h</td><td align="center">未开始</td></tr><tr><td align="center"><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/105911/1571983625842-9d347225-731e-41e0-ab51-91a232a2db72.jpeg#align=left&display=inline&height=3264&originHeight=3264&originWidth=4896&size=1555309&status=done&width=4896" alt="alex-knight-2EJCSULRwC8-unsplash.jpg"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>todo 系列</title>
      <link href="/2021/12/03/gruhk2/"/>
      <url>/2021/12/03/gruhk2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==%E2%88%A3=2247486570&idx=1&sn=25afad26c7986aaaf32e0be8de2fc334&chksm=e8c3fb9edfb4728831bd29cbc6b9805baea8b2670401cf54f21f0675c6026811bea511dac811&scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==∣=2247486570&amp;idx=1&amp;sn=25afad26c7986aaaf32e0be8de2fc334&amp;chksm=e8c3fb9edfb4728831bd29cbc6b9805baea8b2670401cf54f21f0675c6026811bea511dac811&amp;scene=21#wechat_redirect</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==%E2%88%A3=2247486570&idx=1&sn=25afad26c7986aaaf32e0be8de2fc334&chksm=e8c3fb9edfb4728831bd29cbc6b9805baea8b2670401cf54f21f0675c6026811bea511dac811&scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzIzNzgyMjYxOQ==∣=2247486570&amp;idx=1&amp;sn=25afad26c7986aaaf32e0be8de2fc334&amp;chksm=e8c3fb9edfb4728831bd29cbc6b9805baea8b2670401cf54f21f0675c6026811bea511dac811&amp;scene=21#wechat_redirect</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>yy-14.1</title>
      <link href="/2021/09/22/kckkzw/"/>
      <url>/2021/09/22/kckkzw/</url>
      
        <content type="html"><![CDATA[<p>美文插画集：我希望有这么一个人，不嫌弃我的坏脾气，<br>不嫌弃我的坏习惯，不嫌弃我的家境怎样，始终站在我身边，一不小心就白头到老了。</p><p>人一简单就快乐，一世故就变老。保持一颗年轻的心，做个简单的人，<br>享受阳光和温暖。生活就应当如此。</p><p>真的很害怕，有一天会有另外一个人出现，取代了我在你心中的位置。</p><p>有没有试过回过头去看你跟一个人的聊天记录，从一开始到现在。<br>看着看着就笑了，笑着笑着就哭……一个人，从陌生走近你，然后再陌生。</p><p>我们这一生，注定有很多偶遇，偶遇一件事，偶遇某个人，让我们的生<br>活多了许多曲折。不管怎样，总有那么几件事，让你念念不忘，总有那<br>么一个人，让你陡生叹惜。错过的，就当是路过吧，遗忘是彼此最好的<br>怀念。一路走来，偶遇的星光，让我们有遗憾，亦有温暖。</p><p>男人只有穷一次，才知道哪个女人最爱你。 女人只有丑一次，才知道<br>哪个男人不会离开你。 人只有落魄一次，才知道谁最真谁最在乎你。<br>陪伴，不是你有钱我才追随。 珍惜，不是你漂亮我才关注。 时间留<br>下的，不是财富，不是美丽，是真诚。</p><p>只有先让时间有意义，时间才会让你的生命有价值。</p><p>【树的忠告】① 站，要挺拔、自豪；② 观点，要敢于独树一帜；<br>③ 行，要永不忘根；④ 日常，要摄取充足水分；<br>⑤ 请接受你的自然美；⑥ 请享受眼前风景。</p><p>我从不喜欢让别人看见我的眼泪，我宁可让别人觉得我快乐的没心没<br>肺，也不愿让自己看起来委屈可怜。</p><p>一个人爱不爱你，在不在意你，你是感觉得到的。不要骗自己，不要勉强自己。</p><p>女人累了回家撒撒娇，男人累了回家唯有撒泡尿！ 男人这辈子挺难的：<br>1,找个漂亮女人吧，太操心， 2 找个不漂亮的吧，又不甘心；<br>3 光顾事业了，人家说你没责任感， 4 光顾家了，人家又说你没本事；<br>5 专一点吧，人家说你不成熟； 6 花心点吧，人家说你是禽兽；<br>7 有钱，说你是坏人， 8 没有钱，人家骂你窝囊废；<br>9 自己奋斗吧，等有钱了女友也老了，<br>10 让女人养吧，不如自宫练葵花宝典算了。<br>11 不去应酬，怕被老板废了，<br>12 去应酬吧，怕被老婆废了。<br>13 哎！这年月做男人真难。<br>14 女人可以等嫁，俺们等啥呀？<br>15 女人还有个三八节，俺们有啥呀？<br>16 男人累—- 所以才会去敲背，<br>17 男人愁—- 所以才会去洗头，<br>18 男人苦—- 所以经常才去赌， 希望大家能多体谅男人！<br>男人这辈子挺难的：<br>1 帅点吧，太抢手，<br>2 不帅吧，拿不出手，<br>3 活泼点吧，说你太油，<br>4 不出声吧，说你太闷；<br>5 穿西装吧，说你太严肃，<br>6 穿随便一点吧，说你乡吧佬；<br>7 会挣钱吧，怕你包二奶，<br>8 不挣钱吧，又怕孩子断奶；<br>9 结婚吧，怕自己后悔，<br>10 不结婚吧，怕她后悔；<br>11 要个孩子吧，怕出来没钱养，<br>12 不要孩子吧，怕老了没人养。<br>三十岁左右正在打拼事业的男人就像个搬砖工人，他抱着砖，就没法抱你；<br>他放下砖，就没法养你。 —-献给所有正在不断努力，劳动，创业，承受着所有压力的好男人们 ！<br>男人这辈子挺难的： 有同感的爷们赞一下！ —-有同情心的女人们也赞一下！</p><p>看起来毫不在乎，其实你不知道我忍住了多少次想要找你的冲动。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>yy-14</title>
      <link href="/2021/09/22/fh5lku/"/>
      <url>/2021/09/22/fh5lku/</url>
      
        <content type="html"><![CDATA[<p>很多的感情，都因为一厢情愿，最后连朋友都当不成了。<br>一些本来很好的友情，最后却因为对方的一句喜欢你，<br>如果你没有反应，这一段友情似乎也难以维持下去了。<br>表白了之后不是成了男女朋友，要不就连朋友都当不成了。<br>然而你可能永远都不甘心只是朋友。</p><p>爱的传承：娶一个美女做妻子这只能看到一个男人的本能<br>，帮助自己的妻子变得越来越美丽这才能看出一个男人的本事<br>；嫁给一个成功的男人最多只能证明这个女人找到了宝藏，<br>帮助自己的男人变得越来越成功却能够证明这个女人本身就是宝藏。<br>好的婚姻是通过造就对方来成就自己，<br>不好的婚姻是通过消耗对方来满足自己。<br>＂——爱，会让彼此更加优秀！中国第一对婆媳首席。</p><p>【如何让自己进步更快】1、 永远不说不可能。<br>2、凡事第一反应找方法，不是找借口。3、养成记录习惯，不太依赖脑袋。<br>4、每天出门照镜子，给自己自信的微笑。5、每天自我反省。<br>6、用心倾听，不打断别人的话，作个倾听高手。7、节俭定期存钱。<br>8、遵守诚信，说到做到。9、时刻微笑待人处事。</p><p>把买十件衣服的钱拿来买一件衣服，你的衣柜就经典了、 把做十件事的精力拿来做一件事<br>，你的事业就经典了、你把零乱复杂的情感聚集在一个值得聚焦的人身上，你的爱情就经典了<br>…生活的现实告诉女人：你若把自己经营成女皇，自然吸引来帝王，你若把自己经营成公主，<br>自然吸引到王子，你若把自己经营成美女，自然吸引来英雄，你若把自己经营成妖精，<br>自然吸引来流氓！你把自己经营到什么层面，就能吸引到什么层面的另一半！<br>你若盛开，蝴蝶自来、你若精彩，老天自有安排！</p><p>有些事，不是不在意，而是在意了又能怎样。</p><p>不要让那个喜欢你的人，撕心裂肺地为你哭那么一次。因为，你能把她伤害到那个样子的机会，<br>只有一次。那一次以后，你就从不可或缺的人，变成可有可无的人了。即使，她还爱你，<br>可是，总有一些，真的东西改变了！</p><p>没有哪种爱情，需要你放弃尊严作践自己，要你去受罪吃苦。爱情或许会让你不知所措，<br>会让你嫉妒生气，会让你伤心流泪。但它最终是温暖的，能给你愉悦，能给你安全感。<br>如果不是这样，那要么爱错人，要么用错方法。与其受罪，还不如单身。<br>没有你想要的拥抱，那就先学会一个人坚强吧。</p><p>当我们懂得珍惜平凡的幸福时，就已经成了人生的赢家。</p><p>恋爱潜规则：婚姻的难处在于我们是和对方的优点谈恋爱，<br>却要和对方的缺点生活在一起。所以，聪明的男人说一半，<br>留一半，而聪明的女人睁一只眼，闭一只眼！</p><p>有时候，一个人想要的只是一只可握的手和一颗理解的心。</p><p>其实你是幸福的：1.大早被闹钟吵醒，说明还活着; 2.不得不从被窝里爬起来上班，说明没有失业； 3.收到一些短信，搓搓麻将吃饭聚聚，说明还有朋友想咱； 4.上司的话十分刺耳，说明老板在关注我； 5.衣服越来越紧，说明吃得还算营养； 6.很想休息但没批准，说明还有一定位置离不开你</p><p>珍惜现在所拥有的一切，感谢上天！感恩爸妈！</p><p>一批成功的美国人 50 岁接受采访时给年轻人的人生忠告中说得最多的三句话：<br>1）不要被世俗教条蒙蔽，追随你的心和梦想；<br>2）关注你的家庭和你爱的人；<br>3）享受人生体验和珍惜快乐时光。</p><p>我喜欢在伤心的时候听伤心的歌，喜欢在开心的时候和在乎的人分享。<br>我常常口是心非，想拒绝却开不了口；朋友挺多，但懂我的不多；<br>不喜欢主动联系别人，但绝不是不在乎。<br>我不喜欢欠别人，也不喜欢别人欠我。我很安静，也可以很疯癫<br>我就是我，不要觉得我没心没肺，我只是对很多事看得很开。</p><p>真正的爱，是接受，不是忍受；是支持，不是支配；<br>是慰问，不是质问；真正的爱，要道谢也要道歉。<br>要体贴，也要体谅。要认错，也好改错；真正的爱，<br>不是彼此凝视，而是共同沿着同一方向望去。<br>其实，爱不是寻找一个完美的人。<br>而是，要学会用完美的眼光，欣赏一个并不完美的人。</p><p>有时候，我们愿意原谅一个人，并不是我们真的愿意原谅他，<br>而是我们不愿意失去他。道歉并不总意味着你是错的，<br>它只是意味着你更珍惜你们之间的关系。</p><p>人生看透不如看淡。人生很多人事，不是不懂，只是无奈。<br>一辈子，就图个心里痛快。那些想不通头疼，<br>想通了心疼的人事，不如淡然视之。<br>我们真实地活着，但不是每个人，<br>每件事都要较真到底.<br>。真实的背后，往往隐藏着一场心痛。开心地活着，<br>如花自然开，自然落，不难过。花非花，雾非雾，看淡者优雅。</p><p>不要在一件别扭的事上纠缠太久。纠缠久了，你会烦，会痛，<br>会厌，会累，会神伤，会心碎。实际上，到最后，你不是跟<br>事过不去，而是跟自己过不去。无论多别扭，你都要学会抽<br>身而退。不要因为去绝美风景的路上偶遇了一条臭水沟，而<br>坏了欣赏美的心境，而耽误了其它的美，要想想你为什么来这里。</p><p>关于婚姻。杨澜对于王菲婚变的一段话：婚姻需要爱情之外的另一种纽带，<br>最强韧的一种不是孩子，不是金钱，而是关于精神的共同成长，<br>那是一种伙伴的关系。在最无助和软弱时候，在最沮丧和落魄的时候，<br>有他托起你的下巴，扳直你的脊梁，命令你坚强， 并陪伴你左右，<br>共同承受命运。那时候，你们之间的感情除了爱，还有肝胆相照的义气，<br>不离不弃的默契，以及铭心刻骨的恩情。</p><p>要记住每一个对你好的人， 因为他们本可以不这么做的。</p><p>是那个人，不说他也懂；不是那个人，说了也没用。是那个人，不解释也没关系；<br>不是那个人，解释也多余。是那个人，不留他也不走；不是那个人，留也留不住。<br>是那个人，不等自然会遇到；不是那个人，原地也会走丢。</p><p>今天的生活是由 3 年前决定的，但是如果你今天还过着和 3 年前一样的生活，<br>3 年后你一样得这样过着。生活不是用来重复，亲爱的，你需要改变，<br>今天就开始改变，从现在开始找到你想要的。</p><p>1 不努力的男人只有两种结果，抽不完的低档烟和干不完的体力活，不努力的女人只有两种结果，穿不完的地摊货和逛不完的菜市场！(学会奋斗)<br>2 不要奢望别人给你经济上的任何帮助，钱对任何人都是不够用的，有一万元的 人想干两万元的事，有 10 万元的人想干 20 万元的事。（ 学会给与）<br>3 朋友帮你是善事，是道义；朋友不帮你也无可厚非，不该心怀怨尤。 （学会理解）<br>4 要知道没有人必须在你需要的时候帮你，只有你自己，所以让自己独立、坚强、快乐、幸福，才是你需要做的，毕竟只有自己必须和你生死与共，<br>息息相关。明白？（学会坚强）<br>5 不要看贫富交朋友，他有亿万家财跟你一毛钱关系都没有，别把自己弄成哈巴狗。他也许一无所有却可以把唯一的馒头分给你。 （学会分辨）<br>6 不要为了经济富有的朋友疏远了精神富有的朋友，慢慢你会明白，经济上富裕的朋友可以带你吃喝玩乐，也可以带给你复杂纷乱的世俗烦恼，<br>精神富有的朋友也许只能带你去田野里，去溪流畔，没有美酒佳肴，没有香槟、咖啡、没有舞池，可是她能陪你一起奔跑、一起笑的像傻子。（学会自重）<br>7 可以相信世上真的有美好坚贞的爱情，不要憧憬那么浪漫的事会发生在你身上，它只属于牛郎织女、梁山伯祝英台、还有外国的罗密欧和朱丽叶。<br>因为他们都没有活很久。而我们是要活很久的。（学会珍惜 ）<br>8 不管你因为什么结婚，只要你有了孩子，你就要爱这个家，不管它多么简陋多么寒冷，你都有义务让它温馨起来，因为你是父母！（学会承担）<br>9 我们的青春眨眼间就没有了，皱纹一条一条的爬到眼角，我们阻止不了岁月破坏我们的容颜，可是我们可以让心在岁月中慢慢磨砺，如蚌中的沙，<br>慢慢的光润起来，等到我们发苍齿摇、步履蹒跚的时候，还可以让珍珠的光泽晕红最后的行程，不是吗？ （学会成长）<br>10 不要执着，人生有很多不如意，世界不会迎合你，地球不是为你转的，所以不要执着于拥有，连我们都只是红尘的过客，生是赤条条的来，<br>死又能带走什么呢？（学会放手）</p><p>这几年，累是一定的。但我相信我的人生不可能就止于此了。我不想长大变成街上一抓一把的庸人，我不想以后为钱发愁，<br>我不想以后每天做的都是不喜欢却必须做的事，我不想成为那种人。我有我的梦想，所以我要努力。只有坚持这阵子，<br>才不会辛苦一辈子。我发誓会努力，我会让自己过得很好。</p><p>走吧，走吧，人总要学着自己长大；走吧，走吧，人生难免经历苦痛挣扎；走吧，走吧，为自己的心找一个家，<br>也曾伤心流泪，也曾黯然心碎，这是爱的代价。</p><p>心理学家认为，判断男女两个人是否适合,应考虑以下 10 个因素。<br> 第一、彼此都是对方的好朋友，不带任何条件，喜欢与对方在一起。<br> 第二、彼此很容易沟通、互相可以很敞开地坦白任何事情，而不必担心被对方怀疑或轻视。<br> 第三、两人在心灵上有共同的理念和价值观，并且对这些观念有清楚的认识与追求。<br> 第四、双方都认为婚姻是一辈子的事，而且双方都坚定地愿意委身在这个长期的婚姻关系中。<br> 第五、当发生冲突或争执的时候可以一起来解决，而不是等以后来发作。<br>第六、相处可以彼此逗趣，常有欢笑，在生活中许多方面都会以幽默相待。<br> 第七、彼此非常了解，并且接纳对方，当知道对方了解了自己的优点和缺点后，仍然确信被他所接纳。<br> 第八、从最了解你、也是你最信任的对方处得到支持的肯定。<br> 第九、有时会有浪漫的感情，但绝大多数的时候，你们的相处是非常满足而且是自由自在的。<br> 第十、有一个非常理性和成熟的交往，并且双方都能感受到，在许多不同的层面上你们是很相配的.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql 客户端</title>
      <link href="/2021/09/15/bi96sb/"/>
      <url>/2021/09/15/bi96sb/</url>
      
        <content type="html"><![CDATA[<p><a href="https://sequelpro.com/download#auto-start">https://sequelpro.com/download#auto-start</a><br><a href="https://sequelpro.com/download#auto-start">https://sequelpro.com/download#auto-start</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jmx 系统监控</title>
      <link href="/2021/08/17/vgafpo/"/>
      <url>/2021/08/17/vgafpo/</url>
      
        <content type="html"><![CDATA[<ul><li><p>在<a href="https://time.geekbang.org/column/article/159487">19 讲</a>中，我提到可以<strong>使用 JMX 监控 Kafka 队列的堆积数</strong>，再比如，你也可以通过<strong>JMX 监控 JVM 内存信息和 GC 相关的信息。</strong></p></li><li><p>你所熟知的 Tomcat 和 Nginx 的<strong>访问日志</strong>，都是重要的监控日志。你可以通过<strong>开源的日志采集工具</strong>，将这些日志中的数据发送给监控服务器。目前，常用的日志采集工具有很多，比如，<a href="http://flume.apache.org/">Apache Flume</a>、<a href="https://www.fluentd.org/">Fluentd</a>和<a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-overview.html">Filebeat</a>，你可以选择一种熟悉的使用。在我的项目中，<strong>我倾向于使用 Filebeat 来收集监控日志数据</strong>。</p></li><li><p>目前业界比较常用的<strong>时序数据库有 InfluxDB、OpenTSDB、Graphite</strong>，各大厂的选择均有不同，你可以选择一种熟悉的来使用。</p></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1629157426308-fabd2219-29b6-4e20-981a-3411d045fed4.png#clientId=u5d35200a-940b-4&from=paste&height=224&id=u5636ce21&originHeight=224&originWidth=751&originalType=binary%E2%88%B6=1&size=72428&status=done&style=none&taskId=u6929e232-4538-4121-a75f-099725b5355&width=751" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>idea 2018.1.5</title>
      <link href="/2021/08/13/vc3w1q/"/>
      <url>/2021/08/13/vc3w1q/</url>
      
        <content type="html"><![CDATA[<pre><code>ThisCrackLicenseId-&#123;“licenseId”:”11011”,“licenseeName”:”Wechat”,“assigneeName”:”tree-deep-see-deer”,“assigneeEmail”:”2378437815@qq.com”,“licenseRestriction”:””,“checkConcurrentUse”:false,“products”:[&#123;“code”:”II”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”DM”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”AC”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”RS0”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”WS”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”DPN”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”RC”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”PS”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”DC”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”RM”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”CL”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”PC”,”paidUpTo”:”2099-12-31”&#125;],“hash”:”2911276/0”,“gracePeriodDays”:7,“autoProlongated”:false&#125;</code></pre><pre><code>ThisCrackLicenseId-&#123;“licenseId”:”11011”,“licenseeName”:”Wechat”,“assigneeName”:”tree-deep-see-deer”,“assigneeEmail”:”2378437815@qq.com”,“licenseRestriction”:””,“checkConcurrentUse”:false,“products”:[&#123;“code”:”II”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”DM”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”AC”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”RS0”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”WS”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”DPN”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”RC”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”PS”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”DC”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”RM”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”CL”,”paidUpTo”:”2099-12-31”&#125;,&#123;“code”:”PC”,”paidUpTo”:”2099-12-31”&#125;],“hash”:”2911276/0”,“gracePeriodDays”:7,“autoProlongated”:false&#125;</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1628861779766-8af83e5a-4353-418f-acb0-df5520f0859c.png#clientId=u3a948a1e-cca8-4&from=ui&id=u8a22975c&originHeight=384&originWidth=620&originalType=binary%E2%88%B6=1&size=265361&status=done&style=none&taskId=u4eb891e1-7a0f-4728-95cd-c54b3b57ec2" alt="截屏2021-08-13 下午9.35.35.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>源码</title>
      <link href="/2021/06/19/ygkwfv/"/>
      <url>/2021/06/19/ygkwfv/</url>
      
        <content type="html"><![CDATA[<p>org.springframework.transaction.interceptor.TransactionAspectSupport.TransactionInfo#bindToThread<br>事务<br><a href="https://www.toutiao.com/a6966917901601309217/">https://www.toutiao.com/a6966917901601309217/</a><br><a href="https://www.toutiao.com/a6966917901601309217/">https://www.toutiao.com/a6966917901601309217/</a></p><p>token<br><a href="https://www.toutiao.com/a6947245110669099552/">https://www.toutiao.com/a6947245110669099552/</a><br><a href="https://www.toutiao.com/a6947245110669099552/">https://www.toutiao.com/a6947245110669099552/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>源码</title>
      <link href="/2021/06/19/zah639/"/>
      <url>/2021/06/19/zah639/</url>
      
        <content type="html"><![CDATA[<p>SpringBootConfiguration<br>springboot 注解 <a href="https://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==%E2%88%A3=2247517350&idx=1&sn=96ab31817c899bd12254dda46b5c7e2f">注解</a><br><a href="https://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==%E2%88%A3=2247517350&idx=1&sn=96ab31817c899bd12254dda46b5c7e2f">注解</a><br><a href="http://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==%E2%88%A3=2247517350&idx=1&sn=96ab31817c899bd12254dda46b5c7e2f">http://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==∣=2247517350&amp;idx=1&amp;sn=96ab31817c899bd12254dda46b5c7e2f</a></p><hr><p><strong>public void **refresh() **throws **BeansException, IllegalStateException {<br>Object var1 = **this</strong>.startupShutdownMonitor;<br><strong>synchronized</strong>(<strong>this</strong>.startupShutdownMonitor) {<br><strong>this</strong>.prepareRefresh();<br>ConfigurableListableBeanFactory beanFactory = <strong>this</strong>.obtainFreshBeanFactory();<br><strong>this</strong>.prepareBeanFactory(beanFactory);</p><pre><code>    **try **&#123;        **this**.postProcessBeanFactory(beanFactory);        **this**.invokeBeanFactoryPostProcessors(beanFactory);        **this**.registerBeanPostProcessors(beanFactory);        **this**.initMessageSource();        **this**.initApplicationEventMulticaster();        **this**.onRefresh();        **this**.registerListeners();        **this**.finishBeanFactoryInitialization(beanFactory);        **this**.finishRefresh();    &#125; **catch **(BeansException var9) &#123;        **if **(**this**.logger.isWarnEnabled()) &#123;            **this**.logger.warn(**&quot;Exception encountered during context initialization - cancelling refresh attempt: &quot; **+ var9);        &#125;        **this**.destroyBeans();        **this**.cancelRefresh(var9);        **throw **var9;    &#125; **finally **&#123;        **this**.resetCommonCaches();    &#125;&#125;</code></pre><p>}</p><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Object var1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">;</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> var9<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - cancelling refresh attempt: "</span> <span class="token operator">+</span> var9<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">cancelRefresh</span><span class="token punctuation">(</span>var9<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> var9<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>refresh</strong>()–&gt;**onRefresh()–&gt;**createWebServer()–&gt;</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   WebServer webServer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webServer<span class="token punctuation">;</span>   ServletContext servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>webServer <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> servletContext <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      ServletWebServerFactory factory <span class="token operator">=</span> <span class="token function">getWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>webServer <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>servletContext <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> ex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"Cannot initialize servlet context"</span><span class="token punctuation">,</span>               ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>心语</title>
      <link href="/2021/03/20/mdib2d/"/>
      <url>/2021/03/20/mdib2d/</url>
      
        <content type="html"><![CDATA[<p>【心语】最使人颓废的往往不是前途的坎坷，而是我们信心的丧失。当全世界都在说放弃的时候，坚定地告诉自己：再试一次！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客同步～格式测试</title>
      <link href="/2021/03/06/gegpst/"/>
      <url>/2021/03/06/gegpst/</url>
      
        <content type="html"><![CDATA[<p>title: <strong>博客同步～格式测试</strong><br>author: 机器人<br>top: true<br>cover: false<br>coverImg: /medias/featureimages/12.jpg<br>toc: true<br>mathjax: false<br>summary: 有效 categories tags top author title date。<br>categories:</p><ul><li>测试</li><li>test</li></ul><p>tags:</p><ul><li>Github Actions</li><li>持续集成</li><li>语雀[,]</li><li>Hexo</li><li>CI/CD</li><li>tags</li></ul><p>urlname: charging</p><p>date: 2021-03-02 23:15:33</p><p>img:</p><p>password:123</p><p>updated:2021-03-05 23:15:33</p><hr><p>tags: [Hexo, Github]<br>categories: [Blog]<br>description: 重复不起作用！</p><hr><p>手机电池不耐用，很多人觉得似乎要换电池了。现在分享一波苹果电池实用技巧,可延长 iPhone 手机电池寿命哦！<br><strong>1.不要过夜充电</strong><br>锂电池充电快速，从零到充满大约只需要 1 小时。而现在的智慧型手机内建的芯片都有保护机制，一旦电量充满，便会停止充电器的电流流入电池内。因此如果电池充满之后，即使没有拔下充电插头，也不会有多余的电流流入电池，造成电池的伤害。<br>但坏消息是，当充电器电流不再流入电池内，电量便会开始自然流失，这时充电器的电流又会开始流入手机内，直到电量达 100％。换句话说，如果不拔下充电插头，一整晚手机便会重复这个过程，这会导致手机温度升高，会降低电池容量。<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1607495673205-c0a253f2-a327-477c-b0ef-0c4672f6053a.jpeg#align=left&display=inline&height=260&originHeight=260&originWidth=401&size=0&status=done&style=none&width=401"><br><strong>2.电量长期维持在 65%～ 75％之间手机电池的寿命最长</strong><br>**<img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1607495673246-6ddc606c-330e-4d74-a374-ea5a89c09d57.jpeg#align=left&display=inline&height=276&originHeight=276&originWidth=369&size=0&status=done&style=none&width=369">**<br>实际上很难做得到。你可以退而求其次，尽可能让电量维持在 45％～ 75％之间，再差的情况是不要低于 25％。如同前文提及，千万不要等到电力过低或完全没电时才充电。<br><strong>3.使用合理化软件控制充电</strong><br>**<img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1607495673196-1ae2e126-804e-4c31-ba4d-9a4795df8a50.jpeg#align=left&display=inline&height=261&originHeight=261&originWidth=396&size=0&status=done&style=none&width=396">**<br>一般锂电池充电状态下，电量达到 90%就会默认充满，可以在手机中下载一些软件，进行控制电流进行【涓流充电】，来达到让电池充到满额的程度，保护手机电池的安全。<br><strong>4.必须选用专用充电器</strong><br>锂离子电池必须选用专用充电器，否则可能会达不到饱和状态，影响其性能发挥。充电完毕后，应避免放置在充电器上超过 12 小时以上，长期不用时应使电池和手机分离。<br><strong>5.注意手机温度</strong><br>**<img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1607495673222-fc99f9bf-72f0-499b-b984-e4ef1a8012bd.jpeg#align=left&display=inline&height=310&originHeight=310&originWidth=335&size=0&status=done&style=none&width=335">**<br>一般情况下，手机使用的电池都有一个活性问题，而电池的活性又与环境的温度有关，一般来说，手机电池在-10℃~50℃ 之间能正常工作。<br>我们应尽量避免手机在温度高于 50℃ 或低于-10℃ 的环境下工作，否则使用时间和寿命会大大缩短。<br><strong>6.不要彻底用完电量后再去充电</strong><br>**<img src="https://cdn.nlark.com/yuque/0/2020/jpeg/282505/1607495673251-ced4ddc6-7be2-465e-bad6-37f1d2351692.jpeg#align=left&display=inline&height=276&originHeight=276&originWidth=441&size=0&status=done&style=none&width=441">**<br>频繁的浅度充放电会比深度充放电有助于延长电池的寿命，千万不要以为充电次数多会损坏电池，这个说法对锂离子电池并不适用。<br>应该尽量减少电池满电状态的时间。充满电后不拔掉电源，会让电池一直保持满电状态，虽然不会爆炸，但是会加快电池容量的损失速度。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小米面试题</title>
      <link href="/2021/03/06/utq0ds/"/>
      <url>/2021/03/06/utq0ds/</url>
      
        <content type="html"><![CDATA[<p><strong>小米面试题</strong><br>1.  二分<br>2.  四次挥手中的  TIME_WAIT  状态存在的意义 3. TCP  为什么可靠<br>4.  滑动窗口是什么 5. HTTP  和  HTTPS  的区别 6. TCP  三次握手和四次挥手的各种状态 7. Linux  中的网络  IO<br>8.  各种索引的理解<br>9.  各种日志的理解 10. Redis  的持久化 11. Redis  和  Mem***的区别 12. go  的协程怎么实现的与  c++的区别<br>13.  进程并发和并行 14. tcp  是什么层协议 15. tcp  和  udp  区别<br>16.  讲一下  tcp  连接三次握手 为什么是三次 17. http  底层是什么协议<br>18.  为什么<br>19.  讲一下  tcp  流量控制和拥塞控制<br>20.  两个链表的第一个公共结点：输入两个链表，找出它们的第一个公共结<br>点。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小米 Java 岗位面经汇总</title>
      <link href="/2021/03/06/ryv68p/"/>
      <url>/2021/03/06/ryv68p/</url>
      
        <content type="html"><![CDATA[<p><strong>小米 Java 岗位面经汇总</strong><br><strong>目录</strong><br>小米  java  社招面试记录…………………………………………………………………………………1<br>小米  java  岗位秋招面经…………………………………………………………………………………3<br>小米  Java  开发岗面试经常会问什么？ ……………………………………………………….4<br>小米  Java  开发  2017  面经 暑期实习+秋招  ,附备战总结………………………..5<br>小米  2019  秋招面经……………………………………………………………………………………. 11<br>小米面经  Java  开发…………………………………………………………………………………….. 12<br>小米软件开发工程师（Java  方向）面经…………………………………………………. 14<br>小米软开  java  一面………………………………………………………………………………………. 16<br><strong>小米  java  社招面试记录</strong><br>链接：<br><a href="https://www.nowcoder.com/discuss/360604?type=2%E2%84%B4=0&pos=4&page=1">https://www.nowcoder.com/discuss/360604?type=2ℴ=0&amp;pos=4&amp;page=1</a><br>来源：牛客网<br>一面<br>二分查找（递归和非递归）<br>反转链表（递归和非递归）<br>常用  Java  集合类<br>HashMap  为什么长度是  2  的  n  次幂，数据结构，扩容（包括元素移动的细节），<br>线程不安全的问题<br>ConcurrentHashMap  怎么保证线程安全，1.7  和  1.8  有什么变化，为什么要要这<br>么优化<br>CopyOnWriteList  怎么保证线程安全，为什么这么做<br>Java synchronized  关键字的作用，原理，锁升级、锁粗化、锁消除<br>volatile  关键字的作用，原理 MVCC<br>事务的  ACID，每一项是如何保证的<br>MySQL  的索引结构，为什么是  B+树而不是  B  树<br>二面<br>先升序后降序的数组排序<br>求递增数组中相加等于  10  的元素对<br>17^400 - 19100  计算结果能不能被  10  整除<br>一个  url  对应一个  random  值，要求设计一个系统，根据  url  查询  random  值，<br>具体到表怎么设计，索引怎么加，代码怎么写<br>讲项目，画架构图，为什么这么设计，哪一块是你做的，为什么这么做，做了多<br>久<br>后面的记不住了… <br>三面<br>自我介绍<br>镜像二叉树（递归和非递归）<br>删除二叉搜索树的某一个节点<br>给定数组，求第  k  大的数字<br>单例模式的几种写法，解释为什么<br>tcp  握手挥手过程，以及  socket  的状态变化<br>线程的状态，以及变化的时机<br>Java  内存模型，堆的组成，gc  过程<br>synchronized  修饰同一个类的两个静态方<strong>*同步吗，为什么<br>线程池设置了  coreSize  和  maxSize  之后，如果线程数量已经达到了  coreSize，这<br>个时候进来一个任务，会怎么处理<br>SQL  查询优化怎么做<br>你的优点是什么，缺点是什么<br>最快什么时间入职，薪资要求<br>你有什么要问我的吗</strong>小米  java  岗位秋招面经**<br>链接：<br><a href="https://www.nowcoder.com/discuss/341905?type=2%E2%84%B4=0&pos=9&page=1">https://www.nowcoder.com/discuss/341905?type=2ℴ=0&amp;pos=9&amp;page=1</a><br>来源：牛客网<br>小米: <br>一面：<br>1、String,Stringbuffer,StringBuilder  的区别，为什么被  final  修饰就不能被继承。<br>2、讲一下  volitale  关键字，说一下为什么不保证原子性。<br>3、抽象类和接口的区别。<br>4、用没有用过多线程？讲一下多线程的实现方式，call  和  run  的区别。<br>5、讲一下线程池的执行步骤，以及参数设置。<br>6、将数组里面非  0  的元素移到前面，0  元素移到后面（不改变相对位置）。<br>二面：<br>1、 用两个栈实现一个队列。<br>2、 对你之前写的代码进行一些修改，写成泛型。<br>3、 对  1  中的方法进行线程安全的改造。<br>4、 Synchronized  用法，锁。<br>5、 数据结构，树的遍历，排序算法复杂度分析。<br>6、 TCP，UDP，Http,Http  请求头，Https。 <br>7、 项目细节，思考。<strong>小米  Java  开发岗面试经常会问什么？</strong><br>自我介绍<br>聊项目<br>SpringBoot  的优缺点<br>mybatis  支持的数据类型<br>序列化的优缺点<br>StringBuffer  和  StringBuilder  区别。<br>熟悉的集合框架<br>有序的集合有<br>ArrayList  和  LinkedList  的区别。<br>static  加载机制<br>oracle  和  mysql  的分页查询<br>手写单例模式，线程安全<br>手写两个  Arraylist  合并，O(n)<br>有两个文件，每个都有  500w  个单词，找出他们共同的单词。<br>kafka  为什么能高效的持久化到本地，并从本地高效的读取数据。<br>为什么要用  impala<br>常用的  linux  命令：ps、netstate、pwd、$<br>查看某个特定的进程打开的文件数：lsof -p pid | wc -l<strong>小米  Java  开发  2017  面经 暑期实习+秋招  ,附备战总结</strong><br>秋招结束，总结了一下从寒假回来开始的实习生招聘和秋招面经，过来回馈一下<br>牛客网。<br>上学期寒假回来就开始投简历，找人内推的小米，过几天后约时间面试，部门未<br>知。<br>1、一面  1  小时  7  分钟<br>上来先自我介绍，然后开始问项目<br>说说你最近做的一个项目吧，用到了哪些技术<br>然后我就说了当时做的一个网站，我做了哪些模块<br>你们这个网站部署了吗，网址给我，打开以后又问了哪些模块是你做的？<br>我就又大概讲了一些<br>你们这个架构用的是  strust2，你能讲一下你对这个框架的理解吗？<br>这个我不的很懂，我大概说了一点，然后说我对  Spring  了解一些<br>那你说一下你对  Spring  的认识吧。<br>然后我说了源码里  IOC  容器的初始化的整个过程<br>那你觉得  IOC  最大的好处是什么呢？<br>我说是代码解耦合，然后说了下控制反转和依赖注入之类的<br>这块应该就这么多<br>接下来是数据库<br>你对  sql  了解怎么样？<br>我说我本科不是计算机的，没有学过数据库这门课，但是写一些简单的  sql  应该<br>也是可以的。那你本科是什么专业的?<br>我说是自动化的，然后他也没说什么<br>网络<br>然后他问那你对网络了解怎么样？<br>我说还可以吧<br>那你说说吧，你了解的网络协议相关的知识，TCP、IP  的<br>然后我就说了  TCP  和  UDP  的区别，TCP  的报文结构，三次握手过程流量控制和<br>拥塞控制<br>然后他问了你知道  CLOSE_WAIT  这个状态吗<br>我说这个状态应该是四次挥手过程中的吧，他说你确定？ 我说应该就是四次挥<br>手过程中的状态的。他说那你说一下四次挥手吧，我又说了四次挥手的过程<br>你知道长连接与短连接吗？<br>当时这块我有点蒙了一时没想起来，我就问你指的是  HTTP  中的长连接吗？<br>都可以，那你就说说  HTTP  中的长连接吧<br>我就说了  keep-alive  相关的扯了会<br>然后应该就是看我的简历开始问了<br>我看你简历上写了了解  JDK  容器类库的实现，那你说说常用的吧，这里他停顿<br>想了一会然后说讲讲  HashMap  吧<br>然后我就开始讲  HashMap  怎么怎么实现的。中间的一些细节说的不明白他会直<br>接指出来问<br>说到红黑树的时候他问你有没有用过红黑树或者看过  Java  里的红黑树是怎么实<br>现的吗？<br>我说没有<br>然后又问说哈希碰撞以后链表转为红黑树是一直就有的吗？<br>我说以前貌似没有，是  Java8  以后加进去的。<br>然后又问我  HashMap  是线程安全的吗？我说不是，HashTable  是线程安全的，但是  HashMap  不是，如果要线程安全要<br>用  ConcurrentHashMap，ConcurrentHashMap  的源码我也简单了解过<br>那你说一下  ConcurrentHashMap  是怎么实现的吧<br>我又大致讲了一下，期间表达不清楚的地方他也详细的问了<br>最后又问，那  ConcurrentHashMap  就一定是线程安全的吗<br>我说是啊，除了获取  size  属性的时候是估计值而不是准确值，但是操作就是线<br>程安全的。<br>那你在平时写过多线程的程序吗，写过什么<br>我说自己写过一点，像  wait、notify  之类的。<br>那也就是说只是自己学习过，而没有实际用过呗<br>我说是，实际使用就在上面说的网站的排行榜上更新的时候用到了锁。然后说了<br>一下具体的实现<br>他貌似没什么兴趣，估计是觉得我实际经验太少了也没有继续问下去。<br>然后应该又看了看简历，又来一波<br>你简历上写你熟悉常见的设计模式，那你都了解哪些模式呢，实际用过什么？<br>我说我用的比较多的就是工厂模式和单例模式，在网站的缓存那块自己实现过<br>那你说说单例模式，单例模式有很多种写法吧，你用的是哪种<br>我说单例模式确实有很多种写法，我知道的就有  5  种，我用的是  Enum  方式是实<br>现的，因为我看  EFFECTIVE JAVA  这本书上是推荐这种方法的<br>那你说说其他的几种写法都怎么写？<br>我就说了懒汉式，饿汉式和他们各自的改进，<br>然后说到双重检测保证线程安全的时候，他又问你确定双重检测就能保证线程安<br>全吗？<br>我说对啊。<br>他说不对，这个也无法完全保证，在实际使用中，会有可能获取正在创建的实例<br>还是怎么来的我没有太明白。然后就是问算法，一共问了三道题<br>最大堆怎么实现<br>我讲了怎么筛选法建堆，不知道是不是我没表述清楚这里他问的特别细。说了很<br>长时间<br>然后问我时间复杂度是多少？我说应该是  nlogn  吧<br>他说不对，实际上应该是  O(n)。通过数学证明是可以证出来的。后来又补充说<br>你按照算法的思路分析出  nlogn  是没错的，但是如果通过数学证明，应该是  O(n)<br>的。<br>然后我恍然大悟的样子说好像以前在算法课上是学过这个证明，但是具体的忘记<br>了。他也没说什么，就像上面告诉我单例模式那块一样，就像讨论问题一样告诉<br>我了，感觉面试官还是很好的。<br>在一个数组中，统计出现频率最高的元素<br>这题也是答的最失败的地方，可能是有点大意了，因为编程之美上有类似的题，<br>leetcode  上也有原题，但是有一个前提条件是频率最高的元素超过一半。<br>我忘记了他有没有加这个条件，我说了摩尔投票法找出频率最高的，然后再判断<br>这个频率是不是超过数组一半了。然后他举出反例说你这样有问题啊，比如我给<br>你个数组  1,2,1,2,1,2,3,3.那么你返回的数字就是  3  了，明显不对啊。<br>这时候我有点懵逼了，但是其实是他偷换了概念，因为他出的题就是返回超过一<br>半的元素，所以如果是他给的这个数组，那么就是不存在超过一半的元素，返回<br>null  就可以了。但是我完全懵逼，和他争论了一会以后就放弃了。<br>最后一道题是把字符串转换成  int  型。<br>我说了自己是思路，感觉这题主要考察的就是边界条件。<br>后来又延伸了一下说如果转换成  16  进制的呢?我想了一下说那就把乘  10  改成乘<br>16，他说对这样没问题。<br>然后就完事了。<br>2、总结<br>面试官很和蔼，大部分情况下都是自己知道什么就讲什么，遇到细节会提问，所以在回答的时候引导话题很重要，自己知道什么就一定要往那上面引导，不知道<br>什么也要往知道的上面引导，面试官一般不会纠结一个知识点，而是看你对了解<br>的知识点到底掌握到什么程度<br>在具体的知识点上被提出了几点问题：<br>·  单例模式的双重检测其实也并不能保证线程安全<br>· ConcurrentHashMap  的线程安全性是有局限性的<br>·  建堆有两种方法，自顶像下建堆也就是像堆排序那样的时间复杂度是  nlogn，<br>而如果采用筛选法建堆，那么时间复杂度应该是  O(n)，而不是  nlogn<br>·  最后我问面试官表现如何在哪些方面还需要提高呢？他的原话是：基础知识很<br>好，注重细节，加强实战经验<br>这次面试虽然范围很广且时间很长，但仔细回想一下其实也并没有很难，问的问<br>题确实都是必须要掌握的。<br>关于那个算法题，我后来还是发短信给面试官解释说我当时的算法并没有错，快<br>10  点的时候回复我和我讨论了一会最后应该是被我说服了或者不耐烦了，说没<br>问题让我再想想有没有更好的方法。我说不好意思因为一道题打扰这么久。它说<br>没事，做技术就需要你这种精神。<br>之后就没有任何通知了。<br>以上是实习生招聘。在北京实习的时候又找人内推了小米，打电话约到现场面试，<br>MIUI  部门<br>一面<br>自我介绍<br>Java  中的集合类有哪些了解呢？<br>垃圾回收机制<br>项目中用到过哪些缓存？<br>数据库联合表<br>linux  了解怎么样。各个用户之间的权限了解吗<br>手写代码：求两个链表相交。<br>提示；链表可能有环。需要考虑几种情况。二面<br>类加载机制<br>新建线程的方式，有什么区别<br>Thread  的  run  方法和  start  方法的区别是什么<br>怎么关闭线程<br>对线程安全是怎样理解的<br>项目中提到反射技术，反射在哪些情况是获取不到参数的呢？<br>写  sql，获取一列中最大的数。<br>数据库建立索引的原则有哪些？<br>先写个简单的代码：不用额外空间交换  AB  的值<br>手写代码：顺时针打印矩阵<br>三面<br>写个代码，括号匹配。<br>写好之后，改一下，如果能匹配的不止大括号小括号，还有自己定义的符号呢<br>写好之后，再改一下，如果括号之间有优先级呢<br>写好之后，再改一下，如果加一个限制，相同的括号不能超过指定数目呢？<br>再写的代码，m*n  的矩阵，从左上角到右下角一共有多少种走法，每次只能向右<br>或者向下走<br>再来个问题，MIUI  每次用户升级都会有一个打点信息，包括：用户  id，原来的<br>版本，升级到的版本，升级的时间等等。要求是，我需要频繁统计出:1.某个用户<br>所有的升级记录。2.指定一段时间内从某个版本升级到某个版本最多的。3.  某个<br>版本的所有用户<br>针对这个情况，给出合理的存储和解决方案。<br>总结<br>前两面都是女面试官，三面是男的，这样的配置还是第一次遇见<br>每次面试都  50  分钟左右<br>三面都要手写代码，一面基础知识多一些，二面更加深入，三面感觉是看代码风<br>格，扩展性和系统设计经验。<br>中午没睡觉连续面了三面，感觉有点累，回去就发烧了。小米，为发烧而生。<br>过了大概两周通知面试通过，不用再参加校招了。<strong>小米  2019  秋招面经</strong><br>小米的面试官喜欢突击，晚上八点多收到小米电话，问什么时候有时间面试，我<br>说都可以，然后说现在？我：？？？，还是改到其他时间了。二面也是突击，刚<br>想跟小伙伴吃鸡，就打电话直接面试。<br>一面<br>解释  goroutine，channel<br>c++  和  go  对比<br>java  和  go  对比<br>几种基本排序算法说一下，问了堆的时间复杂度，稳定性，为什么不稳定<br>topk  问题，海量数据  topk（回答成切分多次加载内存，然后用维持  k  长度的有<br>序链表，然后被说时间复杂度不好，提示说还是用堆，然后哦哦哦对）<br>最长连续字串和，这里我说的解决方案没用  dp（对  dp  不熟），面试官一直引导<br>我  dp，还是不会<br>什么是主键<br>联合索引和唯一索引<br>越多的索引越好吗？<br>建立索引要注意什么？<br>进程和线程区别？<br>死锁？<br>tcp  三次握手<br>http，https<br>状态码  401,301,302,201<br>项目我说只有一台机子，所以用的单机部署，面试官说单机也可以部署多个，有<br>什么方法吗？我说  docker，问  docker  有哪些网络，不熟，dockerfile  关键字，<br>只答几个。顺便扯了下  nginx  转发。<br>二面<br>数据库隔离级别，提交读会造成什么<br>go  调度<br>goroutine  泄漏有没有处理，设置  timeout，select  加定时器<br>项目<strong>小米面经  Java  开发</strong><br>链接：<br><a href="https://www.nowcoder.com/discuss/304436?type=2%E2%84%B4=0&pos=11&page=">https://www.nowcoder.com/discuss/304436?type=2ℴ=0&amp;pos=11&amp;page=</a><br>1<br>来源：牛客网<br>09.02  小米面试  35min <br>1.  自我介绍 2. final  关键字 3. static  关键字<br>4.  实习项目中的并发操作（这里答错了，把并发操作答成了异步操作，跟面试<br>官的问题有点差别）<br>5.  对线程池的了解<br>6.  为什么会产生死锁 7. java  并发  wait  和  sleep  的区别<br>8.  设计模式，观察者模式<br>9.  写反转链表<br>问题  15min ，代码大概十几分钟，最后问我有什么问题<br>10.11  小米 二面  33min<br>隔了一个多月，以为凉了呢<br>竟然又通知了二面<br>1.  自我介绍<br>2.  排序算法了解么，写一下快排<br>3.  还有什么排序算法，插入排序如何改进为  nlogn  的时间复杂度，什么排序算<br>法效率最高呢<br>4.  什么情况下要用什么排序算法？ 5. java  接口和抽象类<br>6.  为什么  java  要有抽象类和接口这两种？7. GC  讲一讲<br>8.  可达性分析中  gc root  都包括哪些？<br>没有了？？？<br>话说小米的面试可能是秋招面的很烂，也很简单的了。<br>一面准备很充分，毕竟九月正是集中面试的时候自己复习的也很充分；二面的时<br>候已经半个月没复习过了，一度以为秋招已经结束呢<br>小米的面试安排也是很神奇。。。二面面试官说可能是因为你一面表现不太好？可<br>是一面结束的时候面试官说表现的很好呀，让我耐心等二面<br>隔天下午  oc，hr  也是很硬气，上来就问有什么  offer  给多少钱。没给我议价的<br>机会（好吧，菜鸡不配  argue）<strong>小米软件开发工程师（Java  方向）面经</strong><br>链接：<br><a href="https://www.nowcoder.com/discuss/252340?type=2%E2%84%B4=0&pos=19&page=">https://www.nowcoder.com/discuss/252340?type=2ℴ=0&amp;pos=19&amp;page=</a><br>1<br>来源：牛客网<br>一面（9  月  5  日）<br>为什么研究生做  CV，现在找研发岗位；<br>描述进程控制块  PCB，进程控制块中进程的哪些信息；<br>http  与  https  的区别，https  为什么能保证安全，客户端与服务端通过  https  进行<br>交互的过程；<br>SQL  中的几个基本命令，使用哪个命令可以在数据存在时进行更新数据，数据不<br>存在的话则插入数据；<br>两个链表，找链表是否有交点，怎么找到交点；我说了自己思路后，面试官说让<br>我使用栈来做一下（两个链表分别压入两个栈，如果栈顶元素相同的话说明有交<br>点，然后同时  pop，直到  pop  到两个栈的栈顶元素不相同的，说明刚才  pop  出<br>来的结点是两个链表的交点）；<br>讲一下自己对  Java  的理解，Java  最大的特点，和其他语言相比有哪些鲜明的优<br>势；<br>简单介绍一下单例模式、工厂模式、装饰着模式；<br>Java  中注解是干嘛用的，这个我没回答好，面试官应该是想让我讲一下对  Java<br>注解的理解；<br>输入一个  URL，URL  中有个要调用的方法的字符串，那从输入  URL  到服务端调<br>用相应的方法，都经过了哪些过程，用到了什么技术；<br>面试官问我个人对哪些技术了解的比较深入，有什么优势，对于哪些内容有比较<br>独特深入的理解；<br>我做一个项目的时候，会怎么着手去做，会去如何完成好一个项目；<br>写代码：（1）从一个数组中找连续子数组的最大和；（2）两个字符串的最长公<br>共子串的长度；这两个都是动态规划里面的基础题目，从了  leetcode  上可以找<br>到对应的题目；<br>描述  Dijkstra  算法；问我有什么问题；<br>二面（9  月  9  日）<br>开始就先聊聊项目，项目多是  CV  相关的，简单聊了聊；<br>然后  ConcurrentHashMap  的实现原理；<br>AtomicInteger  的实现原理，自己简单实现一下  AtomicInteger  中的  increase()方<br>法，写代码；<br>写代码实现一个装饰者模式；<br>两个一组翻转链表，写代码实现；<br>写代码，算法题：给定一个非负数组，A、B  俩人轮流从数组头部或尾部取元素，<br>AB  俩人都会以对自己最有利的方式取元素，直到数组元素取完，取到元素和最<br>大的玩家赢，求先手能否赢得游戏。<br>二面的内容基本就是这些，算是写了  4  个代码题，基础知识方面基本没问。面试<br>官看着帅气而且友善（都说小米面试官帅，还真是），让我见一见下一轮面试官<br>吧，哈哈。*<em>小米软开  java  一面\</em>*<br>链接：<br><a href="https://www.nowcoder.com/discuss/236594?type=2%E2%84%B4=0&pos=16&page=">https://www.nowcoder.com/discuss/236594?type=2ℴ=0&amp;pos=16&amp;page=</a><br>1<br>来源：牛客网<br>很年轻的面试官。<br>先说项目：我先  blabla  说了一下，面试官说：要不你说一下和软开无关的项目<br>吧，你转行的不可能和  cs  的死磕项目吧，说一下和这个无关但是能反应你能力<br>的项目吧。我：呃。。。面试官：好那我们就跳过这部分直接刷题吧。<br>第一题求两个字符串最长公共子序列长度，硬做全  ac  没啥问题。<br>第二题求一个数组中和为  sum  的组合个数，我一开始用的  dfs，过了  50%<br>面试官：行，没事，我们再来一道。<br>我：我想换  dp  做优化一下。<br>面试官笑着说：我就是想给你找一道必须用  dp  的题。<br>然后第三题求一个数组里和最大的子序列。<br>做完之后，稍微问了点基础，也没细问，就问我各部分了解程度如何，我说我操<br>作系统和计算机系统结构这块了解比较弱。<br>最后笑着给我总结：行，刷题没问题，项目太弱了，要回国的话赶紧回来实习吧。<br>我：毕业前实习不太现实。。。<br>面试官：我这边让你过了，下一轮自求多福吧。<br>我：好的好的，谢谢谢谢。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>小米</title>
      <link href="/2021/03/06/dgk2gr/"/>
      <url>/2021/03/06/dgk2gr/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>美团点评 2020 面经汇总-Java 工程师</title>
      <link href="/2021/03/06/veld20/"/>
      <url>/2021/03/06/veld20/</url>
      
        <content type="html"><![CDATA[<p><strong>美团点评 2020 面经汇总-Java 工程师</strong><br><strong>目录</strong><br>美团 JAVA 一面………………………………………………………………………………………………………………………….1<br>新鲜校招美团面经（一面凉）………………………………………………………………………………………………..2<br>菜逼的坎坷之路（JAVA 后台研发）………………………………………………………………………………………3<br>美团-金融…………………………………………………………………………………………………………………………..3<br>美团-数据平台…………………………………………………………………………………………………………………..4<br>美团-到家…………………………………………………………………………………………………………………………..5<br>美团-餐饮…………………………………………………………………………………………………………………………..6<br>美团后台面经…………………………………………………………………………………………………………………………….7<br>美团点评二面、三面、hr 面社招 java 面经…………………………………………………………………………8<br>【美团】后台开发一面面经（凉凉）…………………………………………………………………………………11<br><strong>美团 JAVA 一面</strong><br>作者：蓝风铃<br>链接：<a href="https://www.nowcoder.com/discuss/362152?type=2%E2%84%B4=3&pos=2&page=1">https://www.nowcoder.com/discuss/362152?type=2ℴ=3&amp;pos=2&amp;page=1</a><br>来源：牛客网</p><ol><li>介绍项目（瞎说我用了分布式锁）</li><li>分布式锁的实现</li><li>分布式锁过期解决</li><li>前缀树是什么 前缀树的使用场景</li><li>分布式数据库主从复制（我说我不会分布式的，我会主从复制，然后面试官叫我讲讲）</li><li>MySQL 死锁发生的原因和解决</li><li>MySQL 分别建立索引 a,b,c ，语句 select …where b=x,c=x,a=x 能不能用到索引，建立<br>联合索引能不能用到，a=x,b&gt;x，能不能用到，用到几个索引</li><li>B 树和 b+ 树的区别 b+ 树的优点</li><li>Linux cpu 满了怎么排查（进程相关的我是真的不会啊，平时没接触，看几天博客也不<br>明白）</li><li>怎么查看占 cpu 最多的线程</li><li>Linux 怎么搜索文件中的字符串，写到另一个文件中</li><li>liunx 网络相关命令（具体啥问题我忘了，反正我不会）</li><li>如何判断链表是否有环</li><li>Java = 和 equals 的区别 15. Java contentMap 和 HashMap 什么区别，线程安全怎么实现</li><li>HashMap 怎么解决哈希冲突，哈希冲突还有什么解决方法</li><li>Java 运行时异常和检查性异常</li><li>Java 类加载</li><li>什么是泛型 泛型的使用场景</li><li>面向过程和面向对象（一紧张差点三大特性的多态想了十秒才说出来）</li><li>多态是什么 父类如何调用子类的方法</li><li>问我看了啥书（设计模式，图解 HTTP，Modern PHP…被打断然后开始问设计模式）</li><li>单例模式的用途 静态内部类实现单例模式的方式</li><li>工厂模式的用途</li><li>策略模式的用途</li><li>Get 和 post 请求的区别</li><li>网页请求的整个过程</li><li>说说自己的优缺点，对缺点的改进（缺点太明显了，表达能力不行，面试官问我个啥东<br>西我心里知道啥意思但不知道怎么给他解释）<br><strong>新鲜校招美团面经（一面凉）</strong><br>作者：我也来求 offer<br>链接：<a href="https://www.nowcoder.com/discuss/361998?type=2%E2%84%B4=3&pos=3&page=1">https://www.nowcoder.com/discuss/361998?type=2ℴ=3&amp;pos=3&amp;page=1</a><br>来源：牛客网<br>1 月 13 日 14:00 美团面经（一面凉）<br>内推的简历，半天之后约的面试<br>60min 1.上来先写代码，两个线程交替输出 1-100<br>2.JAVA 锁机制（synchronize，ReentrantLock 等） 3.乐观悲观锁<br>4.sql 语句慢查询如何调优（这个贯穿了下面二十分钟，我数据库弱点，凉在此） 5.主键索引和普通索引区别 6.项目用的什么数据库，什么引擎，底层是什么（很底） 7.说一下 B+树和 B 树<br>8.B+树索引都能查到叶子节点么（联系第五题）<br>9.mvcc 多版本并发控制（不造） 10.隔离级别了解么，说一下<br>11.JVM 调过么，用的什么垃圾回收器（G1） 12.讲一下新生代老年代（这里给我挖了个坑，等我说完，告我 G1 不分新生代老年代，我还<br>没学到啊可惜）<br>13.TCP,UDP 区别 14.输入 URL 会发生什么<br>15.Linux 常用操作 16.线程进程区别 17.用过什么中间件或者消息队列么（了解过，但没用过，也没接着问了） 18.还有继续考研的想法么 19.有什么问题想问我<br>总的来说还是挺不错的一次面试经历，回答上来百分之八十吧，不会的主要集中在了数据库<br>那里，问的还深，<br>问到了底层调的一些 C++本地方法了，还有就是太诚实了，把自己就学了 20 天 JAVA 的事<br>实告诉了面试官，所以最后<br>HR 给的答复是，实践少了一点，么得下一面了。<br><strong>菜逼的坎坷之路（JAVA 后台研发）</strong><br>作者：YY 的晕<br>链接：<a href="https://www.nowcoder.com/discuss/352030?type=2%E2%84%B4=3&pos=4&page=2">https://www.nowcoder.com/discuss/352030?type=2ℴ=3&amp;pos=4&amp;page=2</a><br>来源：牛客网<br><strong>美团-金融</strong><br><strong>一面</strong><br>JVM<br>JVM 的结构<br>新生代和老年代的垃圾回收算法<br>虚拟机栈和本地方法栈的区别<br>类信息会加载到 JVM 哪个区域<br>JAVA 基础<br>HashMap 和 ConcurrentHashMap 的区别<br>final 的作用，加在变量、方法、类的区别<br>新建一个 string 会创建几个对象<br>哪些类是线程安全的<br>线程池的参数;为什么需要超出最大容量的策略<br>ThreadLocal 了解吗<br>Spring<br>AOP 的实现原理<br>@Autowired 和@Resource 的区别<br>什么情况下会用@ResourceMySQL<br>B+树的优势<br>悲观锁和乐观锁了解吗<br>数据库如何实现乐观锁<br>设计模式<br>工厂模式怎么理解<br>单例模式有哪几种实现方式<br>懒汉和饿汉的区别，懒汉的缺点<br>算法<br>反转链表<br><strong>二面</strong><br>JAVA 基础<br>HashMap 和 ConcurrentHashMap 的区别<br>hash 冲撞怎么办？如何 rehash<br>HashMap 的遍历方式<br>为什么 HashMap 是线程不安全的<br>volatile 和 synchronized 的区别<br>Spring<br>SpringBoot 的优势<br>SpringMVC 的 MVC 指什么？好处呢<br>Redis<br>主从结构了解吗<br>宕机之后如何恢复数据<br>消息队列<br>rabbitmq 和 kafka 的区别<br>rabbitmq 如何保证事务<br>消息队列的优势<br><strong>美团-数据平台</strong><br><strong>一面</strong><br>JAVA 基础<br>ConcurrentHashMap 的特点<br>JUC 包下其他并发类了解过吗<br>多个消费者生产者，如何处理同一段数据（消费者-生产者模型）操作系统<br>线程间通信的方式<br>JVM<br>阐述 JMM 内存模型<br>垃圾回收算法有哪些<br>标记-整理会触发 Stop The World 吗<br>什么情况下触发 mirror GC<br>JVM 结构<br>新建的字符串会存到哪<br>消息队列<br>设计时应该考虑什么问题<br>如何保证高可用<br>算法<br>n 个有序数组，找出 Top k<br><strong>美团-到家</strong><br><strong>一面</strong><br>JVM<br>JVM 存在的优势<br>通过什么方式来判断是否回收<br>哪些对象可以当 GC root<br>虚拟机栈的对象为什么能当 root<br>堆和栈区别<br>JAVA 基础<br>ArrayList 和 LinkedList 区别<br>HashMap 的底层数据结构<br>JDK 1.8 中 HashMap 有哪些变化<br>静态变量和非静态变量的区别<br>类和对象的区别<br>Synchronized 和 Lock 区别<br>Lock 底层实现<br>Exception 和 Error 的区别<br>线程池常用参数<br>在什么情况下使用这些参数（线程池工作流程）<br>设计模式<br>手撕单例模式的双重检验锁为什么要有两次检验<br>Redis<br>Redis 为什么快<br>Redis 如何保证可用<br>MySQL<br>B 树索引和 hash 索引区别<br>聚簇索引和非聚簇索引<br>计算机网络<br>HTTPS 建立连接流程<br>算法<br>LeetCode11 water<br>给定一个数，通过调换顺序，找到比这个数大的最小数<br><strong>美团-餐饮</strong><br><strong>一面</strong><br>Spring<br>循环依赖，可以初始化成功吗<br>其他问题比较简单没印象了<br><strong>二面</strong><br>JVM<br>CMS 和 G1<br>JAVA 基础<br>HashMap 和 HashTable 区别<br>ConcurrentHashMap 和 HashMap 有什么不同<br>阐述乐观锁，悲观锁<br>阐述 CAS<br>MySQL<br>B+和 B 树的区别<br>Innodb 和 Mysiam 索引区别<br>left join, right join 区别<br>联合索引和普通索引的区别<br>事务隔离等级<br>事务特性（ACID）慢查询如何排查<br>explain 中 index 和 ref 区别<br><strong>美团后台面经</strong><br>作者：lvsw<br>链接：<a href="https://www.nowcoder.com/discuss/343031?type=2%E2%84%B4=3&pos=5&page=1">https://www.nowcoder.com/discuss/343031?type=2ℴ=3&amp;pos=5&amp;page=1</a><br>来源：牛客网<br><strong>一面</strong><br>1、自我介绍，介绍一下项目，缓存是什么，给个秒杀场景，如何防止超卖？<br>2、hashmap 底层数据结构，hastable,concurrenthashmap 如何实现线程安全的<br>3、用过线程池吗？线程池的参数，提交一个任务时的过程，核心线程会被回收吗？拒绝策<br>略<br>4、看过什么源码？讲一下 spring，aop 和 ioc，会什么设计模式？单例，写一个<br>5、写了个 dcl,为什么进行两次判空，为什么用 volatile？ <br>6、jvm 内存模型，存放什么，什么线程私有，线程共享，如何判断一个对象需要被回收，<br>可以作为 GCRoot 的对象有哪些？<br>7、写个题吧，判断一个字符串的大括号中括号小括号的格式是否正确，比如字符串是一段<br>代码，最后写的不完美，面试官说还行，知道用栈。<br>8、工作地点是北京可以接受吗？<br>9、你了解美团吗？回答，知名互联网公司（裁团），中国 top5,面试官：不是，是 top3；<br>10、你还有什么想问的吗？<br><strong>二面</strong><br>问项目，抠细节，被问到哑口无言，表现极差<br>生产者消费者模式<br>讲一下 NIO、AIO,这个被问得很难受，抠的太细，具体不记得了，了解的不深<br>最后还是问了意向，搞不懂<strong>三面</strong><br>上午二面，下午收到的三面通知，下午六点面试<br>1、问研究方向，本人做天线的，面试官好像很感兴趣，一直问，问了接近 20 分钟，聊得<br>2、问项目，问的不深，不问技术，给各种场景题，我严重怀疑面试官不是可能是产品经理；<br>3、你有什么想问吗？我：（感觉过的可能性很小，就随便问了）这是 hr 面吗？我有下一面<br>吗？面试官：额，是技术面，我只是不深问<br><strong>美团点评二面、三面、hr 面社招 java 面经</strong><br>作者：leetcode_java<br>链接：<a href="https://www.nowcoder.com/discuss/342094?type=2%E2%84%B4=3&pos=6&page=1">https://www.nowcoder.com/discuss/342094?type=2ℴ=3&amp;pos=6&amp;page=1</a><br>来源：牛客网<br><strong>美团点评社招 java 一面面经</strong><br>1、做一下自我介绍吧，简单说一下你的项目？<br>2、有遇到过内存泄漏吗？你们是怎么解决的？这个前阵子确实遇到过一次，还算运气比较<br>好。<br>3、java 的基本类型有哪几个？String 是不是 java 的基本类型？String 为什么要是 final 类型<br>的？<br>4、反射机制的底层实现是什么？动态<strong><em>呢？动态</em></strong>的实现原理？<br>5、hashmap 了解吗？说一下 hashmap 相关的一些东西？hashmap 是线程安全的吗？为什<br>么是线程安全的？concureenthashmap 了解吗？他是如何实现线程安全的？你刚才说 1.8 基  <br>于 cas？cas 的 ABA 问题怎么解决？<br>6、说一下 JVM 的线程模型？这些区域都分别是干啥用的？java 线程模型和 jvm 线程模型注<br>意区分、总结下，网上很多文章都是错的。<br>7、说一下 java 类加载器的工作机制？类加载在那个区域进行的？<br>8、说一下 java 的线程模型？violate 了解吗？他的原理是什么？violate 是线程安全的吗？为<br>什么不是？<br>9、保证线程安全的解决方法有哪些？说一说读写锁吧，读写锁的读<br>10、数据库的索引有哪几种？为什么要用 B+树来做索引？组合索引和几个单个的索引有什<br>么区别？数据库的大表查询优化了解吗？MVCC 机制了解不？MVCC 机制有什么问题？怎<br>么去解决这个问题？mysql 慢语句调优做过吗？说说你是怎么做的？<br>11、redis 了解吗？你说说怎么用 redis 实现分布式锁？<br>12、spring 中 Bean 的作用域，springMVC 的 controller 是线程安全的吗？怎么去保证线程<br>安全呢？13、消息队列有用过吗？说说你怎么用的？你这么用感觉不大对吧。。大写的尴尬。。<br>14、计算机网络了解吗？说一说 TCP 三次握手和四次挥手吧，感觉这个真的是计算机网络<br>必考知识点啊，每次问到计算机网络都会问这个。time_wait 状态产生的原因是什么？，有<br>什么危害？可以如何避免？<br>15、leetcode153. 寻找旋转排序数组中的最小值<br>假设按照升序排序的数组在预先未知的某个点上进行了旋转。<br>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。<br>请找出其中最小的元素。<br>你可以假设数组中不存在重复元素。<br>示例 1:<br>输入: [3,4,5,1,2]<br>输出: 1<br>示例 2:<br>输入: [4,5,6,7,0,1,2]<br>输出: 0<br>你手里有哪些 offer 了？最快什么时候能入职呢？还有什么问题想问的？然后说会有 hr 联<br>系你，第二天就接到了 hr 约二面时间的通知。<br>总结下来，面试问的东西还是挺宽的，而且问的很细，一个知识点基本都是问到答不上来为<br>止。还是有很多东西需要加强？在美团的面试中还是学到了一些东西。<br><strong>美团点评二面</strong> 1.首先还是问项目。问的比较细，比较全。<br>String，StringBuffer，StringBuilder 的区别，为什么 String 是不可变的，StringBuffer 和<br>StringBuilder 哪个是线程安全的，他们分别适用于什么场景。<br>java 类加载过程是怎么样的，说一下 volatile。<br>并发包了解吗？假如几个线程之间相互等待，可以用哪个并发类来实现，他的原理是什么？<br>数据库慢查询优化了解哪些？说了很多，面试官说假如这些都已经做好了还是很慢怎么办？<br>最后不清楚问了下面试官，面试官主要想了解数据库分区的知识。<br>说一下 spring 容器的启动过程？<br>讲一下分布式锁，基于 zookeeper 实现和 redis 实现在性能上有什么差异？<br>kafka 如何保证不丢消息又不会重复消费。了解大数据相关的一些技术吗？<br>最后写了道题，leetcode55. 跳跃游戏<br>给定一个非负整数数组，你最初位于数组的第一个位置。数组中的每个元素代表你在该位置可以跳跃的最大长度。<br>判断你是否能够到达最后一个位置。<br>示例 1:<br>输入: [2,3,1,1,4]<br>输出: true<br>解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一<br>个位置。<br>示例 2:<br>输入: [3,2,1,0,4]<br>输出: false<br>解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永<br>远不可能到达最后一个位置。<br>最快什么时候能过来？有什么问题想问的？然后说后面有 hr 再和你联系。<br><strong>美团点评三面</strong><br>面试官首先问了很多简历中的一些基本信息.画一下你这个项目与哪些工程交互，它在你们<br>的产品中处于什么样一个位置<br>画一下你们这个项目的架构图，挑一个你觉得比较难的业务场景来讲一下，<br>你们这个项目中都遇到了哪些问题呢？说说你们最后都怎么解决的<br>写了一段代码，问这个代码最后输出什么？申请多大的内存空间，都在什么位置申请的<br>public class Test {<br>public static void main(String[] args) {<br>String str = “hello”;<br>test(str);<br>System.out.println(str);<br>}<br>public static void test(String str){<br>str = str + “world”;<br>System.out.println(str);<br>int[] a = new int[1024];<br>}<br>}<br>hashmap 了解吗？他的 set 和 get 的时间复杂度是多少？为什么是 O(1),说下详细过程，hashmap 是线程安全的吗？<br>Jvm 了解吗？jvm 中哪些可以作为垃圾回收的 gcroot?为什么呢？<br>什么时候能过来上班？然后就说等会 hr 面。<br><strong>美团点评 hr 面</strong><br>问了下基本情况，什么时候能过来，为什么想换工作？在上家的绩效和薪水情况，期望工资<br>是多少。<br><strong>【美团】后台开发一面面经（凉凉）</strong><br>作者：丞之不可以喝<br>链接：<a href="https://www.nowcoder.com/discuss/335487?type=2%E2%84%B4=3&pos=8&page=1">https://www.nowcoder.com/discuss/335487?type=2ℴ=3&amp;pos=8&amp;page=1</a><br>来源：牛客网<br>面试大概七十分钟，问的东西很全面，需要做充足准备，就是除了概念以外问的有点懵逼了。<br><strong>网络相关</strong></li><li>OSI 七层模型都是什么</li><li>举例网络协议，都在哪个层</li><li>TCP UDP 区别</li><li>TCP 如何实现可靠连接</li><li>Time_Wait 中 2*msl 为什么</li><li>如果 TCP 突然接收方故障 会发生什么</li><li>HTTP 状态码 含义，503 504,200</li><li>GET POST 区别</li><li>一个 url 从输入到访问经过了哪些过程<br><strong>数据库相关</strong></li><li>MySQL 有哪些锁？</li><li>解释一下 ACID 都是什么</li><li>Innodb 中索引的实现</li><li>B+树</li><li>AUTO_INCREMENT 原理（考察并发情况）</li><li>索引有哪些缺点？<br><strong>操作系统、Linux 相关</strong></li><li>死锁产生的原因</li><li>进程、线程区别，什么时候用线程</li><li>如何实现一个线程池，Java 中线程池如何进行配置</li><li>linux 中有哪些常见的指令，进行介绍</li><li>select、poll、epoll 有没有了解过，讲解一下 6. 线程切换，引申到 Java 阻塞 运行</li><li>页面置换算法有哪些 介绍一下<br><strong>Java 相关</strong></li><li>JVM 内存模型</li><li>GC 垃圾回收算法</li><li>讲解新生代 老年代</li><li>Java 这块问的其他问题有点忘了<br><strong>Redis</strong></li><li>Redis 是怎么实现的</li><li>Redis 常用数据结构及底层数据结构实现<br><strong>思维、算法（或者应该说是脑筋急转弯）</strong></li><li>给出一个 rand5()，实现一个分布均匀的 rand7()生成器</li><li>有一个点，向北走 5 公里、东走 10km、向南走 5 公里，回到原点。这样的点有几个，<br>证明。</li><li>有一个 n 克的物体、一个天平和若干砝码，这个天平没有刻度，试问最少用多少个什么<br>样的砝码可以将这个物体的质量称出。砝码的质量和个数自行指定。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>美团点评 2020 面经汇总-算法工程师</title>
      <link href="/2021/03/06/fpiwe9/"/>
      <url>/2021/03/06/fpiwe9/</url>
      
        <content type="html"><![CDATA[<p><strong>美团点评 2020 面经汇总-算法工程师</strong><br><strong>目录</strong><br>美团秋招面试…………………………………………………………………………………………………………………….1<br>【美团】2021 届 cv 算法实习面经…………………………………………………………………………………2 <br>8 月初美团北斗计划…………………………………………………………………………………………………………3<br>美团算法岗面经 ………………………………………………………………………………………………………………..3<br>美团点评北斗计划（机器学习岗） 宣讲会结束面试…………………………………………………4<br>美团（上海）…………………………………………………………………………………………………………………….5<br>美团机器学习岗完整面经………………………………………………………………………………………………..6<br>美团机器学习算法岗北京现场三面凉经……………………………………………………………………….7<br>美团机器学习/数据挖掘一二面面经………………………………………………………………………………8<br>美团 配送 算法岗 面经………………………………………………………………………………………………….9<br><strong>美团秋招面试</strong><br>作者：huasdahadi<br>链接：<a href="https://www.nowcoder.com/discuss/366802?type=2%E2%84%B4=3&pos=1&page=1">https://www.nowcoder.com/discuss/366802?type=2ℴ=3&amp;pos=1&amp;page=1</a><br>来源：牛客网<br><strong>美团一面</strong><br>自我介绍<br>说到 xgb，说说优点<br>梯度怎么用的，体现在哪里，怎么求<br>lr 的公式以及梯度求解<br>过拟合，l1,l2，分别有什么用，怎么做到的效果（特征选择和防过拟合）<br>场景题：一个 query，一些结果商品，怎么做点击率模型，怎么处理商家恶意点击<br>概率题：一个硬币，一直到一个人为正面停止，分别计算先手后手赢的概率，2/3，1/3<br>算法题 1：两个有序数组，求中位数<br>算法题 2: 翻转数组，找一个值<br>平面一些点，距离近的算一类，输出可以有几类（我用的 dfs，复杂度高了点）<br>希望复杂度降下来，怎么办，提出用树，这个树怎么用？参考 knn<br><strong>美团 二面</strong>自我介绍<br>介绍项目<br>项目亮点<br>为什么异常检测没有异常数据训练<br>随机森林怎么计算特征重要性<br>分词方案个数：给了分词，给一个句子，有多少种分法，dfs 2^n<br>说动态规划方案，简单写一下代码<br><strong>【美团】2021 届 cv 算法实习面经</strong><br>作者：猫弟<br>链接：<a href="https://www.nowcoder.com/discuss/368554?type=2%E2%84%B4=3&pos=1&page=1">https://www.nowcoder.com/discuss/368554?type=2ℴ=3&amp;pos=1&amp;page=1</a><br>来源：牛客网<br>一面（电话面试）：50min 1.对感受野的理解？例如 VGG 网络，最后一层卷积网络输出图片对于输入图片的感受野的<br>大小？<br>参考链接：<a href="https://blog.csdn.net/program_developer/article/details/80958716">https://blog.csdn.net/program_developer/article/details/80958716</a><br>ps：之前一直没有关注这个问题，以前理解的感受野都是针对上一层的，感受野就是卷积核<br>的尺寸。 2.神经网络中的偏置项（b）尺寸应该是什么样的？<br>参考链接：<a href="https://blog.csdn.net/machinerandy/article/details/79632748">https://blog.csdn.net/machinerandy/article/details/79632748</a><br>ps：了解 b 的作用，但是对它的 shape 已经不太记得怎么算的了，基础知识有待加强。 3.简述 Cascade R-CNN 的提出为了解决什么问题？<br>为了解决提高阈值容易造成的训练数 IOU 阈值分布变化的问题—-过拟合和 mismatch<br>4.Resnet 为什么有效果？<br>参考链接：<a href="https://cloud.tencent.com/developer/news/221146">https://cloud.tencent.com/developer/news/221146</a><br>5.1<em>1 卷积核的作用？<br>升降维度；增加非线性因素<br>6.MTCNN 使用的损失函数？<br>参考链接：<a href="https://blog.csdn.net/just_sort/article/details/80898251">https://blog.csdn.net/just_sort/article/details/80898251</a><br>ps：当时不记得 MTCNN 的损失函数了，不过基于对 loss 的认识，一般分类都用交叉熵损<br>失，回归用 L2 LOSS（距离一般也是，关键点同理）7.如何结果过拟合的问题？<br>数据增强，增大数据量 / 换更大更深的网络，更好的 backbone / dropout / L1 L2 正则化/ <br>early stop / BN<br>8.SEnet 的结构？SEnet 如何放到 Resnet 的 backbone 里？ 9.算法题<br>阶乘后 0 的个数 leetcode 172<br><a href="https://leetcode-cn.com/problems/factorial-trailing-zeroes/solution/xiang-xi-tong-su-de%02">https://leetcode-cn.com/problems/factorial-trailing-zeroes/solution/xiang-xi-tong-su-de</a><br>si-lu-fen-xi-by-windliang-3/<br>ps：刷题量不够，没有做过这个题，在面试官引导下也没有完全解答清楚，有点遗憾。<br><strong>8 月初美团北斗计划</strong><br>作者：快淹死了啊<br>链接：<a href="https://www.nowcoder.com/discuss/342038?type=2%E2%84%B4=3&pos=4&page=1">https://www.nowcoder.com/discuss/342038?type=2ℴ=3&amp;pos=4&amp;page=1</a><br>来源：牛客网<br>秋招的开始。第一次面试，贼紧张，去的火车上把西瓜书又看了一遍。。然而还是去学习的。<br>看似好像挺好，北斗都面过。。实则是去学习的<br>主要问题：<br>讲项目。介绍了两个简历上的项目，问了一些细节，大约二十分钟。还比较顺利。<br>项目里用到了 XGBoost，问了一些相关问题，损失函数、节点划分依据、并行怎么做的、和<br>GBDT、LightGBM 的区别和各自的优势等。。答得不好。。<br>LR 的损失函数写一下，极大似然和最大后验的区别？<br>深度学习了解吗？CNN 1</em>1 卷积核的作用？<br>最新的模型了解哪些？提了 BERT。BERT 里 Transformer 的多头 attention 是怎么做的？不知<br>道。。<br>编程题：数组的最大连续子数组和。<br>印象比较深的有这些。。其他忘记了。持续一个小时。之后整个秋招再也没收到来自美团的<br>任何消息。。。问题基本上都没答出来。。面试官人还是挺好的，临走还给说了点需要准备的<br>东西。。学习了。。<br><strong>美团算法岗面经</strong><br>作者：ddggf 链接：<a href="https://www.nowcoder.com/discuss/338662?type=2%E2%84%B4=3&pos=5&page=1">https://www.nowcoder.com/discuss/338662?type=2ℴ=3&amp;pos=5&amp;page=1</a><br>来源：牛客网<br>一面（技术面，时长 50+min)： <br>1、围绕项目在问，问了一个实习项目还有一个竞赛项目；<br>2、写代码：写 topk 排序，以及分析时间复杂度。<br>二面（技术面，时长 20+min） <br>1、围绕项目问，你觉得做的最好的项目是哪个，带来了哪些价值；<br>2、平时用的编程语言，我说了 c++和 Java； <br>3、问 c++和 Java 的区别，从内存管理上说。</p><hr><hr><p>重新换了一个部门<br>一面（技术面，时长 50+min）：<br>1、围绕项目在问；<br>2、场景题：在北京，有一个配***心，5000 个配送点分布在北京各处，应该采用什么算法求<br>解；<br>3、最喜欢的智能算法是哪个，为什么<br>4、手写代码：1、输入一个字符串，判断其是否是“（”和“）”的一 一配对。2、合并两个排<br>好序的链表。<br>二面（技术面，时长 20+min） <br>1、围绕项目问；<br>2、介绍他们那边的业务。<br>三面（HR 面，时长 10+min）<br>常见的 HR 问题</p><hr><hr><p>总结美团的面试套路是：<br>1、项目问的比较清楚，所有的东西都是由简历的内容进行拓展<br>2、一般都会有手写代码题，所以常见的一定得刷一刷<br><strong>美团点评北斗计划（机器学习岗） 宣讲会结束面试</strong><br>作者：牛客杨超越-<br>链接：<a href="https://www.nowcoder.com/discuss/319551?type=2%E2%84%B4=3&pos=9&page=1">https://www.nowcoder.com/discuss/319551?type=2ℴ=3&amp;pos=9&amp;page=1</a><br>来源：牛客网<br>简述风控实习内容<br>风控业务上的一个知识点<br>简历 SMO 并行的内容<br>什么是对偶问题？？？手写！手写题识别的项目介绍<br>树的右视图<br>概率题，一根木棍随机砍两道，构成三角形的概率<br>有 100 万条诈骗电话黑名单，现在有个电话来了，快速判断这个电话是否在黑名单里，要求<br>查询 1000 条和 100 万条所消耗的时间一样（我不会了）<br>问了好多数学题，求我内心的阴影面积。<br>20190821 美团点评<br>一面：<br>简历风控项目<br>深挖了项目内容包括：label 哪里来的？<br>谱聚类<br>两种层次聚类的优缺点<br>GBDT 和 GD 的联系<br>深度遍历非递归<br>二面：<br>实习的风控项目特征工程怎么做的<br>推导 XGB<br>RF 和 GBDT 的区别<br>归并排序<br>三面（部门老板面）：<br>纯业务面（我不是一个校招生吗？）<br>概率题：某村庄的的习惯是一直生到男生为止，求村庄的男女比例<br><strong>美团（上海）</strong><br>作者：16huakai<br>链接：<a href="https://www.nowcoder.com/discuss/290749?type=2%E2%84%B4=3&pos=13&page=1">https://www.nowcoder.com/discuss/290749?type=2ℴ=3&amp;pos=13&amp;page=1</a><br>来源：牛客网<br>（机器学习方向）<br>一面：46 分钟 1.自我介绍 2.围绕简历实习问：场景，方法，指标，样本，……（20 分钟） 3.随便说一个算法（说的决策树——特征选择方法区别，分类和回归，） 4.大数据 and 分布式<br>5.auc 的作用 6.编程题：一维数组[1,n],n 可以认为正无穷，然后输入无数个区间[a,b],保证 b&gt;a，求所有区<br>间长度。<br>（按照 a 对区间排序） 7.最后一个智力题：扔鸡蛋问题。<br>二面：1 小时 10 分钟 1.自我介绍 2.直接一个场景题：怎么做搜索中的联想页——方案设计，怎么落地，什么指标。。。（怎么得<br>到字典树） 3.然后又一个场景题：怎么做美团 app 的猜你喜欢，只能用 LR 模型，（特征，那些特征，怎<br>么获取，怎么处理）<br>特征怎么离散化、怎么设计整个逻辑，在线怎么获取用户的特征… 4.然后实习项目：模型，场景，（介绍优缺点，cnn 作用，esim 模型的优缺点），point wise <br>和 pair wise 的优缺点<br>5.GBDT 怎么处理类别特征，例如 ID 特征<br>6.word embedding 的 api 原理 7.最后一个智力题：一个无穷的数列，一直输入，直到收到停止的命令为止，怎么使得返回<br>一个数的概率是<br>1/n，因为是无穷的，不能存数字（蓄水池算法）<br>HR 面：20 分钟 1.大学做过自己觉得有成就的事情？ 2.怎么学习课外知识？ 3.比赛经历？实习经历？ 4.阿里和美团怎么选择？为什么还投递美团？ 5.能不能承受大的工作压力？<br><strong>美团机器学习岗完整面经</strong><br>作者：<em>猪突猛进</em><br>链接：<a href="https://www.nowcoder.com/discuss/287277?type=2%E2%84%B4=3&pos=14&page=1">https://www.nowcoder.com/discuss/287277?type=2ℴ=3&amp;pos=14&amp;page=1</a><br>来源：牛客网<br>共三面（一面 1 小时、二面 1 小时、三面 30 分钟）<br>一面<br>全排列<br>问项目，查得很细，所有的点都问了一遍，基本上围绕简历来问的质疑了一下交互时间取值<br>使用深度模型的话为啥使用 deepfm 而不使用 wide&amp;deep 之类的<br>二面<br>问我为什么坚定的想做推荐？<br>问了 precision recall，问了 bagging boosting<br>xgboost 和 lightgbm 之间区别<br>场景题，如果输入某关键词进行搜索 对于返回的结果可以从哪些方面进行设计？这个是开<br>放题大家见仁见智<br>再有就是问了一些基本的分类指标 AUC/F1score/Precision/Recall/MAP/NDCG 等 等<br>（ MAP:<a href="https://blog.csdn.net/u014203453/article/details/77598997">https://blog.csdn.net/u014203453/article/details/77598997</a>, NDCG: <br><a href="https://blog.csdn.net/u010670689/article/details/73196054">https://blog.csdn.net/u010670689/article/details/73196054</a>）<br>以及 usercf itemcf 相应的知识（<a href="https://blog.csdn.net/xmu_jupiter/article/details/48029165">https://blog.csdn.net/xmu_jupiter/article/details/48029165</a>）<br>再有就是 DNN 与 DeepFM 之间的区别<br>Wide&amp;Deep 与 DeepFM 之间的区别<br>问了 auc 的时间复杂度<br>连续特征如何进行离散化？<br>最近新看了哪些前沿算法<br>三面<br>自我介绍，问专业<br>最打动面试官的项目亮点？<br>有没有得到一些方法论上的东西？（说了特征构建上的心得）<br>介绍了一下 Fß score（precision/recall 的 tradeoff）<br>质疑了一下训练数据时间窗口的选取<br>场景题，问只有 key-click 数量-order 数量，问如何进行条图的推荐，设计一个指标。这个<br>也是见仁见智<br>介绍了整个部门的情况，问了一下日常工作<br>hr 面 9.17<br>就是一些基本的问题，工作城市意向，对未来职业的规划之类的，自己的优缺点等等<br><strong>美团机器学习算法岗北京现场三面凉经</strong><br>作者：wxzzzz<br>链接：<a href="https://www.nowcoder.com/discuss/284006?type=2%E2%84%B4=3&pos=15&page=1">https://www.nowcoder.com/discuss/284006?type=2ℴ=3&amp;pos=15&amp;page=1</a><br>来源：牛客网<br>一面技术面：<br>简单自我介绍+介绍项目+机器学习相关算法介绍、理解，例如：逻辑回归、支持向量机，神<br>经网络，欠拟合和过拟合，GBDT、XGB 等手撕代码：求 2^N 次方（当时想了用移位），求 N 的阶乘有多少个 0（这个简单，N // 5）<br>开放性问题，怎么处理特征、怎么选择模型<br>平时用什么开发，python 或者 C++<br>二面技术面：<br>简单自我介绍+介绍项目<br>项目问了很多细节<br>智力题：一个小时平均闯红灯 5 次，问一个小时闯红灯 6 次的概率，这个就泊松分布。一家<br>人两个孩子，已知一个是女儿，问两个都是女儿的概率，这个简单，条件概率而已<br>代码题：区间合并，这个按区间左边界排序，再一次遍历就可以了<br>三面 leader 面：<br>中间被鸽了两次<br>简单自我介绍+介绍项目<br>项目问了很多细节<br>代码题：判断一个链表是否有环，这个快慢指针就可以解决。<br>基础题：LR 和 SVM 的区别，SVM 核函数如何选择<br>顺便聊了一下意向和未来规划<br>感觉跟面试官谈笑风生，最后把我挂了，我也是无语。<br><strong>美团机器学习/数据挖掘一二面面经</strong><br>作者：雲水謡<br>链接：<a href="https://www.nowcoder.com/discuss/270180?type=2%E2%84%B4=3&pos=16&page=1">https://www.nowcoder.com/discuss/270180?type=2ℴ=3&amp;pos=16&amp;page=1</a><br>来源：牛客网<br>一面：<br>１. 五年以内的职业规划<br>２. 介绍最有成就感的项目（图像、ＣＶ项目）<br>３. 分条概括项目的难点，怎么尝试解决的<br>４. 解决过拟合的方法有哪些<br>５. ｄｒｏｐｏｕｔ的随机失活因子以及怎么反向传播<br>６. 池化层如何反向传播<br>７. ＢＮ底层如何计算，手撕ＢＮ，ＢＮ在训练、测试阶段的计算有什么区别<br>８. ＳＶＭ的松弛因子作用<br>９. 树模型节点划分的依据，如何理解基尼系数的概念<br>１０.并发和并行的区别<br>１１.第一范式、第二范式<br>１２.手撕２的Ｎ次方<br>二面：１．聊项目（图像、ＣＶ项目），难点怎么解决的<br>２. ＲｅｓＮｅｔ为什么能够保证很深的网络具备不错的效果？<br>３. 问一些一面聊过的ＤＬ、ＭＬ基础知识<br>４. ＧＡＮ、ＬＳＴＭ、ＧＲＵ、ＮＬＰ相关的大概聊聊，主要我是图像背景，文本、推荐<br>相关的不咋懂，聊不下去<br>５. ＸＧＢｏｏｓｔ、ＧＢＤＴ<br>６. 手撕如何使用ｒａｎｄ７（）生成ｒａｎｄ１０（）<br>７. 个人的规划，是不是一定要做图像相关的？<br>８. 平时如何进行技术的学习、积累，用哪些途径？<br>９. 在实验室的出勤作息，每天除实验室工作外，个人进行自我技术学习、提升的有效时间<br>能够保证多少？<br><strong>美团 配送 算法岗 面经</strong><br>作者：超级小玄<br>链接：<a href="https://www.nowcoder.com/discuss/264276?type=2%E2%84%B4=3&pos=20&page=1">https://www.nowcoder.com/discuss/264276?type=2ℴ=3&amp;pos=20&amp;page=1</a><br>来源：牛客网<br>一面（70min）<br>1 介绍一下你的研究方向<br>2 这两个项目讲一下<br>3 实习说一下<br>4 我觉得很适合，那我们做两道题吧，最长递增序列<br>5 五个外卖，先取后送，一共十个点，有多少种排列组合情况<br>6 java 里 static 意味着什么<br>7 final 意味着什么，final 标记的类实体中属性值是否可以修改？<br>8 你还有什么问题吗<br>二面（75min）<br>1 介绍一下你的研究方向<br>2 如何看待 simulation 与实际情况的 gap<br>3 你觉得外卖配送难点在哪<br>4 压单合包问题你有什么想法<br>5 记不清了，主要围绕他们组的合包问题在讨论<br>三面（80min）<br>1 介绍下研究方向<br>2 讲一下你这篇论文<br>3 你的这种方法怎么和高级方法结合，你这个 1 秒内求得解，但我现在只要求五秒，剩下 4<br>秒你做什么<br>4 做一个优化项目你的套路是什么，经验是什么 5 你觉得项目中最大的问题是什么<br>6 围绕运筹学和配送里面的订单骑手匹配问题聊了很久<br>7 你还有什么问题？<br>8 加一下你微信吧？<br>HR 面（30min） <br>1 自我介绍<br>2 实习经历说一下<br>3 说一下你最拿得出手的事<br>4 说下你在项目中遇到的最大困难，你怎么解决的，学到了什么<br>5 导师怎么评价你<br>6 还跟哪几个公司再谈<br>7 意向工作地点<br>8 能来实习吗？何时毕业<br>技术加面（60min）<br>1 自我介绍<br>2 方法详细讲一下<br>3 你大件仿真模型的经验和心得<br>4 做学术遇到的最大困难，怎么解决的<br>5 项目和学术结合怎么做<br>6 问题中的随机性怎么处理，gps 不准，天气多变？<br>7 你未来两年内的规划<br>8 怎么实现你的规划，你都准备做哪些事<br>9 现在还在跟哪些公司谈<br>10 你还有什么问题吗</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>美团点评企业文化</title>
      <link href="/2021/03/06/rrovdv/"/>
      <url>/2021/03/06/rrovdv/</url>
      
        <content type="html"><![CDATA[<p>美团点评企业文化<br>美团的使命是“帮大家吃得更好，生活更好”。作为中国领先的生活服务电子商务平台，公司<br>拥有美团、大众点评、美团外卖等消费者熟知的 App，服务涵盖餐饮、外卖、打车、共享单<br>车、酒店旅游、电影、休闲娱乐等 200 多个品类，业务覆盖全国 2800 个县区市。截至 2019<br>年 9 月 30 日止十二个月，美团年度交易用户总数达 4.4 亿，平台活跃商户总数达 590 万，<br>用户平均交易笔数为 26.5 笔。<br>2018 年 9 月 20 日，美团点评（股票代码：3690.HK）正式在港交所挂牌上市。<br>当前，美团战略聚焦 Food +Platform，正以“吃”为核心，建设生活服务业从需求侧到供给侧<br>的多层次科技服务平台。与此同时，美团正着力将自己建设成为一家社会企业，希望通过和<br>党政部门、高校及研究院所、主流媒体、公益组织、生态伙伴等的深入合作，构建智慧城市，<br>共创美好生活。<br><strong>帮大家吃得更好，生活更好</strong><br>美团点评作为一家吃、喝、行、游、购、娱一站式的平台，我们要创造的价值不仅是帮大家<br>吃得更好，还要为人们的生活创造更多的价值，帮大家日常生活的方方面面变得更好，帮大<br>家的旅行生活变得更好。<br>吃得更好 Eat Better<br>吃得更好是所有人的需求，因此美团点评终极目标是希望消费者吃得好一点。不仅在广度上<br>去涵盖亿万人的需求，也致力于长久地帮大家吃得更美味、更便捷、更健康。因此餐饮是我<br>们的重中之重，美团点评将做深做透做大餐饮的战略布局，从营销、配送、IT 系统、供应链<br>等多角度全方位服务餐饮行业。<br>生活更好 Live Better<br>消费者需要吃饭，需要看电影，需要旅游，需要住酒店，需要理发， 需要各种各样的生活<br>服务。美团点评将在更多的消费场景中为用户和商户创造价值，实现我们的企业使命：帮大<br>家吃得更好，生活更好。<br><strong>美团点评价值观</strong><br>我们相信有一些简单朴素的理念，吸引着和我们相似的人，共同完成一件件平凡而伟大的事<br>情，这就是我们的价值观。<strong>以客户为中心</strong><br>客户需求是公司所有策略、行动的最重要的输入，帮客户解决问题，借此创造价值，公司才<br>有存在的理由。<br><strong>正直诚信</strong><br>诚信经营是公司持续发展的根本。在原则问题面前，我们宁愿牺牲短期利益，来换取长期的<br>成功。<br>“德才兼备，以德为先”也是公司干部选拔任用的导向。<br><strong>合作共赢</strong><br>我们的业务，相比绝大多数互联网公司，业态复杂多样，流程环节多，只有各平台及各业务<br>线，线上线下各团队，包括生态链上的合作伙伴，一起高效合作才能服务好我们的客户。<br><strong>追求卓越</strong><br>我们的业务需要我们持续改进的卓越服务赢得客户口碑，低毛利的行业特点要求我们极致的<br>追求流程改进及效率优化以构筑成本领先的竞争壁垒，这些都需用我们用精益求精的产品和<br>技术提供支撑。<br>我们所处的行业一日千里，要求我们是一个学习型组织，持续进化，也需要我们每个人持续<br>学习成长，超越自我。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>百度企业文化</title>
      <link href="/2021/03/06/zvgfoi/"/>
      <url>/2021/03/06/zvgfoi/</url>
      
        <content type="html"><![CDATA[<p><strong>百度企业文化</strong><br><a href="http://talent.baidu.com/external/baidu/index.html#/museum/p2">http://talent.baidu.com/external/baidu/index.html#/museum/p2</a><br><strong>百度使命</strong><br>让人们最平等便捷地获取信息，找到所求<br>“不管你是边陲小镇的农民，还是残障人士，通过百度搜索每个人离信息的距离都是一<br>样的。 互联网不仅是一个技术的互联网，更多的是人的互联网。我们希望让所有中国<br>人，以至亚洲， 以至全世界的人类，最平等便捷地获取信息，找到所求“<br>——李彦宏<br><strong>百度核心价值观</strong><br>简单，可依赖。<br><strong>百度人才观</strong><br>招最好的人，给最大的空间，看最后的结果，让优秀人才脱颖而出。<br>互联网公司，最有价值的就是人。 我们的办公室服务器会折旧，但一个公司，始终在<br>增值的就是公司的每一位员工。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里巴巴内部级别和薪资待遇</title>
      <link href="/2021/03/06/dgxcw5/"/>
      <url>/2021/03/06/dgxcw5/</url>
      
        <content type="html"><![CDATA[<p><strong>阿里巴巴内部级别和薪资待遇</strong><br><strong>级别划分：</strong><br>P  为  Profession  的首字母，是阿里巴巴技术岗位的序列号。<br>分为  P1-P12，P1、P2  一般空缺，为非常低端岗位预留，P3-助理，P4-专员，P5-高级<br>工程师，P6-资深工程师，P7-技术专家，P8-高级专家，P9-资深专家，P10-研究员，<br>P11-高级研究员，P12-科学家。<br>其中  P6、P7、P8  需求量最大，也是阿里占比最大的级别。<br>M  是  manager  的首字母，是阿里巴巴管理岗位的序列号。<br>分为  M1-M10，M1-主管，M2  经理，M3-高级经理，M4-总监，M5-高级总监，M6-副总<br>裁，M7-资深副总裁，M8-子公司  CEO，M9-副主席/执行副主席，M10-董事会执行主<br>席。<br><strong>马云属于  M10  级别。</strong><br>P  与  M  也有相关对应关系：P6  相当于  M1，P7  相当于  M2，P8  相当于  M3，P9  相当于<br>M4，P10  相当于  M5，以此类推。<br>你可以专注在技术领域发展，拥有比管理线路更丰厚的薪资回报。<br>**<img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1615011640788-4bbfe490-6881-4832-b721-9851eb339bea.png#align=left&display=inline&height=507&originHeight=1014&originWidth=1312&size=256776&status=done&style=none&width=656" alt="image.png">**<br><strong>薪资结构：</strong><br>一般为  12+1+3=16  薪。<br>年终奖不与工资挂钩，而是根据员工对公司的贡献分配，它由所属子公司、部门、以<br>及员工个人的绩效所决定。<br>股票是工作满  2  年才能开始拿，第一次可以拿  50％，4  年能拿完。<br><strong>薪资水平：</strong><br>职位达到公司中层水平才能拿股票，而  P6（M1）以上才属于中层。P4  以下、P10  以<br>上没有具体数据<br>关于薪酬，阿里的薪酬现金部分，和百度相比变化不大，现金部分与行业相比没优势；</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1615011678743-f5cb4f0a-e26b-4671-8005-9b454164ce26.png#align=left&display=inline&height=188&originHeight=376&originWidth=1272&size=156638&status=done&style=none&width=636" alt="image.png"><br>关于股票期权，上市前，P6  给期权(P6-2000,P7-3000)；上市后，P6  几乎不给了，P7<br>的股票也降了；<br><strong>晋升机制：</strong><br>1、上年度  KPI（关键绩效指标）3.75  及以上；<br>2、主管推荐；<br>3、晋升委员会面试 （晋升委员会成员为合作方业务部门高管、HRG、该业务线高管<br>等）；<br>4、晋升委员会投票选择<br><strong>阿里绩效考核分两块：50%价值观+50%业绩。</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1615011762612-0ba2116b-b567-4082-a160-ffc5a3ca5f3b.png#align=left&display=inline&height=383&originHeight=766&originWidth=1178&size=289162&status=done&style=none&width=589" alt="image.png"><br>在  HR  眼中，员工一般被分成以下几种：<br>1、「WILD DOG」：业绩优秀，但价值观不符。<br>2、「RABBIT 」：没有业绩的老好人。<br>3、「STAR」：有业绩也有团队精神，也常被形容为「猎狗」。<br>4、「BULLRING」：业绩一般达标，价值观基本相符。<br>5、「DOG」：业绩和价值观都不达标。<br>阿里的绩效打分体系有严格的排序，以前是「2-7-1」，现在是「3-6-1」（10  人以上<br>团队），这也是阿里被广受争议的制度之一。<br>也就是说，30%的员工可以评为「最好」，10%的一定会被评为「较差」，60%的人<br>为「一般水平」——这是强制分布的，每次考评，团队的分数都要符合这个「3-6-1」<br>的分布。<br>绩效考评的方法是什么？<br>阿里的考评根据员工的层级划分为两种： 1）M3/P8  及以下，实行通关制<br>通过季度考核、年度总分将依据员工四个季度的平均分和价值观改进趋势给出<br>2）M4/P9  及以上，不执行通关制<br>以述职为主要方式进行直接打总分。<br>⾦字塔型结构，刚开始晋升容易，到更⾼的级别，晋升难。尤其想要升到  P6、P7  很难，<br>因为这两个级别相当管理级别，从被管理者升级为管理者，可以想象是⽐较难的，继<br>续往上会更难。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里巴巴企业文化</title>
      <link href="/2021/03/06/pxie6w/"/>
      <url>/2021/03/06/pxie6w/</url>
      
        <content type="html"><![CDATA[<p><strong>阿里巴巴企业文化</strong><br><a href="http://www.alibabagroup.com/cn/about/culture">http://www.alibabagroup.com/cn/about/culture</a><br><strong>阿里巴巴集团的使命是让天下没有难做的生意。</strong><br><strong>愿景：</strong><br>旨在构建未来的商务生态系统。愿景是让客户相会、工作和生活在阿里巴巴，并持<br>续发展最少  102  年。<br>阿里巴巴集团的文化关乎维护小企业的利益。<br>阿里巴巴经营的商业生态系统，让包括消费者、商家、第三方服务供应商和其他人<br>士在内的所有参与者，都享有成长或获益的机会。<br>阿里巴巴的业务成功和快速增长有赖于我们尊崇企业家精神和创新精神，并且始终<br>如一地关注和满足客户的需求。<br>阿里巴巴相信，无论公司成长到哪个阶段，强大的共同价值观都可以让阿里巴巴维<br>持一贯的企业文化以及公司的凝聚力。<br><strong>阿里巴巴的价值观：</strong><br>阿里巴巴集团的六个价值观对于如何经营业务、招揽人才、考核员工以及决定员工报<br>酬扮演着重要的角色，该六个价值观为：<br>**客户第一  **—— 客户是衣食父母<br>**团队合作  **—— 共享共担，平凡人做平凡事<br>**拥抱变化  **—— 迎接变化，勇于创新<br>**诚信  **—— 诚实正直，言行坦荡<br>**激情  **—— 乐观向上，永不放弃<br>**敬业  **—— 专业执着，精益求精</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿⾥巴巴最新Java笔试题</title>
      <link href="/2021/03/06/uudtih/"/>
      <url>/2021/03/06/uudtih/</url>
      
        <content type="html"><![CDATA[<p><strong>阿⾥巴巴最新 Java 笔试题汇总</strong><br><strong>单选题  **<br>**1.有个特殊的餐厅，对客⼈的要求是如果要离开餐厅⼀定要看下餐厅内有没有⽐你迟进来的  **<br>**⼈，⼀定要所有⽐你迟进来的⼈离开后你才能离开，有⼀天甲，⼄，丙，丁四个客⼈先后进⼊  **<br>**了这家餐厅，那么他们离开的顺序不可能是： **<br>A. 丙，⼄，甲，丁  <br>B.甲，⼄，丙，丁  <br>C. ⼄，甲，丙，丁  <br>D.⼄，丙，甲，丁  <br>E.丁，丙，甲，⼄  <br>F.丁，丙，⼄，甲  <br>**2.在关系型是数据库中，有两个不同的事务同时操作数据库中同⼀表的同⼀⾏，不会引起冲突  **<br>**的是： **<br>A.其中⼀个 DELETE 操作，⼀个是 SELECT 操作  <br>B.其中两个都是 UPDATE <br>C.其中⼀个是 SELECT，⼀个是 UPDATE <br>D.其中⼀个 SELECT <br>E.其中⼀个是 DELETE，另⼀个是 UPDATE <br>F.两个都是 DELETE <br>**3.众所周知我们所处的宇宙的质能公式是 E=mc 2 ，其中 c 是真空中的光速。和我们的宇宙平  **<br>**⾏的另⼀个宇宙 meta，研究显示他们使⽤的质能公式是 E=(2+ √3)m ，当⼀个物体的质量很  **<br>**⼤的时候，对应的能量 E ⾮常⼤，数据也⾮常的⻓。但 meta 宇宙⾥⾯的智慧⽣物⾮常的懒，他  **<br>**们只愿意把 E 取整，然后记录对应的能量 E 的最后⼀位整数，⽐如 m=0 时，他们会记录 1，m=1 **<br>**时，他们会记录 3，m=2 时，他们会记录 3.现在请问当 m=80 时，他们会记录多少？ **<br>A.1B.2 <br>C.3 <br>D.4 <br>E.5 <br>F.6 <br>**4.⻚⾼速缓存是 Linux kerne 使⽤的主要的磁盘缓存技术。它允许系统把存放在磁盘上的⼀些数  **<br>**据保留在内存中，以便减少对磁盘的访问。进程对⻚⾼速缓存区中的数据修改之后，数据⻚被  **<br>**标记为“脏数据”在下列哪些条件下，脏数据不会被写⼊磁盘？ **<br>A.⻚⾼速缓存空间不⾜  <br>B.突然断电  <br>C.变脏以来，太久没有过更新  <br>D.通过系统调⽤（sync（），fsync（），fdataasync（））来强⾏对将对快设备的更新同步  <br>到磁盘  <br>E.内存⾜够⼤  <br>F.磁盘⾜够⼤  <br>**5.设⼀组初始关键字记录关键字为（ 12,15,1,18,2,35,30,11 ），则以  12  为基准记录的⼀趟  **<br>**快速排序结束后的结果为  **<br>A.11，1，2，12，35，18，30，15 <br>B.11，2，1，12，15，18，35，30 <br>C.1，2，11，12，15，18，35，30 <br>D.11，2，1，12，18，35，30，15 <br>E.1，2，11，12，15，18，30，35 <br>F.以上都不是  <br>**6.多项式  P(X)=a+bx+cx^2+dx^3 ，对于任意  x ，计算  P(X)  中最少需要⽤到乘法操作的次数  **<br>**是多少？ **<br>A.3 <br>B.4 <br>C.5 <br>D.6E.1 <br>F.2 <br>**7.有⼀个班 31 ⼈，⼥同学 15 ⼈，男同学 16 ⼈，现在要玩⼀个结组游戏，每组由男⼥两名同学  **<br>**构成，每个同学最多只能在⼀个组。结组的同学可以到⽼师那⾥领 100 元钱，然后按照预先分  **<br>**配的协议进⾏分配，钱最⼩可分单元为 1 元。未能结组的同学⽆法领到钱，不允许在组之间传  **<br>**递利益。那么⼀下命题正确的是： **<br>A.男⽣和⼥⽣可以得到⼀样多的钱  <br>B.男⽣最多得 49 元  <br>C.男⽣最多得 47 元  <br>D.男⽣最多得 46 元  <br>E.男⽣最多得 1 元  <br>F.男⽣最多得 0 元  <br>**8.现代的企业是建⽴在⼤规模协作的基础上的，员⼯之间，团队之间，部⻔之间，企业之间的  **<br>**协作都是成功的重要因素。好的企业在协作上是⾼效的。以下说法中不合适的是（） **<br>A.⼀个项⽬能容纳的⼈员是有限的，当增加到⼀定规模项⽬进度反⽽会变慢。 <br>B.⼀个项⽬协作为了办证信息对称，多⽅参与的情况下直接召集多⽅在⼀起开会就能协调好  <br>C.协作建⽴的条件包括互补和共赢  <br>D.能⼒结构类似的成员之间较多样互补型员⼯之间更容易产⽣竞争关系  <br>E.协作中的权利和责任应当相称  <br>F.如果有可能的话，信息交互较多的事务更合适在⼀个团队内或有⼀个⼈完成，相较于进⾏分  <br>⼯。<br>**9.以下程序的运⾏结果是？</strong>A.foobar <br>B.barfoo <br>C.foobar 或者 barfoo 都有可能  <br>D.Bar <br>E.Foo <br>F.程序⽆法正常运⾏  <br><strong>10.输⼊图⽚⼤⼩为 200×200，依次经过⼀层卷积（kernel size 5×5，padding 1，stride **<br>**2），pooling（kernel size 3×3，padding 0，stride 1），⼜⼀层卷积（kernel size 3×3， **<br>**padding 1，stride 1）之后，输出特征图⼤⼩为： **<br>A.95 <br>B.96 <br>C.97 <br>D.98 <br>E.99 <br>F.100 <br>**11.⼀个⼆叉树有 100 个⼦节点数为 2 的节点，100 个⼦节点数为 1 的节点，那么个⼦节点数为 0 **<br>**的节点（叶节点）的个数为： **<br>A.101 <br>B.100 <br>C.200 <br>D.300E.99 <br>F.1 <br>**12.某种类型的双核  CPU  的性能提升了  1/3 ，假定该提升是通过对每条指令缩短执⾏时间实  **<br>**现的，那么它每条指令执⾏时间缩短了  () 。 **<br>A.1/4 <br>B.1/8 <br>C.1/3 <br>D.1/6 <br>E.1/5 <br>F.1/2 <br>**13.⼀个 map-reduce 任务由 m 个 mapper 和 r 个 reducer 构成，计算的效率可以认为正⽐于 mr 的  **<br>**乘积（数据管道的个数），在限定任务的 mr 乘积约等于 10000 的情况下，假定每个 mapper 和  **<br>**每个 reducer 的成本分别为 1 和 7，那么最佳的资源分配最接近于以下哪个⽅案？ **<br>A.mapper100 个，reducer100 个  <br>B.Mapper200 个，reducer50 个  <br>C.Mapper264 个，reducer38 个  <br>D.Mapper316 个，reducer32 个  <br>E.Mapper500 个，reducer20 个  <br>F.Mapper1000 个，reducer10 个  <br>**14.如果你有相关经验，很多景点的餐馆商铺经营⽅式很有趣。以下描述错误的是： **<br>A.由于景点的⼤部分顾客是⼀次性的，因此商铺的信⽤在其他条件相同时可能更低  <br>B.景点的餐馆为了招揽顾客使⽤托⼉会⽐居⺠区的餐馆使⽤托⼉效果好  <br>C.景点常常卖⼀些当地特产，⽐如⻘岛的海边会有卖⻉壳的，这些⻉壳产⾃附近的海域  <br>D.店铺使⽤托⼉的有效原因是，⼈们常常做出多数⼈做出的选择，⽽忽视⾃⼰⾃然状态下的  <br>决策<br>E.⼀些景点在出⼝位置上安排⼀个商店，商店内的通道曲折，为的是顾客多花些时间看东⻄  <br>F.景点内⼀些玩射箭的场所经营状况会⽐在居⺠区附近设置的类似场所好，原因是景点内的游  <br>⼈玩起来更在状态</strong>15.⼀个机器⼈玩抛硬币的游戏，⼀直不停的抛⼀枚不均匀的硬币，硬币有 A,B 两⾯，A ⾯的概  **<br><strong>率为 3/4，B ⾯的概率为 1/4。问第⼀次出现连续的两个 A 年的时候，机器⼈抛硬币的次数的期  **<br>**望是多少？ **<br>A.9/4 <br>B.11/4 <br>C.15/4 <br>D.4 <br>E.5 <br>F.28/9 <br>**16.⼩ a 和⼩ b ⼀起玩⼀个游戏，两个⼈⼀起抛掷⼀枚硬币，正⾯为 H，反⾯为 T。两个⼈把抛到  **<br>**的结果写成⼀个序列。如果出现 HHT 则⼩ a 获胜，游戏结束。如果 HTT 出现则⼩ b 获胜。⼩ a 想  **<br>**问⼀下他获胜的概率是多少？ **<br>A.3/4 <br>B.1/2 <br>C.2/3 <br>D.5/9 <br>E.1/3 <br>F.1/4 <br>**17.假定某同学使⽤ Naive Bayesian（NB）分类模型时，不⼩⼼将训练数据的两个维度搞重复  **<br>**了，那么关于 NB 的说法中正确的是： **<br>A.这个被重复的特征在模型中的决定作⽤会被加强  <br>B.模型效果相⽐⽆重复特征的情况下精确度会降低  <br>C.如果所有特征都被重复⼀遍，得到的模型预测结果相对于不重复的情况下的模型预测结果  <br>⼀样。 <br>D.当两列特征⾼度相关时，⽆法⽤两列特征相同时所得到的结论来分析问题  <br>E.NB 可以⽤来做最⼩⼆乘回归  <br>F.以上说法都不正确  <br>**18.以下哪个⾏为，不会明显加剧客户端运⾏过程中的卡顿： **<br>A.在主线程集中处理耗时的操作 B.在⼦线程集中处理耗时的操作  <br>C.在其它进程集中处理耗时的操作  <br>D.提⾼后台线程的优先级  <br>E.降低主线程的优先级  <br>F.⻚⾯存在多个重叠显示的控件  <br>**19.以下程序的输出是： **<br>A.1，6 <br>B.2，5 <br>C.2，4 <br>D.3，5 <br>E.4，7 <br>F.1，1 <br>**问答题  **<br>**20.题⽬描述</strong>学校图书馆共有 300 万册图书，想统计其中 Computer ， Science ，计算机，科学这⼏个词  <br>出现的次数，并按照⾃然年度分类，如 2016 年出版的书籍中这⼏个词各⾃出现的次  <br>数， 2015 年······依次类推。 <br>**21.题⽬描述  **<br>设计接⼝并且实现⼀个多线程安全的堆，并且要求可以删除堆中任意元素（⾮堆顶元素），要  <br>求尽量⾼效，假设已有标准的 mutex 实现可以使⽤。 <br>**22.题⽬描述  **<br>淘宝上的每个宝⻉⼀般都有个默认的全国邮费（也可能没有），同时也⽀持到特定省份有特定  <br>的邮费，如果到特定的省份没有特别的邮费就⽤默认的全国邮费。请：  1.设计⼀个存储结构来保存⼀个宝⻉的所有邮费信息；（简单⽤⽂字阐述⼀下做法）  2.给定⼀个宝⻉的邮费存储信息和⼀个省份，编程快速得出宝⻉到此省的邮费。 注意：邮费  <br>的类型是 uint32_t，此外由于商品数量⾮常⼤（假定⼗亿量级），查询量也⾮常⼤，对存储和  <br>查询的效率要求⾮常⾼，因此存储效率和查询效率是考察的重点。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里巴巴面经合集</title>
      <link href="/2021/03/06/kaz11q/"/>
      <url>/2021/03/06/kaz11q/</url>
      
        <content type="html"><![CDATA[<p><strong>阿里巴巴面经合集</strong><br><strong>一、Java  研发工程师</strong><br>一面（1h+）<br>对简历进行  DFS，每个地方都问到不会为止。手撕了一道剑指原题。最后对实习项目<br>没有上线表示有点不足。<br>二面（50mins）<br>基本全是  JAVA  基础，还有一道智力题：三点十五分，时针和分针的夹角。<br>三面（20mins）<br>被鸽了一次，隔了两天。<br>实习项目（第一次碰到面试官比我还懂我们项目在做啥的，被问懵了，最后被指导了<br>十几分钟，有醍醐灌顶的感觉）。JAVA  基础，计算机网络基础。<br>四面，交叉面（20mins）<br>被鸽了两次，第三次才面上试，时隔两周。。。<br>实习项目，计算机网络基础（前面学的很多都不记得细节了，答得不太好，没想到也<br>过了）<br>HR  面（30mins）<br>不便透漏<br><strong>二、算法工程师</strong><br>一面：（一小时）<br>自我介绍，问项目，项目问了很多<br>如果向领导汇报，通俗易懂介绍反向传播<br>还有一些比较基础的问题忘记了。。。<br>你有什么一直坚持的习惯么？<br>觉得女生做程序员是否适合？<br>会什么语言？<br>在线写了一道非常简单的数组相关代码题。。很简单。。。<br>有什么想问的问题<br>总结——应该是简历面。可能因为没笔试或者性格测评一类的，所以问了一些人生相<br>关问题，还写了一下代码看看大致的代码基础。二面：（一小时）<br>自我介绍，项目相关<br>问了一些数据结构相关的知识，排序算法，堆一类<br>场景题，海量数据前  k  大<br>CNN  网络介绍，卷积核<br>GBDT  原理，是回归树还是分类树<br>GBDT  跟  xgboost  对比<br>xgboost  怎么并行化<br>激活函数相关，激活函数应该有什么性质<br>…(忘了，琐碎的知识点有点多) <br>会  ETL  工具么<br>会用什么语言<br>布隆过滤器知道吗？用在什么场景下？推导会么（加分项）<br>有什么问题？<br>总结——这一面可能是对基础知识的一个排查，考察知识面广度深度，问的不是表面<br>的问题，感觉需要对模型原理本质了解清楚。<br>三面：（一小时）<br>自我介绍，项目，问项目又问了很多<br>两个思考题？<br>怎么改善用户搜索后显示的内容的一个排序质量？说说有什么特征可以构建，用什么<br>模型？<br>单调递增数组，尽可能想一些方法将它们压缩。<br>总结——考查的是更深一点的吧。。看你有没有解决实际问题的一些能力，业务水平<br>怎么样。。。但是我是实在没做过多少项目，所以这一面回答的很差、、、<br>交叉面：（半个小时）<br>自我介绍，简历，有个项目问的很细，细化到那一步的代码是怎么实现的<br>最后简单问了几个问题，TFIDF  相关的啥的<br>Hr  面：（四十多分钟）<br>聊人生，没有按顺序，只想到了这些问题<br>对前面哪个面试官印象最好<br>有了解自己过来后会做什么方面的吗？<br>有没有思考过自己适合做什么，研究还是落地的工程？<br>想留在哪里？杭州考虑吗？家人什么态度<br>对你成长影响最大的人，除了父母，为什么周围有没有什么学术方面特别敬佩的人？你觉得是什么本质的原因支撑他这份热爱<br>（什么狗。。。）<br>自己导师什么风格的？最忙的时候是你什么样的状态？<br><strong>三、前端工程师</strong><br>一面<br>了解  es6  的那些特性<br>js  闭包是什么，什么是内存泄漏，如何解决内存泄漏问题<br>js  垃圾回收机制<br>js  基本数据类型（包括  es6  新增的  Symbol）<br>原生  ajax  原理，ajax  和  fetch  的区别，fetch  支持  http  的哪些方法<br>option  方法可以发送那些内容<br>CORS  原理<br>网络安全了解哪些？如何预防  sql  注入，XSS，CSRF <br>w3c  标准盒子模型和  IE  模型有什么区别<br>CSS  的  display  有哪些取值<br>iso  七层模型，每一层模型的经典协议<br>http1.0  和  http1.1  和  http2.0  的区别<br>es6  新增的数组方法<br>数组的  reduce  方法<br>js  中找到一个数组最大值的方法，分析复杂度<br>MVC  和  MVVM  的区别，MVVM  的优点<br>flex  布局用在哪些场景下<br>如何适配不同的屏幕<br>当时投了阿里一个多月了突然被捞了起来，很兴奋，答得也还算不错，面试官说后续<br>会有更深入的二面，然而一周后官网状态显示已结束…<br><strong>四、数据分析师</strong><br>一面<br>1、介绍一下  Hive；一道  Hive  题（A，B  两表，查询  B  表中没有，A  表中有的；关键字<br>段：学号，课程号）<br>2、反转字符串有哪几种方法<br>3、数据仓库的  ETL  怎么做<br>4、Python  用什么包 5、介绍一下词嵌入，one-hot  和  word2vec  的区别，word2vec  如何实现的<br>6、什么是维度建模<br>7、bagging  和  boosting  的区别<br>8、Arima  介绍，Arima  和  LSTM <br>9、如果数据量极大，怎么去定  Arima  的参数<br>10、平时怎么学习的<br>11、平时会读  paper  么/英文的  paper <br>12、接触  Python，Java，Hadoop  多久<br>13、运筹学了解么，动态规划用过么<br>14、运筹优化问题，有一堆大小，密度不一的石头，放入  4  个箱子，要求每个箱子的<br>石头的数量，质量，体积差不多，怎么做<br>15、会  Linux  么，会用  Class  么<br>16、Python  的编程规范知道多少<br>二面<br>1、自我介绍<br>2、编程中最喜欢哪门课，说明原因<br>3、喜欢运筹学么<br>4、国外交流学习中获得了什么<br>5、Python  用过哪些包<br>6、有没有读博的打算<br>7、发过什么论文<br>8、一道有关集群的运筹优化问题，留了  2  小时做<br>三面<br>1、自我介绍<br>2、介绍一下项目，你在团队中的作用，有什么结果么？<br>3、爬虫用的什么包<br>4、对于  Hive，Impala  的了解<br>5、介绍一下  OLAP；OLAP  的工具<br>6、对于算法了解么；介绍一下聚类分析有哪几种，之间的区别是什么<br>HR  面  <br>1、自我介绍(从本科到研究生的经历) <br>2、数据分析的项目<br>3、职业规划<br>4、可实习时间 5、对于工作内容的了解<br><strong>五、Java  工程师</strong><br>一面： 1.自我介绍 2.项目（怼哭的那种，很厉害，很多我没想到的地方） 3.事务传播<br>4.hashMap  和  hashTable<br>5.java1.8  新特性<br>6.hashMap  和  ConcurrentHashMap<br>7.java  内存回收机制<br>二面： 1.自我介绍 2.项目  1 3.项目  2<br>三面： 1.自我介绍 2.项目 3.变量的初始化顺序 4.类加载顺序 5.类加载机制 6.垃圾回收机制 7.异常的集成体系即捕捉异常的情况<br><strong>六、C++工程师</strong><br>一面：（30  分钟）<br>撕代码，反转链表<br>设计支持很多数据库的同步备份系统（开放性问题，阅读源码、学习别人的设计思路<br>很重要）<br>二面：（60  分钟）<br>muduo  网络库<br>自己的项目介绍<br>slect、epoll  区别网络编程流程<br>https  和连接建立过程<br>B+树<br>TOPk  的问题<br>hash  冲突解决<br>虚函数定义<br>实验室的项目（问了好久，大约  20  多分钟）<br>三面：（30  分钟）<br>实验室的项目<br>自己的项目介绍<br>看过那些源码<br>原子行操作<br>底层实现<br>高并发访问网站设计<br>大量已排序数据进行合并说明优化思路<br>set  和  map  底层数据结构实现，为啥用红黑树<br>HR  面:（20  分钟）<br>谈人生谈理想<br><strong>七、大数据开发工程师</strong><br>一面：<br>1、HDFS DataNode  死了怎么办，NameNode  发生了什么变化？<br>2、JVM GC  回收算法，各自优缺点，什么场景使用？<br>3、HashMap get  和  put  源码，为什么红黑而非平衡树？<br>4、CHM  结构，1.7/1.8  区别？<br>5、排序时间复杂度/空间复杂度，插入，归并等，很大的绝大部分有序的数组已经在<br>内存，选择什么排序算法，时间复杂度？<br>6、大数据问题，10G  的文件里面的数字排序<br>7、HA HDFS Zookeeper  什么作用，为什么要  Zookeeper？<br>二面：<br>1、小白鼠问题。16  瓶正常水，1  瓶毒水，小白鼠喝下毒水后一小时死亡，只给一小时<br>时间，最少用多少只小白鼠可以检测出  14  瓶正常水？<br>2、两根质地不均匀但是燃烧时间与绳子长度无关的一样的绳子，燃烧完一根绳子耗时<br>一个小时，只能用这两根绳子，如何准确烧出  15  分钟？3、数据库隔离级别，哪些导致脏读，哪些导致幻行？<br>4、分代收集算法<br>5、G1  垃圾回收器<br>6、线程池的核心参数，几种队列，分别干啥的<br>7、大数据流处理技术之间的实现原理以及区别<br>8、Hadoop1.x  和  2.x  之间的区别<br>9、你的实习经历中  ES  怎么调优的？<br>10、详细问项目（背景，职责）<br>11、生活上爱干啥<br>三面：这是部门老大<br>1、HBase  架构，为什么其随机查询很快？<br>2、ES  如何调优？<br>3、项目中让你出乎意料的收获？<br>4、小学的时候印象很深刻的事？正反面各一个<br>5、总结本科的学习，有什么方<strong>*？自己认为做的好的一点是什么？<br>其他还聊天聊了很久。<br>交叉面：（阿里云的高  P  大佬）<br>1、科研，问的很详细，背景、技术架构、意义<br>2、科研落地的话，要考虑什么问题，有什么不足？<br>3、ES  查询机制？<br>4、一个分布式系统，为什么测试的时候响应很快，而到实际线上部署时响应就会变慢？<br>分析可能原因并给出理由<br>5、分布式系统  CAP  理论，重点解释分区容错性的意义<br>6、大数据的特性<br>7、对虚拟内存的理解<br>8、有啥想问他的<br>Hr  面：<br>1、除了简历中的技术，还对什么技术感兴趣<br>2、城市选择<br>3、职业规划<br>4、怎么看待之前的面试官？有留下深刻影响的吗？<br>**八、安卓工程师</strong><br>电面：1.你常用的设计模式<br>2.listView  或  Recycler  上学滑动时卡顿的原因<br>UI  线程进行费时操作；GC  时暂停所有工作线程（这个真忽略了。。） 3.打开浏览器输入一个网址的背后发生了什么（这个真的很常见，大家一定要记住，<br>TCP  三次握手没让我说）<br>4.Https  比  Http  多的流程（这个感觉也很常见）<br>5.Https  流程很复杂，怎么简化（简化完全没有思路，然后面试官也就没让我说了）<br>6.Android  线程间通信（Handler  机制一定要弄懂）<br>7.Java  异常分类，举例。发生异常和  Error  有什么不同？<br>8.Rxjava（我就说自己只是写过  demo，这是函数式编程）<br>9.JVM GC  的种类和流程（Minor GC  和  Full GC，我***。。。电话打来我正在看，只回<br>答上  Minor GC，气死我了！！） 10.你还有什么想问吗？<br>笔试重要吗？不重要<br>计算机操作系统和编译原理这些重要吗？不重要<br>希望能收到二面电话。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里</title>
      <link href="/2021/03/06/caoqe4/"/>
      <url>/2021/03/06/caoqe4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>美团</title>
      <link href="/2021/03/06/iifou4/"/>
      <url>/2021/03/06/iifou4/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>百度最新面经-Java 工程师</title>
      <link href="/2021/03/06/vacfrr/"/>
      <url>/2021/03/06/vacfrr/</url>
      
        <content type="html"><![CDATA[<p><strong>百度最新面经-Java  工程师</strong><br><strong>一、</strong><br><strong>百度一面：</strong>60  分钟<br>1、基础模块<br>java  中  Object  类有哪些方法，分别在什么场景下使用，== equals（）的异同<br>java  基础类型与所占的长度<br>hash  的时间复杂度<br>String  不可变性与  Stringbuild Stringbuffer  的使用<br>set  和  list  的区别，你是如何选择的<br>基本类抽象类接口的异同<br>设计模式，如何使用的，讲了一下我对设计模式的理解<br>2、数据库模块<br>mysql  的使用<br>聚簇索引，非聚簇索引，回表<br>联合索引，最左匹配原则，联合索引不回表的情况<br>多表联查强制使用某一个索引<br>mysql  事务隔离级别，如何选定<br>缓存数据库  memcache  的集群模式，一致性  hash <br>redis  的基本数据类型<br>3、网络模块<br>一个  url  请求的过程<br>http502 406 302  的意义<br>三次握手 四次挥手<br>4、vi  编辑器  nginx linux  命令<br>vi  编辑器的两种模式，跳转到最后一行<br>nginx  的模块化，break continu  的区别，<br>linux  查看大文件，查看负载命令<br>5、项目<br>介绍了我在京东做的项目的一些优化思路，设计思路<br><strong>百度二面：</strong>30  分钟 1、java  基础<br>java  并发包的一些问题，队列，线程池的设计，为什么这么设计<br>gc  的模式，算法，内存模型等<br>类加载，自己实现类加载 问的都比较实用，如果不是自己操作过，基本上不好回答<br>2、数据库<br>主从复制  mvcc  原理 索引类型<br>redis  持久化 这块问的比较多，记不清了<br>3、框架<br>spring  框架的使用，使用了哪些注解<br>spring  如何如何解决他们的  bean  循环依赖的（这个忘了，三级缓存）<br>springmvc  请求流程<br>还有一些也记不清了，没问我的项目<br>一面结束就通知我第二天二面，但是二面感觉还行，有两个问题没回答好，其他觉得<br>都不错，时间只有  30  分钟，不知道时间这么短 是什么意思，希望这次能过吧。<br><strong>二、</strong><br><strong>电话面试</strong>，面试官说话憨憨的哈哈哈哈（褒义词，很逗）<br>45min  1.自我介绍 2.介绍一下项目（15min） 3.设计题：用户关注和粉丝功能：（一，关注 二，取消关注 三，查看关注列表<br>和粉丝列表）10min <br>4.JAVA  基础  10min  4.算法题（挺简单两道）： 1.查找两链表公共节点（记着答案直接说了） 2.有序列表，每一位都平方后去重后的个数<br>：例【-1,1,2,3】——&gt;【1,4,9】 3  个数<br>第一反应哈希表，但空间复杂度有点高了，然后想了一会用头尾双指针往  0  逼近，找<br>绝对值相等的个数<br>5min  后  hr  来电话约晚上二面，希望有好运气哈<br><strong>三、自我介绍</strong><br>http  常用的代码<br>502  和  504  区别<br>mysql  索引<br>mysql  的  ACID <br>InnoDB  和  MyISAM  的区别<br>乐观锁悲观锁<br>HTTP  的特点<br>mysql  事务隔离级别及其作用<br>mysql  的主从同步<br>Java  的基本数据类型和占用字节<br>最左匹配原则<br>nginx  了解么<br>redis  的同步<br>redis  数据淘汰<br>RDB  和  AOF  的优缺点<br>AOF  是阻塞的么<br>分片数据会丢失么<br>一致性哈希算法<br>String  可以被继承么<br>final  的作用<br>阻塞队列<br>IO  模型和它们的使用场景 有几种  buffer <br>都会什么数据结构<br>分布式同步<br>平常用过什么设计模式？<br>OSI  模型第  4  层和第  7  层的区别，有什么协议<br>干过什么项目 项目用了什么框架 有没有分布式 大数据的经验<br>git  如何使用<br>常用  linux  命令<br>如何查看进程<br>awk <br>压缩包的命令是什么<br>使用过  memcache  么<br>都使用什么操作系统<br>mybatis  和  jdbc  的区别除了  Java  还用什么语言<br>大数据了解么<br>前端了解么<br>分布式了解么<br>项目的并发量是多少<br>有用什么框架么<br>上述问题由于没有经验所以都不会。。<br><strong>算法</strong><br>跳格子一次  2  到  3  格<br>excel  表格 第几行的行号是多少  1-26  行  abc…z  然后是  aa ab ac…az  以此类推<br><strong>四、</strong><br><strong>百度凤巢  Java  开发一面</strong><br>面试时间大约一个小时<br>问项目、实习<br>hashmap jdk7  和  8  的区别，链表长度大于  8  转成红黑树，put  源码，和  hashtable  区  <br>别<br>hashset  实现<br>concurrenthashmap  原理  7  和  8  的区别，深问细节<br>Java  内存模型，解释下各分区，A a = new A();a  存在哪（区分成员变量个局部变量）<br>垃圾回收算法，详细说分带算法，可作为  roots gc  的对象<br>类加载过程，双亲委派原则<br>线程状态<br>wait  和  sleep  啥区别<br>线程池，各种细节，参数，原理，阻塞队列，拒绝策略<br>三个线程  ABC，怎样保证顺序执行（我说了  join，信号量，最后让我用锁实现下）<br>synchronized  和  lock  啥区别，原理，公平锁与非公平如何实现（说到  AQS）<br>synchronized  锁升级<br>volatile  作用，实现原理<br>cas  原理，cas  产生的问题（ABA，占用  cpu）<br>索引有几种，聚簇和非聚簇，回表操作<br>索引失效情况<br>如何优化  mysql <br>mysql  存储引擎，区别索引用什么数据结构，为什么用  b+ <br>事务特性<br>隔离级别<br>脏读，不可重复读，幻读，解释<br>mvcc  是啥，如何实现的？<br>redis  数据类型<br>redis  持久化方式，原理，效率，区别<br>AOF  持久化是否包含查指令<br>spring  说几个注解<br>ioc  和  aop  原理及解释<br>动态代理，jdk  代理和  cglib  代理区别，实现<br>spring  事务<br>tcp  三次握手，为什么，两次有什么问题<br>https  请求过程<br>最后说电面就不问算法了，最近会再联系你，等二面了再来更<br><strong>五、</strong><br><strong>技术一面</strong><br>时间：40m；<br>形式：现场；<br>自我介绍；<br>问题：<br>Thread；<br>equals  和  hashCode  等；<br>volatile；<br>JMM；<br>垃圾回收，分代等；<br>synchronized；<br>单例模式；<br>ThreadLocal；<br>jvm  栈空间分配；<br>TCP/IP  五层模型；<br>各层常见协议；<br>HTTP  的报文结构；<br>HTTP  和  HTTPS；常见的  HTTP  头；<br>数据库隔离级别等；<br>快排特点等；<br>堆排怎么找左子节点；<br>Linux  分割文本的问题；<br>cookie  和  session；<br>简单难度的算法题，LeetCode  有原题；<br>上面那个题怎么优化空间复杂度；<br>反问：<br>部门问题；<br>主要技术栈；<br>是否会存在调岗；<br>后续面试安排；<br><strong>技术二面</strong><br>时间：40m；<br>形式：现场；<br>自我介绍；<br>问题：<br>简单或者中等的算法题，LeetCode  有原题；<br>口述算法题，10  亿个无排序数取最大的  1000  个；<br>阻塞队列；<br>Java  接口抽象类；<br>线程池；<br>ThreadLocal；<br>手写两句  sql  题；<br>Spring Boot；<br>MySQL  两个引擎；<br>优化数据库；<br>Spring  配置数据库驱动，参数类型等；<br>Linux、Docker、Nginx  的几个问题，答的不好；<br>Redis  单线程等；<br>前端的一个问题，并没有复习；<br>反问：<br>为什么会问前端问题（因为简历写了，但我没复习，尴尬）；<br>对我的建议；<br>后续流程；百度技术栈以及对应届生哪方面比较重视；<br><strong>主管面</strong><br>时间：44m；<br>形式：现场；<br>主要问学科发展，项目，设计理念，方法论等较上层面的问题；<br>最后聊了下程序员人生发展的问题等，整体还是挺愉快的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>百度</title>
      <link href="/2021/03/06/gogngr/"/>
      <url>/2021/03/06/gogngr/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>美团点评高频面试题 150 道</title>
      <link href="/2021/03/06/qrzqr3/"/>
      <url>/2021/03/06/qrzqr3/</url>
      
        <content type="html"><![CDATA[<p><strong>美团点评高频面试题 150 道 – Java 工程师</strong><br><strong>目录</strong><br>一、Java 集合 22 题 ………………………………………………………………………………………………………………………….1<br>二、JVM 与调优 21 题………………………………………………………………………………………………………………………2<br>三、并发编程 28 题…………………………………………………………………………………………………………………………..3<br>四、Spring 面试专题 ………………………………………………………………………………………………………………………..5<br>五、设计模式 …………………………………………………………………………………………………………………………………….6<br>六、Springboot 面试专题………………………………………………………………………………………………………………..7<br>七、Netty10 题 ………………………………………………………………………………………………………………………………….8<br>八、Redis ……………………………………………………………………………………………………………………………………………9<br><strong>一、Java 集合 22 题</strong></p><ol><li>ArrayList 和 Vector 的区别。</li><li>说说 ArrayList,Vector, LinkedList 的存储性能和特性。</li><li>快速失败 (fail-fast) 和安全失败 (fail-safe) 的区别是什么？</li><li>hashmap 的数据结构。</li><li>HashMap 的工作原理是什么?</li><li>Hashmap 什么时候进行扩容呢？</li><li>List、Map、Set 三个接口，存取元素时，各有什么特点？</li><li>Set 里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用 == <br>还是 equals()? 它们有何区别?</li><li>两个对象值相同 (x.equals(y) == true)，但却可有不同的 hash code，这句话<br>对不对?10. heap 和 stack 有什么区别。</li><li>Java 集合类框架的基本接口有哪些？</li><li>HashSet 和 TreeSet 有什么区别？</li><li>HashSet 的底层实现是什么?</li><li>LinkedHashMap 的实现原理?</li><li>为什么集合类没有实现 Cloneable 和 Serializable 接口？</li><li>什么是迭代器 (Iterator)？</li><li>Iterator 和 ListIterator 的区别是什么？</li><li>数组 (Array) 和列表 (ArrayList) 有什么区别？什么时候应该使用 Array 而<br>不是 ArrayList？</li><li>Java 集合类框架的最佳实践有哪些？</li><li>Set 里的元素是不能重复的，那么用什么方法来区分重复与否呢？是用 == <br>还是 equals()？它们有何区别？</li><li>Comparable 和 Comparator 接口是干什么的？列出它们的区别</li><li>Collection 和 Collections 的区别。<br><strong>二、JVM 与调优 21 题</strong></li><li>Java 类加载过程？</li><li>描述一下 JVM 加载 Class 文件的原理机制?</li><li>Java 内存分配。</li><li>GC 是什么? 为什么要有 GC？5. 简述 Java 垃圾回收机制</li><li>如何判断一个对象是否存活？（或者 GC 对象的判定方法）</li><li>垃圾回收的优点和原理。并考虑 2 种回收机制</li><li>垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么<br>办法主动通知虚拟机进行垃圾回收？</li><li>Java 中会存在内存泄漏吗，请简单描述</li><li>深拷贝和浅拷贝。</li><li>System.gc() 和 Runtime.gc() 会做什么事情？</li><li>finalize() 方法什么时候被调用？析构函数 (finalization) 的目的是什么？</li><li>如果对象的引用被置为 null，垃圾收集器是否会立即释放对象占用的内存？</li><li>什么是分布式垃圾回收（DGC）？它是如何工作的？</li><li>串行（serial）收集器和吞吐量（throughput）收集器的区别是什么？</li><li>在 Java 中，对象什么时候可以被垃圾回收？</li><li>简述 Java 内存分配与回收策率以及 Minor GC 和 Major GC。</li><li>JVM 的永久代中会发生垃圾回收么？</li><li>Java 中垃圾收集的方法有哪些？</li><li>什么是类加载器，类加载器有哪些？</li><li>类加载器双亲委派模型机制？<br><strong>三、并发编程 28 题</strong></li><li>Synchronized 用过吗，其原理是什么？2. 你刚才提到获取对象的锁，这个“锁”到底是什么？如何确定对象的锁？</li><li>什么是可重入性，为什么说 Synchronized 是可重入锁？</li><li>JVM 对 Java 的原生锁做了哪些优化？48</li><li>为什么说 Synchronized 是非公平锁？49</li><li>什么是锁消除和锁粗化？49</li><li>为什么说 Synchronized 是一个悲观锁？乐观锁的实现原理又是什么？什么<br>是 CAS，它有什么特性？</li><li>乐观锁一定就是好的吗？</li><li>跟 Synchronized 相比，可重入锁 ReentrantLock 其实现原理有什么不同？</li><li>那么请谈谈 AQS 框架是怎么回事儿？</li><li>请尽可能详尽地对比下 Synchronized 和 ReentrantLock 的异同。</li><li>ReentrantLock 是如何实现可重入性的？</li><li>除了 ReetrantLock，你还接触过 JUC 中的哪些并发工具？</li><li>请谈谈 ReadWriteLock 和 StampedLock。</li><li>如何让 Java 的线程彼此同步？你了解过哪些同步器？请分别介绍下。</li><li>CyclicBarrier 和 CountDownLatch 看起来很相似，请对比下呢？</li><li>Java 线程池相关问题</li><li>Java 中的线程池是如何实现的？</li><li>创建线程池的几个核心构造参数？</li><li>线程池中的线程是怎么创建的？是一开始就随着线程池的启动创建好的吗？</li><li>既然提到可以通过配置不同参数创建出不同的线程池，那么 Java 中默认实<br>现好的线程池又有哪些呢？请比较它们的异同 22. 如何在 Java 线程池中提交线程？</li><li>什么是 Java 的内存模型，Java 中各个线程是怎么彼此看到对方的变量的？</li><li>请谈谈 volatile 有什么特点，为什么它能保证变量对所有线程的可见性？</li><li>既然 volatile 能够保证线程间的变量可见性，是不是就意味着基于 volatile <br>变量的运算就是并发安全的？</li><li>请对比下 volatile 对比 Synchronized 的异同。</li><li>请谈谈 ThreadLocal 是怎么解决并发安全的？</li><li>很多人都说要慎用 ThreadLocal，谈谈你的理解，使用 ThreadLocal 需要注<br>意些什么？<br><strong>四、Spring 面试专题</strong></li><li>什么是 Spring 框架？Spring 框架有哪些主要模块？</li><li>使用 Spring 框架能带来哪些好处？</li><li>什么是控制反转(IOC)？什么是依赖注入？</li><li>请解释下 Spring 框架中的 IoC？</li><li>BeanFactory 和 ApplicationContext 有什么区别？</li><li>Spring 有几种配置方式？</li><li>如何用基于 XML 配置的方式配置 Spring？</li><li>如何用基于 Java 配置的方式配置 Spring？</li><li>怎样用注解的方式配置 Spring？</li><li>请解释 Spring Bean 的生命周期？11. Spring Bean 的作用域之间有什么区别？</li><li>什么是 Spring inner beans？</li><li>Spring 框架中的单例 Beans 是线程安全的么？</li><li>请举例说明如何在 Spring 中注入一个 Java Collection？</li><li>如何向 Spring Bean 中注入一个 Java.util.Properties？</li><li>请解释 Spring Bean 的自动装配？</li><li>请解释自动装配模式的区别？</li><li>如何开启基于注解的自动装配？</li><li>请举例解释@Required 注解？</li><li>请举例解释@Autowired 注解？</li><li>请举例说明@Qualifier 注解？</li><li>构造方法注入和设值注入有什么区别？</li><li>Spring 框架中有哪些不同类型的事件？</li><li>FileSystemResource 和 ClassPathResource 有何区别？</li><li>Spring 框架中都用到了哪些设计模式？<br><strong>五、设计模式</strong></li><li>请列举出在 JDK 中几个常用的设计模式？</li><li>什么是设计模式？你是否在你的代码里面使用过任何设计模式？</li><li>Java 中什么叫单例设计模式？请用 Java 写出线程安全的单例模式</li><li>在 Java 中，什么叫观察者设计模式（observer design pattern）？5. 使用工厂模式最主要的好处是什么？在哪里使用？</li><li>举一个用 Java 实现的装饰模式(decorator design pattern)？它是作用于对<br>象层次还是类</li><li>层次？</li><li>在 Java 中，为什么不允许从静态方法中访问非静态变量？</li><li>设计一个 ATM 机，请说出你的设计思路？</li><li>在 Java 中，什么时候用重载，什么时候用重写？</li><li>举例说明什么情况下会更倾向于使用抽象类而不是接口<br><strong>六、Springboot 面试专题</strong></li><li>什么是 Spring Boot？</li><li>Spring Boot 有哪些优点？</li><li>什么是 JavaConfig？</li><li>如何重新加载 Spring Boot 上的更改，而无需重新启动服务器？</li><li>Spring Boot 中的监视器是什么？</li><li>如何在 Spring Boot 中禁用 Actuator 端点安全性？</li><li>如何在自定义端口上运行 Spring Boot 应用程序？</li><li>什么是 YAML？</li><li>如何实现 Spring Boot 应用程序的安全性？</li><li>如何集成 Spring Boot 和 ActiveMQ？</li><li>如何使用 Spring Boot 实现分页和排序？12. 什么是 Swagger？你用 Spring Boot 实现了它吗？</li><li>什么是 Spring Profiles？</li><li>什么是 Spring Batch？</li><li>什么是 FreeMarker 模板？</li><li>如何使用 Spring Boot 实现异常处理？</li><li>您使用了哪些 starter maven 依赖项？</li><li>什么是 CSRF 攻击？</li><li>什么是 WebSockets？</li><li>什么是 AOP？</li><li>什么是 Apache Kafka？</li><li>我们如何监视所有 Spring Boot 微服务？<br><strong>七、Netty10 题</strong></li><li>BIO、NIO 和 AIO 的区别？</li><li>NIO 的组成？</li><li>Netty 的特点？</li><li>Netty 的线程模型？</li><li>TCP 粘包/拆包的原因及解决方法？</li><li>了解哪几种序列化协议？</li><li>如何选择序列化协议？</li><li>Netty 的零拷贝实现？9. Netty 的高性能表现在哪些方面？</li><li>NIOEventLoopGroup 源码？<br><strong>八、Redis</strong></li><li>什么是 redis?</li><li>Reids 的特点</li><li>Redis 支持的数据类型</li><li>Redis 是单进程单线程的</li><li>虚拟内存</li><li>Redis 锁</li><li>读写分离模型</li><li>数据分片模型</li><li>Redis 的回收策略</li><li>使用 Redis 有哪些好处？</li><li>redis 相比 memcached 有哪些优势？4</li><li>redis 常见性能问题和解决方案</li><li>MySQL 里有 2000w 数据，redis 中只存 20w 的数据，如何保证 redis 中的数<br>据都是热点数据 245</li><li>Memcache 与 Redis 的区别都有哪些？</li><li>Redis 常见的性能问题都有哪些？如何解决？</li><li>Redis 最适合的场景</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>百度内部级别和薪资待遇</title>
      <link href="/2021/03/06/qk5ehk/"/>
      <url>/2021/03/06/qk5ehk/</url>
      
        <content type="html"><![CDATA[<h3 id="百度内部级别和薪资待遇"><a href="#百度内部级别和薪资待遇" class="headerlink" title="百度内部级别和薪资待遇"></a>百度内部级别和薪资待遇</h3><h4 id="级别划分："><a href="#级别划分：" class="headerlink" title="级别划分："></a>级别划分：</h4><p>不同职能分为不同序列，各个序列从  1  到  12  不等。<br>不同序列的话语权和地位从高到低是：m(管理层)&gt;t (研发)&gt;p(产品)&gt;p(运营)=u(设  <br>计)&gt;b(商务市场等)。<br>只有  m  有管人的权限。每个序列内，一般应届生入职就是  3  到  5  相当于一线小领导，<br>6  就是比较<br>高级的人才，7  以上很了不起。全公司最高的  p  是  12，只有一个，跻身  est aff。<br>百度的薪资架构分成三条线：<br>第一条：P  级序列，主要针对产品经理和产品运营人员。<br>第二条：T  级序列，技术岗位。还有很奇葩的  S  级，即支持部门，级别和  T  级是一样<br>的，只不过升级非常难，主要是公共、行政、渠道等等。<br>技术岗位为  T  序列。T1-T12。<br>T1  为低端岗位，T2-助理，T3-专员，T4-高级工程师，T5-资深工程师<br>T6-技术专家，T7-高级专家，T8-资深专家，T9-研究员，T10  技术总监，T11  首席科<br>学家。<br>第三条：M  级序列，管理层。从一到五分成九级。<br>M1.1 M1.2 M2.1 M2.2 M3.1 M3.2 M4.1 M4.2 M5<br>最低的是  M1.1，至少是部门二把手了，李明远是  M3.2，以前的汤和松都是这个级别，<br>李彦宏是唯一的  M5，其实从  M3  开始就有机会加入  E-St aff ，类似于阿里的合伙人会<br>议，属于最高战略决策层。</p><h4 id="薪资结构："><a href="#薪资结构：" class="headerlink" title="薪资结构："></a>薪资结构：</h4><p>*<em><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1615010976309-fd9ac210-fb8c-4f4a-8cd7-abd94955be95.png#align=left&display=inline&height=263&originHeight=526&originWidth=1720&size=298568&status=done&style=none&width=860" alt="image.png"><br>月薪 ×14.6（12+0.6+2），其他岗位月薪 ×14 **薪资水平：\</em>*<br>注：关于薪酬，百度的薪酬与职级已经没“太多挂钩”。关于股票期权，T5  给的可能<br>性很小， 很少见；T6  不是全部都有。<br>入职时，起薪倒挂。这个仅限于社会招聘。这意味着，除非是公司花大力气挖你，不<br>然你基本没什么议价能力。原来有多少工资，到了这里，只要比原来的工资有一定增<br>幅(比如  10%)，那 么  hr  就基本不会再让步。<br>入职后，工资每年有一次普涨的机会，在  q1，三月调整，四月公布。一般来说，普涨<br>的幅度在  15%。<br>这就意味着，很多时候税前工资涨了，税后工资却只变了几百块。表现特别好的(如晋<br>升或绩效高)，涨幅会更高。<br>但是，老板的大盘子总数是一定的，甲涨得多，就必然会有一个乙涨得少。</p><h4 id="晋升机制："><a href="#晋升机制：" class="headerlink" title="晋升机制："></a>晋升机制：</h4><p><strong>1、定期考核：</strong>每年进行两次统一的晋升计划考核；<br>入职后，每年有两次升职的机会，三月一次，九月一次。试用期(半年)未过的无法参<br>与职称评定。<br>每半年一次打绩效，由自己的直属领导打分。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1615011054108-30378b9f-b6c5-424d-bf47-6a9c0d7d9308.png#align=left&display=inline&height=329&originHeight=658&originWidth=1768&size=255851&status=done&style=none&width=884" alt="image.png"><br>（决定最终奖金数的系数有很多。即使绩效看着不错，但老板和  hr  也可以通过其他系<br>数调整奖金数）<br>晋升时，除非表现特别优异且老板格外卖力，一般很少有连升两级的情况出现。<br>百度是很唯  KPI（关键绩效指标）至上的，其次部门很核心，再次老大话语权比较高，<br>相对晋升容易些。<br>试用期结束后的第一次升职机会，需要先定级，比如进来是  4，这一次要确定一下确<br>实是  4， 也算占用了一次晋级机会了。<br>3-5  的晋升都比较容易，一般管理自己的  m2  通过就  ok  了。<br>5-6  的晋升需要  m3  推动。6  以上的晋升需要在公司范围内评比。<br><strong>2、不定期考核：</strong>有特殊贡献、表现突出的员工会被晋升<br>应届生足够细致用心、能力够强，入职一年多就可以从  T1  升到  T4。<br>T5  是分水岭，再升到  T5  得花好几年时间（看绩效，如果能力超强，给公司带来的收<br>益很大，可以不用很长时间就能晋升）<br>T6  升  T7  算是一个瓶颈，非常难，往上就更困难。相对来说级别高的话语权重，晋升<br>可能也会比较容易。<br><strong>一般情况是分  2  种：</strong><br><strong>1.自己提名</strong>，当你自己觉得已经具备下一  level  的素质，可以自己提名，提名后进入考<br>察期，主管设定考察期目标，考察通过顺利晋升，考察不通过维持原层级不变；<br><strong>2.主管提名</strong>，如果是主管提名，一般都是直接通过的，但是如果你现层级已经比较高<br>了，那就不是直接提名这么简单。<br>如果能升到  T7，基本上是  TL（Team Leader）的级别，写代码/直接做业务的时间就<br>很少了。<br>在百度，老员工的职位稳定，对业务驾轻就熟，手里的期权、股票数量远超新员工；<br>相比较而言新员⼯（级别低的）基本没有期权和股票，成长空间也是被压缩的，机会<br>较少、往⾼级别上升慢。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>美团点评算法面试题</title>
      <link href="/2021/03/06/hyt4zu/"/>
      <url>/2021/03/06/hyt4zu/</url>
      
        <content type="html"><![CDATA[<p><strong>美团点评算法面试题-2020</strong></p><ol><li>反转链表</li><li>n 个有序数组，找出 Top k</li><li>LeetCode11 water</li><li>给定一个数，通过调换顺序，找到比这个数大的最小数</li><li>leetcode55. 跳跃游戏</li><li>leetcode153. 寻找旋转排序数组中的最小值</li><li>给出一个 rand5()，实现一个分布均匀的 rand7()生成器</li><li>有一个点，向北走 5 公里、东走 10km、向南走 5 公里，回到原点。这样的<br>点有几个，证明。</li><li>有一个 n 克的物体、一个天平和若干砝码，这个天平没有刻度，试问最少用<br>多少个什么样的砝码可以将这个物体的质量称出。砝码的质量和个数自行指<br>定。</li><li>两个有序数组，求中位数</li><li>两个有序数组，求中位数</li><li>阶乘后 0 的个数 leetcode 172</li><li>数组的最大连续子数组和。</li><li>写 topk 排序，以及分析时间复杂度</li><li>输入一个字符串，判断其是否是“（”和“）”的一一配对</li><li>2、合并两个排好序的链表。</li><li>一维数组[1,n],n 可以认为正无穷，然后输入无数个区间[a,b],保证 b&gt;a，求所有区间长度。</li><li>求 2^N 次方</li><li>如何使用ｒａｎｄ７（）生成ｒａｎｄ１０（）</li><li>最长递增序列</li><li>五个外卖，先取后送，一共十个点，有多少种排列组合情况</li><li>有一个整数数组，请你根据快速排序的思路，找出数组中第 K 大的数。<br>给定一个整数数组 a,同时给定它的大小 n 和要找的 K(K 在 1 到 n 之间)，请<br>返回第 K 大的数，保证答案存在。</li><li>给出一个有 n 个整数的数组 S，在 S 中找到三个整数 a, b, c，找到所有使得<br>a + b + c = 0 的三元组。</li><li>实现观察者模式。</li><li>有一个机器人的位于一个 m × n 个网格左上角。<br>机器人每一时刻只能向下或者向右移动一步。机器人试图达到网格的右下角。<br>问有多少条不同的路径？</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>200. 岛屿数量</title>
      <link href="/2021/03/04/migggh/"/>
      <url>/2021/03/04/migggh/</url>
      
        <content type="html"><![CDATA[<h4 id="200-岛屿数量"><a href="#200-岛屿数量" class="headerlink" title="200. 岛屿数量"></a><a href="https://leetcode-cn.com/problems/number-of-islands/">200. 岛屿数量</a></h4><p>难度中等 1006<br>给你一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。<br>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。<br>此外，你可以假设该网格的四条边均被水包围。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>grid = [<br>  [“1”,”1”,”1”,”1”,”0”],<br>  [“1”,”1”,”0”,”1”,”0”],<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“0”,”0”,”0”,”0”,”0”]<br>]<br><strong>输出：</strong>1</p><p><strong>示例 2：</strong><br><strong>输入：</strong>grid = [<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“0”,”0”,”1”,”0”,”0”],<br>  [“0”,”0”,”0”,”1”,”1”]<br>]<br><strong>输出：</strong>3</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">int</span> nr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// int nr = grid.length;</span>        <span class="token comment" spellcheck="true">// int nc = grid[0].length;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> c <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> r <span class="token operator">>=</span> nr <span class="token operator">||</span> c <span class="token operator">>=</span> nc <span class="token operator">||</span> grid<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        grid<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清零0</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//四个方向遍历</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numIslands</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>grid <span class="token operator">==</span> null <span class="token operator">||</span> grid<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        nr <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int</span>        nc <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//int</span>        <span class="token keyword">int</span> num_islands <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> nr<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> nc<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token operator">++</span>num_islands<span class="token punctuation">;</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num_islands<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>深度优先搜索</strong></p><p>我们可以将二维网格看成一个无向图，竖直或水平相邻的 1 之间有边相连。<br>为了求出岛屿的数量，我们可以扫描整个二维网格。如果一个位置为 1，则以其为起始节点开始进行深度优先搜索。在深度优先搜索的过程中，每个搜索到的 1 都会被重新标记为 0。<br><strong>最终岛屿的数量就是我们进行深度优先搜索的次数</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>5. 最长回文子串</title>
      <link href="/2021/03/04/yq5mru/"/>
      <url>/2021/03/04/yq5mru/</url>
      
        <content type="html"><![CDATA[<h4 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">5. 最长回文子串</a></h4><p>难度中等 3273<br>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>s = “babad”<br><strong>输出：</strong>“bab”<br><strong>解释：</strong>“aba” 同样是符合题意的答案。</p><p><strong>示例 2：</strong><br><strong>输入：</strong>s = “cbbd”<br><strong>输出：</strong>“bb”</p><p><strong>示例 3：</strong><br><strong>输入：</strong>s = “a”<br><strong>输出：</strong>“a”</p><p><strong>示例 4：</strong><br><strong>输入：</strong>s = “ac”<br><strong>输出：</strong>“a”</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> String <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        String ans <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>len<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">+</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> len<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> len  <span class="token operator">></span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    ans <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[) 左开右闭 长度是 j-i=len.</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>199. 二叉树的右视图</title>
      <link href="/2021/03/04/siwpn9/"/>
      <url>/2021/03/04/siwpn9/</url>
      
        <content type="html"><![CDATA[<h3 id="199-二叉树的右视图"><a href="#199-二叉树的右视图" class="headerlink" title="199. 二叉树的右视图"></a><a href="https://leetcode-cn.com/problems/binary-tree-right-side-view/">199. 二叉树的右视图</a></h3><p>难度中等 416<br>给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。<br><strong>示例:</strong><br><strong>输入:</strong> [1,2,3,null,5,null,4]<br><strong>输出:</strong> [1, 3, 4]<br><strong>解释:</strong><br>   1            &lt;—<br> /   <br>2     3         &lt;—<br> \     <br>  5     4       &lt;—</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">rightSideView</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> rightmostValueAtDepth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max_depth <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> nodeQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> depthQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nodeQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        depthQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>nodeQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            TreeNode node <span class="token operator">=</span> nodeQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价removeFirst</span>            <span class="token keyword">int</span>     depth <span class="token operator">=</span> depthQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 维护二叉树的最大深度</span>                max_depth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max_depth<span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 由于每一层最后一个访问到的节点才是我们要的答案，因此不断更新对应深度的信息即可</span>                rightmostValueAtDepth<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                nodeQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                nodeQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                depthQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                depthQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> rightView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> depth <span class="token operator">&lt;=</span> max_depth<span class="token punctuation">;</span> depth<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// =</span>            rightView<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rightmostValueAtDepth<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>depth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rightView<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h4 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">rightSideView</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将当前层的最后一个节点放入结果列表</span>                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：sweetiee链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>binary<span class="token operator">-</span>tree<span class="token operator">-</span>right<span class="token operator">-</span>side<span class="token operator">-</span>view<span class="token operator">/</span>solution<span class="token operator">/</span>jian<span class="token operator">-</span>dan<span class="token operator">-</span>bfsdfs<span class="token operator">-</span>bi<span class="token operator">-</span>xu<span class="token operator">-</span>miao<span class="token operator">-</span>dong<span class="token operator">-</span>by<span class="token operator">-</span>sweetiee</code></pre><p>####</p><hr><h4 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h4><pre class=" language-java"><code class="language-java">    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">rightSideView</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从根节点开始访问，根节点深度是0</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先访问 当前节点，再递归地访问 右子树 和 左子树。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">==</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果当前节点所在深度还没有出现在res里，说明在该深度下当前节点是第一个被访问的节点，因此将当前节点加入res中。</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        depth<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">///先添加又节点,执行左节点时 不满足if depth== 条件。</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> depth<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：sweetiee链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>binary<span class="token operator">-</span>tree<span class="token operator">-</span>right<span class="token operator">-</span>side<span class="token operator">-</span>view<span class="token operator">/</span>solution<span class="token operator">/</span>jian<span class="token operator">-</span>dan<span class="token operator">-</span>bfsdfs<span class="token operator">-</span>bi<span class="token operator">-</span>xu<span class="token operator">-</span>miao<span class="token operator">-</span>dong<span class="token operator">-</span>by<span class="token operator">-</span>sweetiee<span class="token operator">/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>912. 排序数组</title>
      <link href="/2021/03/04/sxaxdm/"/>
      <url>/2021/03/04/sxaxdm/</url>
      
        <content type="html"><![CDATA[<h1 id="912-排序数组"><a href="#912-排序数组" class="headerlink" title="912. 排序数组"></a><a href="https://leetcode-cn.com/problems/sort-an-array/">912. 排序数组</a></h1><p>难度中等<br>给你一个整数数组 <code>nums</code>，请你将该数组升序排列。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>nums = [5,2,3,1]<br><strong>输出：</strong>[1,2,3,5]</p><p><strong>示例 2：</strong><br><strong>输入：</strong>nums = [5,1,1,2,0,0]<br><strong>输出：</strong>[0,0,1,1,2,5]</p><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>每一轮选择最小元素交换到未排定部分的开头。ok</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 选择排序：每一轮选择最小元素交换到未排定部分的开头</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环不变量：[0, i) 有序，且该区间里所有元素就是最终排定的样子</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 选择区间 [i, len - 1] 里最小的元素的索引，交换到下标 i</span>            <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> minIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index1<span class="token punctuation">,</span> <span class="token keyword">int</span> index2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>####</p><hr><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>比较两个相邻的元素，将值大的元素交换到右边【超时】。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 冒泡排序：比较两个相邻的元素，将值大的元素交换到右边。</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [5,2,3,1] i索引到3即length-2时 j比较的是3，1 length-2，length-1.</span>            <span class="token comment" spellcheck="true">// 先默认数组是有序的，只要发生一次交换，就必须进行下一轮比较，</span>            <span class="token comment" spellcheck="true">// 如果在内层循环中，都没有执行一次交换操作，说明此时数组已经是升序数组</span>            <span class="token keyword">boolean</span> sorted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sorted<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将数组整理成堆</span>        <span class="token function">heapify</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环不变量：区间 [0, i] 堆有序</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 把堆顶元素（当前最大）交换到数组末尾</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 逐步减少堆有序的部分</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 下标 0 位置下沉操作，使得区间 [0, i] 堆有序</span>            <span class="token function">siftDown</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 将数组整理成堆（堆有序）     *     * @param nums     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 只需要从 i = (len - 1) / 2 这个位置开始逐层下移</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">siftDown</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param nums     * @param k    当前下沉元素的下标     * @param end  [0, end] 是 nums 的有效部分     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> end <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index1<span class="token punctuation">,</span> <span class="token keyword">int</span> index2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><h4 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h4><pre class=" language-java"><code class="language-java">     <span class="token comment" spellcheck="true">// 快速排序 1：基本快速排序</span>    <span class="token comment" spellcheck="true">/**     * 列表大小等于或小于该大小，将优先于 quickSort 使用插入排序     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INSERTION_SORT_THRESHOLD <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Random RANDOM <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 小区间使用插入排序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&lt;=</span> INSERTION_SORT_THRESHOLD<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">insertionSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pIndex <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> pIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> pIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 对数组 nums 的子区间 [left, right] 使用插入排序     *     * @param nums  给定数组     * @param left  左边界，能取到     * @param right 右边界，能取到     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> left <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> randomIndex <span class="token operator">=</span> RANDOM<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> left<span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> randomIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 基准值</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lt <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环不变量：</span>        <span class="token comment" spellcheck="true">// all in [left + 1, lt] &lt; pivot</span>        <span class="token comment" spellcheck="true">// all in [lt + 1, i) >= pivot</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                lt<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> lt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> lt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lt<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index1<span class="token punctuation">,</span> <span class="token keyword">int</span> index2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>基本思路</strong>：快速排序每一次都排定一个元素（这个元素呆在了它最终应该呆的位置），然后递归地去排它左边的部分和右边的部分，依次进行下去，直到数组有序；<br><strong>算法思想</strong>：分而治之（分治思想），与「归并排序」不同，「快速排序」在「分」这件事情上不想「归并排序」无脑地一分为二，而是采用了 partition 的方法（书上，和网上都有介绍，就不展开了），因此就没有「合」的过程。<br><strong>实现细节</strong>（注意事项）：（针对特殊测试用例：顺序数组或者逆序数组）一定要随机化选择切分元素（pivot），否则在输入数组是有序数组或者是逆序数组的时候，快速排序会变得非常慢（等同于冒泡排序或者「选择排序」）；<br><strong>复杂度分析：</strong><br>时间复杂度：O(NlogN)，这里 N 是数组的长度；<br>空间复杂度：O(logN)，这里占用的空间主要来自递归函数的栈空间。</p><hr><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 归并排序</span>    <span class="token comment" spellcheck="true">/**     * 列表大小等于或小于该大小，将优先于 mergeSort 使用插入排序     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> INSERTION_SORT_THRESHOLD <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 对数组 nums 的子区间 [left, right] 进行归并排序     *     * @param nums     * @param left     * @param right     * @param temp  用于合并两个有序数组的辅助数组，全局使用一份，避免多次创建和销毁     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 小区间使用插入排序</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">&lt;=</span> INSERTION_SORT_THRESHOLD<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">insertionSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Java 里有更优的写法，在 left 和 right 都是大整数时，即使溢出，结论依然正确</span>        <span class="token comment" spellcheck="true">// int mid = (left + right) >>> 1;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果数组的这个子区间本身有序，无需合并</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">mergeOfTwoSortedArray</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> right<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 对数组 arr 的子区间 [left, right] 使用插入排序     *     * @param arr   给定数组     * @param left  左边界，能取到     * @param right 右边界，能取到     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> left <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 合并两个有序数组：先把值复制到临时数组，再合并回去     *     * @param nums     * @param left     * @param mid   [left, mid] 有序，[mid + 1, right] 有序     * @param right     * @param temp  全局使用的临时数组     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mergeOfTwoSortedArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> temp<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> left<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 注意写成 &lt; 就丢失了稳定性（相同元素原来靠前的排序以后依然靠前）</span>                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// temp[i] > temp[j]</span>                nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>基本思路：借助额外空间，合并两个有序数组，得到更长的有序数组。例如：「力扣」第 88 题：合并两个有序数组。<br>算法思想：分而治之（分治思想）。「分而治之」思想的形象理解是「曹冲称象」、MapReduce，在一定情况下可以并行化。<br>个人建议：「归并排序」是理解「递归思想」的非常好的学习材料，大家可以通过理解：递归完成以后，合并两个有序数组的这一步骤，想清楚程序的执行流程。即「递归函数执行完成以后，我们还可以做点事情」。因此，「归并排序」我个人觉得非常重要，一定要掌握。</p><hr><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 插入排序：稳定排序，在接近有序的情况下，表现优异</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环不变量：将 nums[i] 插入到区间 [0, i) 使之成为有序数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 先暂存这个元素，然后之前元素逐个后移，留出空位</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 注意边界 j > 0</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>优化</strong>：「将一个数字插入一个有序的数组」这一步，可以不使用逐步交换，使用先赋值给「临时变量」，然后「适当的元素」后移，空出一个位置，最后把「临时变量」赋值给这个空位的策略（就是上面那张图的意思）。编码的时候如果不小心，可能会把数组的值修改，建议多调试；<br><strong>特点</strong>：「插入排序」可以提前终止内层循环（体现在 nums[j - 1] &gt; temp 不满足时），在数组「几乎有序」的前提下，「插入排序」的时间复杂度可以达到 O(N)；<br>由于「插入排序」在「几乎有序」的数组上表现良好，特别地，在「短数组」上的表现也很好。因为「短数组」的特点是：每个元素离它最终排定的位置都不会太远。为此，在小区间内执行排序任务的时候，可以转向使用「插入排序」。</p><hr><p><a href="https://leetcode-cn.com/problems/sort-an-array/solution/fu-xi-ji-chu-pai-xu-suan-fa-java-by-liweiwei1419/">几大基础排序</a><br><a href="https://leetcode-cn.com/problems/sort-an-array/solution/fu-xi-ji-chu-pai-xu-suan-fa-java-by-liweiwei1419/">https://leetcode-cn.com/problems/sort-an-array/solution/fu-xi-ji-chu-pai-xu-suan-fa-java-by-liweiwei1419/</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>103. 二叉树的锯齿形层序遍历--🀄️</title>
      <link href="/2021/03/04/adauml/"/>
      <url>/2021/03/04/adauml/</url>
      
        <content type="html"><![CDATA[<h4 id="103-二叉树的锯齿形层序遍历"><a href="#103-二叉树的锯齿形层序遍历" class="headerlink" title="103. 二叉树的锯齿形层序遍历"></a><a href="https://leetcode-cn.com/problems/binary-tree-zigzag-level-order-traversal/">103. 二叉树的锯齿形层序遍历</a></h4><p>难度中等 402<br>给定一个二叉树，返回其节点值的锯齿形层序遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。<br>例如：<br>给定二叉树 <code>[3,9,20,null,null,15,7]</code>,<br>    3<br>   / <br>  9  20<br>    /  <br>   15   7</p><p>返回锯齿形层序遍历如下：<br>[<br>  [3],<br>  [20,9],<br>  [15,7]<br>]</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">zigzagLevelOrder1</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> nodeQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isOrderLeft <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>nodeQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> levelList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> nodeQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode curNode <span class="token operator">=</span> nodeQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isOrderLeft<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    levelList<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    levelList<span class="token punctuation">.</span><span class="token function">offerFirst</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>levelList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            isOrderLeft <span class="token operator">=</span> <span class="token operator">!</span>isOrderLeft<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">zigzagLevelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> nodeQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isOrderLeft <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>nodeQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Deque&lt;Integer> levelList = new LinkedList&lt;Integer>();</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> levelList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> nodeQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode curNode <span class="token operator">=</span> nodeQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                levelList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// if (isOrderLeft) &amp;#123;</span>                <span class="token comment" spellcheck="true">//     levelList.offerLast(curNode.val);</span>                <span class="token comment" spellcheck="true">// &amp;#125; else &amp;#123;</span>                <span class="token comment" spellcheck="true">//     levelList.offerFirst(curNode.val);</span>                <span class="token comment" spellcheck="true">// &amp;#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// ans.add(new ArrayList&lt;Integer>(levelList));</span>            <span class="token comment" spellcheck="true">//isOrderLeft = !isOrderLeft;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                Collections<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>levelList<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>levelList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>179. 最大数</title>
      <link href="/2021/03/04/kgxa5s/"/>
      <url>/2021/03/04/kgxa5s/</url>
      
        <content type="html"><![CDATA[<h4 id="179-最大数"><a href="#179-最大数" class="headerlink" title="179. 最大数"></a><a href="https://leetcode-cn.com/problems/largest-number/">179. 最大数</a></h4><p>难度中等 477<br>给定一组非负整数 <code>nums</code>，重新排列它们每个数字的顺序（每个数字不可拆分）使之组成一个最大的整数。<br><strong>注意：</strong>输出结果可能非常大，所以你需要返回一个字符串而不是整数。</p><p><strong>示例 1：</strong><br><strong>输入<code>：</code></strong><code>nums = [10,2]</code><br><strong>输出：</strong><code>&quot;210&quot;</code><br><strong>示例  2：</strong><br><strong>输入<code>：</code></strong><code>nums = [3,30,34,5,9]</code><br><strong>输出：</strong><code>&quot;9534330&quot;</code><br><strong>示例 3：</strong><br><strong>输入<code>：</code>**nums = [1]<br>**输出：</strong>“1”</p><p><strong>示例 4：</strong><br><strong>输入<code>：</code>**nums = [10]<br>**输出：</strong>“10”</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">LargerNumberComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span> String b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String order1 <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            String order2 <span class="token operator">=</span> b <span class="token operator">+</span> a<span class="token punctuation">;</span>           <span class="token keyword">return</span> order2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>order1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">largestNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Get input integers as strings.</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> asStrs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            asStrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串比较</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Sort strings according to custom comparator.</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>asStrs<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LargerNumberComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// If, after being sorted, the largest number is `0`, the entire number</span>        <span class="token comment" spellcheck="true">// is zero.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>asStrs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Build largest number from sorted array.</span>        String largestNumberStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String numAsStr <span class="token operator">:</span> asStrs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            largestNumberStr <span class="token operator">+=</span> numAsStr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数字很大需返回字符串</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> largestNumberStr<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 56 - I. 数组中数字出现的次数--🀄️</title>
      <link href="/2021/03/04/kew28c/"/>
      <url>/2021/03/04/kew28c/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-56-I-数组中数字出现的次数"><a href="#剑指-Offer-56-I-数组中数字出现的次数" class="headerlink" title="剑指 Offer 56 - I. 数组中数字出现的次数"></a><a href="https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/">剑指 Offer 56 - I. 数组中数字出现的次数</a></h4><p>难度中等 312<br>一个整型数组 <code>nums</code> 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是 O(n)，空间复杂度是 O(1)。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>nums = [4,1,4,6]<br><strong>输出：</strong>[1,6] 或 [6,1]</p><p><strong>示例 2：</strong><br><strong>输入：</strong>nums = [1,2,10,4,1,4,3,3]<br><strong>输出：</strong>[2,10] 或 [10,2]</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">singleNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ret <span class="token operator">^=</span> n<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> div <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>div <span class="token operator">&amp;</span> ret<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            div <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>div <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                a <span class="token operator">^=</span> n<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                b <span class="token operator">^=</span> n<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>a<span class="token punctuation">,</span> b<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>解析</strong></p><p>先对所有数字进行一次异或，得到两个出现一次的数字的异或值。</p><p>在异或结果中找到任意为 1 的位。</p><p>根据这一位对所有的数字进行分组。</p><p>在每个组内进行异或操作，得到两个数字。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题 02.01. 移除重复节点</title>
      <link href="/2021/03/03/rgsi0n/"/>
      <url>/2021/03/03/rgsi0n/</url>
      
        <content type="html"><![CDATA[<h4 id="面试题-02-01-移除重复节点"><a href="#面试题-02-01-移除重复节点" class="headerlink" title="面试题 02.01. 移除重复节点"></a><a href="https://leetcode-cn.com/problems/remove-duplicate-node-lcci/">面试题 02.01. 移除重复节点</a></h4><p>难度简单 90<br>编写代码，移除<strong>未排序链表</strong>中的重复节点。保留最开始出现的节点。<br><strong>示例 1:</strong><br>** 输入<strong>：[1, 2, 3, 3, 2, 1]<br>** 输出</strong>：[1, 2, 3]</p><p><strong>示例 2:</strong><br>** 输入<strong>：[1, 1, 1, 1, 2]<br>** 输出</strong>：[1, 2]</p><p><strong>提示：</strong></p><ol><li>链表长度在[0, 20000]范围内。</li><li>链表元素在[0, 20000]范围内。</li></ol><p><strong>进阶：</strong><br>如果不得使用临时缓冲区，该怎么解决？</p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> ListNode <span class="token function">removeDuplicateNodes</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> occurred <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        occurred<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 枚举前驱节点</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 当前待删除节点</span>            ListNode cur <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>occurred<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                pre<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        pre<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>15. 三数之和--🀄️</title>
      <link href="/2021/03/03/ra03u8/"/>
      <url>/2021/03/03/ra03u8/</url>
      
        <content type="html"><![CDATA[<h4 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15. 三数之和"></a><a href="https://leetcode-cn.com/problems/3sum/">15. 三数之和</a></h4><p>难度中等 3030<br>给你一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <em>a，b，c ，</em>使得 _a + b + c = _0 ？请你找出所有和为 <code>0</code> 且不重复的三元组。<br><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>nums = [-1,0,1,2,-1,-4]<br><strong>输出：</strong>[[-1,-1,2],[-1,0,1]]</p><p><strong>示例 2：</strong><br><strong>输入：</strong>nums = []<br><strong>输出：</strong>[]</p><p><strong>示例 3：</strong><br><strong>输入：</strong>nums = [0]<br><strong>输出：</strong>[]</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 枚举 a</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> first <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>first<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 需要和上一次枚举的数不相同</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>first <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// c 对应的指针初始指向数组的最右端</span>            <span class="token keyword">int</span> third <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 枚举 b</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> second <span class="token operator">=</span> first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> second <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>second<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 需要和上一次枚举的数不相同</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>second <span class="token operator">></span> first <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 需要保证 b 的指针在 c 的指针的左侧</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>second <span class="token operator">&lt;</span> third <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token operator">--</span>third<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果指针重合，随着 b 后续的增加</span>                <span class="token comment" spellcheck="true">// 就不会有满足 a+b+c=0 并且 b&lt;c 的 c 了，可以退出循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>second <span class="token operator">==</span> third<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>3sum<span class="token operator">/</span>solution<span class="token operator">/</span>san<span class="token operator">-</span>shu<span class="token operator">-</span>zhi<span class="token operator">-</span>he<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><p><strong>没太懂边界问题</strong></p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">///至少一个正数一个负数</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 枚举 a</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> first <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>first<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 需要和上一次枚举的数不相同</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>first <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// c 对应的指针初始指向数组的最右端</span>            <span class="token keyword">int</span> third <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 枚举 b</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> second <span class="token operator">=</span> first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> second <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>second<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 需要和上一次枚举的数不相同</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>second <span class="token operator">></span> first <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>second <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// >=</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 需要保证 b 的指针在 c 的指针的左侧</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>second <span class="token operator">&lt;</span> third <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// &lt;=</span>                    <span class="token operator">--</span>third<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果指针重合，随着 b 后续的增加</span>                <span class="token comment" spellcheck="true">// 就不会有满足 a+b+c=0 并且 b&lt;c 的 c 了，可以退出循环</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>second <span class="token operator">==</span> third<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/// ></span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 53 - II. 0～n-1中缺失的数字</title>
      <link href="/2021/03/03/we4l7q/"/>
      <url>/2021/03/03/we4l7q/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-53-II-0-～-n-1-中缺失的数字"><a href="#剑指-Offer-53-II-0-～-n-1-中缺失的数字" class="headerlink" title="剑指 Offer 53 - II. 0 ～ n-1 中缺失的数字"></a><a href="https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/">剑指 Offer 53 - II. 0 ～ n-1 中缺失的数字</a></h4><p>难度简单 110<br>一个长度为 n-1 的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围 0 ～ n-1 之内。在范围 0 ～ n-1 内的 n 个数字中有且只有一个数字不在该数组中，请找出这个数字。</p><p><strong>示例 1:</strong><br><strong>输入:</strong> [0,1,3]<br><strong>输出:</strong> 2.</p><p><strong>示例  2:</strong><br><strong>输入:</strong> [0,1,2,3,4,5,6,7,9]<br><strong>输出:</strong> 8.</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">missingNumber2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从左到右第一个nums[i] != i的i即为缺失的数</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//若数组遍历到末尾都无不符合的数，说明缺失的数是n</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> m<span class="token punctuation">)</span> i <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> j <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 作者：jyd</span>        <span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/que-shi-de-shu-zi-lcof/solution/mian-shi-ti-53-ii-0n-1zhong-que-shi-de-shu-zi-er-f/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>解析</p><p>排序数组中的搜索问题，首先想到 二分法 解决。<br>根据题意，数组可以按照以下规则划分为两部分。<br>左子数组： nums[i]=i ；<br>右子数组： nums[i] !=i ；<br>缺失的数字等于 “右子数组的首位元素” 对应的索引；因此考虑使用二分法查找 “右子数组的首位元素” 。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614784461729-9c5ccba0-6b00-46ff-833a-f0a21a0f18f7.png#align=left&display=inline&height=219&originHeight=374&originWidth=1166&size=154745&status=done&style=none&width=684" alt="image.png"></p><hr><p>终于过了</p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">///????[0] [1] [0,2,3] [0,1,3]</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// if(nums[j-1]!=j-1)&amp;#123;</span>        <span class="token comment" spellcheck="true">//     return j-1;</span>        <span class="token comment" spellcheck="true">// &amp;#125; //err</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> j<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> good </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>217. 存在重复元素</title>
      <link href="/2021/03/03/peaok7/"/>
      <url>/2021/03/03/peaok7/</url>
      
        <content type="html"><![CDATA[<h4 id="217-存在重复元素"><a href="#217-存在重复元素" class="headerlink" title="217. 存在重复元素"></a><a href="https://leetcode-cn.com/problems/contains-duplicate/">217. 存在重复元素</a></h4><p>难度简单 367<br>给定一个整数数组，判断是否存在重复元素。<br>如果存在一值在数组中出现至少两次，函数返回 <code>true</code> 。如果数组中每个元素都不相同，则返回 <code>false</code> 。</p><p><strong>示例 1:</strong><br><strong>输入:</strong> [1,2,3,1]<br><strong>输出:</strong> true<br><strong>示例 2:</strong><br><strong>输入: **[1,2,3,4]<br>**输出:</strong> false</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsDuplicate1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>146. LRU 缓存机制--🀄️</title>
      <link href="/2021/03/03/hp2vam/"/>
      <url>/2021/03/03/hp2vam/</url>
      
        <content type="html"><![CDATA[<h4 id="146-LRU-缓存机制"><a href="#146-LRU-缓存机制" class="headerlink" title="146. LRU 缓存机制"></a><a href="https://leetcode-cn.com/problems/lru-cache/">146. LRU 缓存机制</a></h4><p>难度中等 1209<br>运用你所掌握的数据结构，设计和实现一个   <a href="https://baike.baidu.com/item/LRU">LRU (最近最少使用) 缓存机制</a> 。<br>实现 <code>LRUCache</code> 类：</p><ul><li><code>LRUCache(int capacity)</code> 以正整数作为容量 <code>capacity</code> 初始化 LRU 缓存</li><li><code>int get(int key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> 。</li><li><code>void put(int key, int value)</code> 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</li></ul><p><strong>进阶</strong>：你是否可以在 <code>O(1)</code> 时间复杂度内完成这两种操作？</p><p><strong>示例：</strong><br><strong>输入</strong><br>[“LRUCache”, “put”, “put”, “get”, “put”, “get”, “put”, “get”, “get”, “get”]<br>[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]<br><strong>输出</strong><br>[null, null, null, 1, null, -1, null, -1, 3, 4]</p><p><strong>解释</strong><br>LRUCache lRUCache = new LRUCache(2);<br>lRUCache.put(1, 1); // 缓存是 {1=1}<br>lRUCache.put(2, 2); // 缓存是 {1=1, 2=2}<br>lRUCache.get(1);    // 返回 1<br>lRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}<br>lRUCache.get(2);    // 返回 -1 (未找到)<br>lRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}<br>lRUCache.get(1);    // 返回 -1 (未找到)<br>lRUCache.get(3);    // 返回 3<br>lRUCache.get(4);    // 返回 4</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> <span class="token number">0.75F</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> eldest<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> capacity<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>lru<span class="token operator">-</span>cache<span class="token operator">/</span>solution<span class="token operator">/</span>lruhuan<span class="token operator">-</span>cun<span class="token operator">-</span>ji<span class="token operator">-</span>zhi<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">DLinkedNode</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> key<span class="token punctuation">;</span>        <span class="token keyword">int</span> value<span class="token punctuation">;</span>        DLinkedNode prev<span class="token punctuation">;</span>        DLinkedNode next<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">DLinkedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">DLinkedNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> _key<span class="token punctuation">,</span> <span class="token keyword">int</span> _value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>key <span class="token operator">=</span> _key<span class="token punctuation">;</span> value <span class="token operator">=</span> _value<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> DLinkedNode<span class="token operator">></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> DLinkedNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">private</span> DLinkedNode head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用伪头部和伪尾部节点</span>        head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DLinkedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DLinkedNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        tail<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DLinkedNode node <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果 key 存在，先通过哈希表定位，再移到头部</span>        <span class="token function">moveToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DLinkedNode node <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果 key 不存在，创建一个新的节点</span>            DLinkedNode newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DLinkedNode</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 添加进哈希表</span>            cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 添加至双向链表的头部</span>            <span class="token function">addToHead</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>size<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> capacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果超出容量，删除双向链表的尾部节点</span>                DLinkedNode tail <span class="token operator">=</span> <span class="token function">removeTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 删除哈希表中对应的项</span>                cache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>tail<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">--</span>size<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果 key 存在，先通过哈希表定位，再修改 value，并移到头部</span>            node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token function">moveToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addToHead</span><span class="token punctuation">(</span>DLinkedNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> head<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//node</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//node</span>        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//next.pre</span>        head<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//3节点4个指针 //head.next</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">removeNode</span><span class="token punctuation">(</span>DLinkedNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> node<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">moveToHead</span><span class="token punctuation">(</span>DLinkedNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> DLinkedNode <span class="token function">removeTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        DLinkedNode res <span class="token operator">=</span> tail<span class="token punctuation">.</span>prev<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        <span class="token function">removeNode</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>lru<span class="token operator">-</span>cache<span class="token operator">/</span>solution<span class="token operator">/</span>lruhuan<span class="token operator">-</span>cun<span class="token operator">-</span>ji<span class="token operator">-</span>zhi<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><p>解析</p><p><strong>哈希表 + 双向链表</strong></p><p>算法</p><p>LRU 缓存机制可以通过哈希表辅以双向链表实现，我们用一个哈希表和一个双向链表维护所有在缓存中的键值对。<br>双向链表按照被使用的顺序存储了这些键值对，靠近头部的键值对是最近使用的，而靠近尾部的键值对是最久未使用的。<br>哈希表即为普通的哈希映射（HashMap），通过缓存数据的键映射到其在双向链表中的位置。<br>这样以来，我们首先使用哈希表进行定位，找出缓存项在双向链表中的位置，随后将其移动到双向链表的头部，即可在 O(1) 的时间内完成 get 或者 put 操作。<strong>具体的方法如下</strong>：</p><p>对于 get 操作，首先判断 key 是否存在：<br>如果 key 不存在，则返回 −1；<br>如果 key 存在，则 key 对应的节点是最近被使用的节点。通过哈希表定位到该节点在双向链表中的位置，并将其移动到双向链表的头部，最后返回该节点的值。<br>对于 put 操作，首先判断 key 是否存在：<br>如果 key 不存在，使用 key 和 value 创建一个新的节点，在双向链表的头部添加该节点，并将 key 和该节点添加进哈希表中。然后判断双向链表的节点数是否超出容量，如果超出容量，则删除双向链表的尾部节点，并删除哈希表中对应的项；<br>如果 key 存在，则与 get 操作类似，先通过哈希表定位，再将对应的节点的值更新为 value，并将该节点移到双向链表的头部。<br>上述各项操作中，访问哈希表的时间复杂度为 O(1)，在双向链表的头部添加节点、在双向链表的尾部删除节点的复杂度也为 O(1)。而将一个节点移到双向链表的头部，可以分成「删除该节点」和「在双向链表的头部添加节点」两步操作，都可以在 O(1) 时间内完成。</p><p>小贴士</p><p>在双向链表的实现中，使用一个伪头部（dummy head）和伪尾部（dummy tail）标记界限，这样在添加节点和删除节点的时候就不需要检查相邻的节点是否存在。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>86. 分隔链表--🀄️</title>
      <link href="/2021/03/03/vrdxzx/"/>
      <url>/2021/03/03/vrdxzx/</url>
      
        <content type="html"><![CDATA[<h4 id="86-分隔链表"><a href="#86-分隔链表" class="headerlink" title="86. 分隔链表"></a><a href="https://leetcode-cn.com/problems/partition-list/">86. 分隔链表</a></h4><p>难度中等 367<br>给你一个链表的头节点 <code>head</code> 和一个特定值_ _<code>x</code> ，请你对链表进行分隔，使得所有 <strong>小于</strong> <code>x</code> 的节点都出现在 <strong>大于或等于</strong> <code>x</code> 的节点之前。<br>你应当 <strong>保留</strong> 两个分区中每个节点的初始相对位置。</p><p><strong>示例 1：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/282505/1614774541210-607c1362-0062-41f3-ac9d-8625d2c0660b.jpeg#align=left&display=inline&height=111&originHeight=222&originWidth=662&size=0&status=done&style=none&width=331"><br><strong>输入：</strong>head = [1,4,3,2,5,2], x = 3<br><strong>输出</strong>：[1,2,2,4,3,5]</p><p><strong>示例 2：</strong><br><strong>输入：</strong>head = [2,1], x = 2<br><strong>输出</strong>：[1,2]</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> ListNode <span class="token function">partition</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode small <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode smallHead <span class="token operator">=</span> small<span class="token punctuation">;</span>        ListNode large <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode largeHead <span class="token operator">=</span> large<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                small<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>                small <span class="token operator">=</span> small<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小链表指针后移</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                large<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>                large <span class="token operator">=</span> large<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//大链表指针后移</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历主链表</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        large<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>        small<span class="token punctuation">.</span>next <span class="token operator">=</span> largeHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//小的指向大的变表头部</span>        <span class="token keyword">return</span> smallHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>解析</strong></p><p>只需维护两个链表 small 和 large 即可，small 链表按顺序存储所有小于 x 的节点，<br>large 链表按顺序存储所有大于等于 x 的节点。遍历完原链表后，我们只要将 small 链表尾节点指向<br>large 链表的头节点即能完成对链表的分隔。</p><p>为了实现上述思路，我们设 smallHead 和 largeHead 分别为两个链表的哑节点，即它们的<br>next 指针指向链表的头节点，这样做的目的是为了更方便地处理头节点为空的边界条件。同时设<br>small 和 large 节点指向当前链表的末尾节点。开始时<br>smallHead=small,largeHead=large。随后，从前往后遍历链表，判断当前链表的节点值是否小于<br>x，如果小于就将 small 的 next 指针指向该节点，否则将 large 的 next 指针指向该节点。</p><p>遍历结束后，我们将 large 的 next 指针置空，这是因为当前节点复用的是原链表的节点，而其 next 指针可能指向一个小于 x 的节点，我们需要切断这个引用。同时将 small 的 next 指针指向 largeHead 的 next 指针指向的节点，即真正意义上的 large 链表的头节点。最后返回 smallHead 的 next 指针即为我们要求的答案。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>92. 反转链表 II--🀄️</title>
      <link href="/2021/03/03/dq0abe/"/>
      <url>/2021/03/03/dq0abe/</url>
      
        <content type="html"><![CDATA[<h4 id="92-反转链表-II"><a href="#92-反转链表-II" class="headerlink" title="92. 反转链表 II"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list-ii/">92. 反转链表 II</a></h4><p>难度中等 690<br>反转从位置 <em>m</em> 到 <em>n</em> 的链表。请使用一趟扫描完成反转。<br><strong>说明:</strong><br>1 ≤ <em>m</em> ≤ <em>n</em> ≤ 链表长度。<br><strong>示例:</strong><br><strong>输入:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, <em>m</em> = 2, <em>n</em> = 4。<br><strong>输出:</strong> 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL。<br>todo</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> ListNode <span class="token function">reverseBetween</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode dmy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dmy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">int</span> delta <span class="token operator">=</span> n<span class="token operator">-</span>m<span class="token punctuation">;</span>        ListNode pre <span class="token operator">=</span> dmy<span class="token punctuation">,</span>tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//先定位出m节点和m之前的节点</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> tail<span class="token punctuation">;</span>            tail <span class="token operator">=</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            m<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>delta <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ListNode next <span class="token operator">=</span> tail<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            tail<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//tail一直不变，只要修改指针到next.next</span>            next<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//next.next指向pre的next，也就是最新的第m个位置</span>            pre<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新next为最新的第m个位置</span>            delta <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dmy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><p>todo</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//3段合并</span>    <span class="token keyword">public</span> ListNode <span class="token function">reverseBetween1</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> m <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ListNode guard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        guard<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode temp <span class="token operator">=</span> guard<span class="token punctuation">;</span>        ListNode prev <span class="token operator">=</span> guard<span class="token punctuation">;</span>        ListNode newNode <span class="token operator">=</span> null<span class="token punctuation">;</span>        ListNode tail <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> index <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ListNode tempNext <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                prev <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                tail <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                temp<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>                newNode <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>            temp <span class="token operator">=</span> tempNext<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        tail<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>        prev<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token keyword">return</span> guard<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 14- I. 剪绳子</title>
      <link href="/2021/03/03/bdcgvo/"/>
      <url>/2021/03/03/bdcgvo/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-14-I-剪绳子"><a href="#剑指-Offer-14-I-剪绳子" class="headerlink" title="剑指 Offer 14- I. 剪绳子"></a><a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/">剑指 Offer 14- I. 剪绳子</a></h4><p>难度中等 168<br>给你一根长度为 <code>n</code> 的绳子，请把绳子剪成整数长度的 <code>m</code> 段（m、n 都是整数，n&gt;1 并且 m&gt;1），每段绳子的长度记为 <code>k[0],k[1]...k[m-1]</code> 。请问 <code>k[0]*k[1]*...*k[m-1]</code> 可能的最大乘积是多少？例如，当绳子的长度是 8 时，我们把它剪成长度分别为 2、3、3 的三段，此时得到的最大乘积是 18。<br><strong>示例 1：</strong><br><strong>输入: **2<br>**输出: **1<br>**解释: **2 = 1 + 1, 1 × 1 = 1<br>**示例  2:</strong><br>**输入: **10<br>**输出: **36<br>**解释: **10 = 3 + 3 + 4, 3 × 3 × 4 = 36.</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">cuttingRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"dp["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">",i="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">",j="</span><span class="token operator">+</span>j<span class="token operator">+</span><span class="token string">",dp["</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>j <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">*</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">",dp["</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"]="</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>解析</strong><br><strong>动态规划</strong></p><p>这题用动态规划是比较好理解的：<br>我们想要求长度为 n 的绳子剪掉后的最大乘积，可以从前面比 n 小的绳子转移而来。<br>用一个 dp 数组记录从 0 到 n 长度的绳子剪掉后的最大乘积，也就是<strong>dp[i]表示长度为 i 的绳子剪成 m 段后的最大乘积，初始化 dp[2] = 1。</strong><br>我们先把绳子剪掉第一段（长度为 j），如果只剪掉长度为 1，对最后的乘积无任何增益，所以从长度为 2 开始剪，<br>剪了第一段后，剩下(i - j)长度可以剪也可以不剪。<strong>如果不剪的话长度乘积即为 j _ (i - j)；如果剪的话长度乘积即为 j _ dp[i - j]。取两者最大值 max(j _ (i - j), j _ dp[i - j])。</strong><br>第一段长度 j 可以取的区间为[2,i)，对所有 j 不同的情况取最大值，因此最终 dp[i]的转移方程为：<br><strong>dp[i] = max(dp[i], max(j _ (i - j), j _ dp[i - j]))。</strong><br><strong>最后返回 dp[n]即可。</strong></p><p>作者：edelweisskoko<br>链接：<a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/solution/jian-zhi-offer-14-i-jian-sheng-zi-huan-s-xopj/">https://leetcode-cn.com/problems/jian-sheng-zi-lcof/solution/jian-zhi-offer-14-i-jian-sheng-zi-huan-s-xopj/</a><br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614767517985-c3cc335c-77fc-43f5-afb0-63f7ffc728c4.png#align=left&display=inline&height=504&originHeight=1008&originWidth=1220&size=415103&status=done&style=none&width=610" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>43. 字符串相乘--🀄️</title>
      <link href="/2021/03/03/tmfpc2/"/>
      <url>/2021/03/03/tmfpc2/</url>
      
        <content type="html"><![CDATA[<h4 id="43-字符串相乘"><a href="#43-字符串相乘" class="headerlink" title="43. 字符串相乘"></a><a href="https://leetcode-cn.com/problems/multiply-strings/">43. 字符串相乘</a></h4><p>难度中等 574<br>给定两个以字符串形式表示的非负整数 <code>num1</code> 和 <code>num2</code>，返回 <code>num1</code> 和 <code>num2</code> 的乘积，它们的乘积也表示为字符串形式。<br><strong>示例 1:</strong><br><strong>输入:</strong> num1 = “2”, num2 = “3”<br><strong>输出:</strong> “6”<br><strong>示例  2:</strong><br><strong>输入:</strong> num1 = “123”, num2 = “456”<br><strong>输出:</strong> “56088”<br><strong>说明：</strong></p><ol><li><code>num1</code> 和 <code>num2</code> 的长度小于 110。</li><li><code>num1</code> 和 <code>num2</code> 只包含数字 <code>0-9</code>。</li><li><code>num1</code> 和 <code>num2</code> 均不以零开头，除非是数字 0 本身。</li><li><strong>不能使用任何标准库的大数类型（比如 BigInteger）</strong>或<strong>直接将输入转换为整数来处理</strong>。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">multiply</span><span class="token punctuation">(</span>String num1<span class="token punctuation">,</span> String num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">||</span> num2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ansArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最多位数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字母转数字 倒序</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> y <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                ansArr<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ansArr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> ansArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            ansArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进位处理</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> ansArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去掉前缀0</span>        StringBuffer ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> m <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ansArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 32 - III. 从上到下打印二叉树 III--🀄️</title>
      <link href="/2021/03/03/ho4g0u/"/>
      <url>/2021/03/03/ho4g0u/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-32-III-从上到下打印二叉树-III"><a href="#剑指-Offer-32-III-从上到下打印二叉树-III" class="headerlink" title="剑指 Offer 32 - III. 从上到下打印二叉树 III"></a><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">剑指 Offer 32 - III. 从上到下打印二叉树 III</a></h4><p>难度中等 76<br>请实现一个函数按照<strong>之字形</strong>顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。</p><p>例如:<br>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,<br>    3<br>   / <br>  9  20<br>    /  <br>   15   7</p><p>返回其层次遍历结果：<br>[<br>  [3],<br>  [20,9],<br>  [15,7]<br>]</p><p>好理解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> Collections<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：jyd链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>cong<span class="token operator">-</span>shang<span class="token operator">-</span>dao<span class="token operator">-</span>xia<span class="token operator">-</span>da<span class="token operator">-</span>yin<span class="token operator">-</span>er<span class="token operator">-</span>cha<span class="token operator">-</span>shu<span class="token operator">-</span>iii<span class="token operator">-</span>lcof<span class="token operator">/</span>solution<span class="token operator">/</span>mian<span class="token operator">-</span>shi<span class="token operator">-</span>ti<span class="token operator">-</span><span class="token number">32</span><span class="token operator">-</span>iii<span class="token operator">-</span>cong<span class="token operator">-</span>shang<span class="token operator">-</span>dao<span class="token operator">-</span>xia<span class="token operator">-</span>da<span class="token operator">-</span>yin<span class="token operator">-</span>er<span class="token operator">--</span><span class="token number">3</span><span class="token operator">/</span></code></pre><p>不太懂</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            LinkedList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> tmp<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 偶数层 -> 队列头部</span>                <span class="token keyword">else</span> tmp<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 奇数层 -> 队列尾部</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：jyd链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>cong<span class="token operator">-</span>shang<span class="token operator">-</span>dao<span class="token operator">-</span>xia<span class="token operator">-</span>da<span class="token operator">-</span>yin<span class="token operator">-</span>er<span class="token operator">-</span>cha<span class="token operator">-</span>shu<span class="token operator">-</span>iii<span class="token operator">-</span>lcof<span class="token operator">/</span>solution<span class="token operator">/</span>mian<span class="token operator">-</span>shi<span class="token operator">-</span>ti<span class="token operator">-</span><span class="token number">32</span><span class="token operator">-</span>iii<span class="token operator">-</span>cong<span class="token operator">-</span>shang<span class="token operator">-</span>dao<span class="token operator">-</span>xia<span class="token operator">-</span>da<span class="token operator">-</span>yin<span class="token operator">-</span>er<span class="token operator">--</span><span class="token number">3</span><span class="token operator">/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>113. 路径总和 II--🀄️</title>
      <link href="/2021/03/03/opmypf/"/>
      <url>/2021/03/03/opmypf/</url>
      
        <content type="html"><![CDATA[<h4 id="113-路径总和-II"><a href="#113-路径总和-II" class="headerlink" title="113. 路径总和 II"></a><a href="https://leetcode-cn.com/problems/path-sum-ii/">113. 路径总和 II</a></h4><p>难度中等 435<br>给你二叉树的根节点 <code>root</code> 和一个整数目标和 <code>targetSum</code> ，找出所有 <strong>从根节点到叶子节点</strong> 路径总和等于给定目标和的路径。<br><strong>叶子节点</strong> 是指没有子节点的节点。</p><p><strong>示例 1：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/282505/1614758699837-043f129a-befe-4813-83b4-d8c9edceb233.jpeg#align=left&display=inline&height=211&originHeight=421&originWidth=592&size=0&status=done&style=none&width=296"><br><strong>输入：</strong>root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22<br><strong>输出：</strong>[[5,4,11,2],[5,8,4,5]]</p><p><strong>示例 2：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/282505/1614758699913-93a91a5f-d392-47ff-89a1-a15ef83121d5.jpeg#align=left&display=inline&height=91&originHeight=181&originWidth=212&size=0&status=done&style=none&width=106"><br><strong>输入：</strong>root = [1,2,3], targetSum = 5<br><strong>输出：</strong>[]</p><p><strong>示例 3：</strong><br><strong>输入：</strong>root = [1,2], targetSum = 0<br><strong>输出：</strong>[]</p><pre class=" language-java"><code class="language-java">    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">pathSum</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">offerLast</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">-=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不满足的路径弹出.满足的不会执行到这里(子节点为空时就返回return了)。</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>解析</strong></p><p><strong>深度优先搜索</strong><br>思路及算法<br>我们可以采用深度优先搜索的方式，枚举每一条从根节点到叶子节点的路径。当我们遍历到叶子节点，且此时路径和恰为目标和时，我们就找到了一条满足条件的路径。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>530. 二叉搜索树的最小绝对差</title>
      <link href="/2021/03/03/hq68kg/"/>
      <url>/2021/03/03/hq68kg/</url>
      
        <content type="html"><![CDATA[<h4 id="530-二叉搜索树的最小绝对差"><a href="#530-二叉搜索树的最小绝对差" class="headerlink" title="530. 二叉搜索树的最小绝对差"></a><a href="https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/">530. 二叉搜索树的最小绝对差</a></h4><p>难度简单 233<br>给你一棵所有节点为非负值的二叉搜索树，请你计算树中任意两节点的差的绝对值的最小值。</p><p><strong>示例：</strong><br><strong>输入：</strong></p><p>1<br>    <br>     3<br>    /<br>   2</p><p><strong>输出：</strong><br>1</p><p><strong>解释：</strong><br>最小绝对差为 1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。</p><p><strong>提示：</strong></p><ul><li>树中至少有 2 个节点。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pre<span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMinimumDifference</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        pre <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//左</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> root<span class="token punctuation">.</span>val <span class="token operator">-</span> pre<span class="token punctuation">)</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//右</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>解析</strong><br>中序遍历<br>思路与算法<br>考虑对升序数组 a 求任意两个元素之差的绝对值的最小值，答案一定为相邻两个元素之差的最小值，即<br>ans= min{a[i+1]−a[i]}.<br>其中 n 为数组 a 的长度。其他任意间隔距离大于等于 2 的下标对 (i,j) 的元素之差一定大于下标对 (i,i+1) 的元素之差，故不需要再被考虑。<br>回到本题，本题要求二叉搜索树任意两节点差的绝对值的最小值，而我们知道二叉搜索树有个性质为二叉搜索树中序遍历得到的值序列是递增有序的，因此我们只要得到中序遍历后的值序列即能用上文提及的方法来解决。<br>朴素的方法是经过一次中序遍历将值保存在一个数组中再进行遍历求解，我们也可以在中序遍历的过程中用<br>pre 变量保存前驱节点的值，这样即能边遍历边更新答案，不再需要显式创建数组来保存，需要注意的是<br>pre 的初始值需要设置成任意负数标记开头，下文代码中设置为 −1。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>todo 剑指 Offer 59 - I. 滑动窗口的最大值</title>
      <link href="/2021/03/03/xbedsg/"/>
      <url>/2021/03/03/xbedsg/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="剑指-Offer-59-I-滑动窗口的最大值"><a href="#剑指-Offer-59-I-滑动窗口的最大值" class="headerlink" title="剑指 Offer 59 - I. 滑动窗口的最大值"></a><a href="https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/">剑指 Offer 59 - I. 滑动窗口的最大值</a></h4><p>难度简单 200<br>给定一个数组 <code>nums</code> 和滑动窗口的大小 <code>k</code>，请找出所有滑动窗口里的最大值。<br><strong>示例:</strong><br><strong>输入:</strong> <em>nums</em> = <code>[1,3,-1,-3,5,3,6,7]</code>, 和 <em>k</em> = 3<br>**输出: **<code>[3,3,5,5,6,7] </code><br>**解释: **</p><p>滑动窗口的位置                 最大值<br>—————        —–<br>[1  3  -1] -3  5  3  6  7       3<br> 1 [3  -1  -3] 5  3  6  7       3<br> 1  3 [-1  -3  5] 3  6  7       5<br> 1  3  -1 [-3  5  3] 6  7       5<br> 1  3  -1  -3 [5  3  6] 7       6<br> 1  3  -1  -3  5 [3  6  7]      7</p><p><strong>提示：</strong><br>你可以假设 *k *总是有效的，在输入数组不为空的情况下，1 ≤ k ≤  输入数组的大小。<br>注意：本题与主站 239 题相同：<a href="https://leetcode-cn.com/problems/sliding-window-maximum/">https://leetcode-cn.com/problems/sliding-window-maximum/</a></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> k<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> deque<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                deque<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除 deque 中对应的 nums[i-1]</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> deque<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                deque<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 保持 deque 递减</span>            deque<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记录窗口最大值</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><a href="https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/solution/mian-shi-ti-59-i-hua-dong-chuang-kou-de-zui-da-1-6/">https://leetcode-cn.com/problems/hua-dong-chuang-kou-de-zui-da-zhi-lcof/solution/mian-shi-ti-59-i-hua-dong-chuang-kou-de-zui-da-1-6/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>203. 移除链表元素</title>
      <link href="/2021/03/03/ulv9kz/"/>
      <url>/2021/03/03/ulv9kz/</url>
      
        <content type="html"><![CDATA[<h4 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203. 移除链表元素"></a><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">203. 移除链表元素</a></h4><p>难度简单 540<br>删除链表中等于给定值 <strong>_val _</strong>的所有节点。<br><strong>示例:</strong><br><strong>输入:</strong> 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, <em><strong>val</strong></em> = 6<br><strong>输出:</strong> 1-&gt;2-&gt;3-&gt;4-&gt;5.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode &amp;#123; *     int val; *     ListNode next; *     ListNode() &amp;#123;&amp;#125; *     ListNode(int val) &amp;#123; this.val = val; &amp;#125; *     ListNode(int val, ListNode next) &amp;#123; this.val = val; this.next = next; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">removeElements</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode sentinal<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sentinal<span class="token punctuation">.</span>next<span class="token operator">=</span>head<span class="token punctuation">;</span>        ListNode cur<span class="token operator">=</span>head<span class="token punctuation">;</span>        ListNode pre<span class="token operator">=</span>sentinal<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token operator">==</span>val<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                pre<span class="token punctuation">.</span>next<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pre<span class="token operator">=</span>cur<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sentinal<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>437. 路径总和 III--🀄️</title>
      <link href="/2021/03/03/gpc9sg/"/>
      <url>/2021/03/03/gpc9sg/</url>
      
        <content type="html"><![CDATA[<h4 id="437-路径总和-III"><a href="#437-路径总和-III" class="headerlink" title="437. 路径总和 III"></a><a href="https://leetcode-cn.com/problems/path-sum-iii/">437. 路径总和 III</a></h4><p>难度中等 763<br>给定一个二叉树，它的每个结点都存放着一个整数值。<br>找出路径和等于给定数值的路径总数。<br>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。<br>二叉树不超过 1000 个节点，且节点数值范围是 [-1000000,1000000] 的整数。<br><strong>示例：</strong><br>root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8</p><p>10<br>     /  <br>    <strong>5</strong>   <strong>-3</strong><br>   <strong>/</strong> <strong>**    *<em>\</em>*<br>  **3</strong>   <strong>2</strong>   <strong>11</strong><br> / \   *<em>\</em>*<br>3  -2   *<em>1\</em>*</p><p>返回 3。和等于 8 的路径有:</p><ol><li>5 -&gt; 3</li><li>5 -&gt; 2 -&gt; 1</li><li>-3 -&gt; 11.</li></ol><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">countPath</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token function">pathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token operator">+</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countPath</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> sum <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result <span class="token operator">+</span> <span class="token function">countPath</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>sum<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">countPath</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：Geralt_U链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>path<span class="token operator">-</span>sum<span class="token operator">-</span>iii<span class="token operator">/</span>solution<span class="token operator">/</span>437lu<span class="token operator">-</span>jing<span class="token operator">-</span>zong<span class="token operator">-</span>he<span class="token operator">-</span>iii<span class="token operator">-</span>di<span class="token operator">-</span>gui<span class="token operator">-</span>fang<span class="token operator">-</span>shi<span class="token operator">-</span>by<span class="token operator">-</span>ming<span class="token operator">-</span>zhi<span class="token operator">/</span></code></pre><p>解析</p><p>路径不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点） 。这就要求我们只需要去求三部分即可：<br>以当前节点作为头结点的路径数量<br>以当前节点的左孩子作为头结点的路径数量<br>以当前节点的右孩子作为头结点啊路径数量<br>将这三部分之和作为最后结果即可。<br>最后的问题是：我们应该如何去求以当前节点作为头结点的路径的数量？这里依旧是按照树的遍历方式模板，每到一个节点让 sum-root.val，并判断 sum 是否为 0，如果为零的话，则找到满足条件的一条路径。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>168. Excel表列名称</title>
      <link href="/2021/03/03/wye5f4/"/>
      <url>/2021/03/03/wye5f4/</url>
      
        <content type="html"><![CDATA[<h4 id="168-Excel-表列名称"><a href="#168-Excel-表列名称" class="headerlink" title="168. Excel 表列名称"></a><a href="https://leetcode-cn.com/problems/excel-sheet-column-title/">168. Excel 表列名称</a></h4><p>难度简单 317<br>给定一个正整数，返回它在 Excel 表中相对应的列名称。<br>例如，<br>    1 -&gt; A<br>    2 -&gt; B<br>    3 -&gt; C<br>    …<br>    26 -&gt; Z<br>    27 -&gt; AA<br>    28 -&gt; AB <br>    …</p><p><strong>示例 1:</strong><br><strong>输入:</strong> 1<br><strong>输出:</strong> “A”</p><p><strong>示例  2:</strong><br><strong>输入:</strong> 28<br><strong>输出:</strong> “AB”</p><p><strong>示例  3:</strong><br><strong>输入:</strong> 701<br><strong>输出:</strong> “ZY”.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">convertToTitle</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token string">'A'</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">26</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：windliang</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/excel-sheet-column-title/solution/xiang-xi-tong-su-de-si-lu-fen-xi-by-windliang-2/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614736149302-e6bbb373-d5c1-4fa6-b321-66c1334a9d82.png#align=left&display=inline&height=227&originHeight=454&originWidth=570&size=62731&status=done&style=none&width=285" alt="image.png"><br><a href="https://leetcode-cn.com/problems/excel-sheet-column-title/solution/xiang-xi-tong-su-de-si-lu-fen-xi-by-windliang-2/">https://leetcode-cn.com/problems/excel-sheet-column-title/solution/xiang-xi-tong-su-de-si-lu-fen-xi-by-windliang-2/</a><br><a href="https://leetcode-cn.com/problems/excel-sheet-column-title/solution/168-by-ikaruga/">https://leetcode-cn.com/problems/excel-sheet-column-title/solution/168-by-ikaruga/</a><br><a href="https://leetcode-cn.com/problems/excel-sheet-column-title/solution/guan-yu-n-de-li-jie-by-douya0808/">https://leetcode-cn.com/problems/excel-sheet-column-title/solution/guan-yu-n-de-li-jie-by-douya0808/</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>无标题</title>
      <link href="/2021/03/03/miaa3f/"/>
      <url>/2021/03/03/miaa3f/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>189. 旋转数组</title>
      <link href="/2021/03/03/gk9ggn/"/>
      <url>/2021/03/03/gk9ggn/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="189-旋转数组"><a href="#189-旋转数组" class="headerlink" title="189. 旋转数组"></a><a href="https://leetcode-cn.com/problems/rotate-array/">189. 旋转数组</a></h4><p>难度中等 893<br>给定一个数组，将数组中的元素向右移动 <code>k</code>_ <em>个位置，其中 <code>k</code></em> _是非负数。</p><p><strong>进阶：</strong></p><ul><li>尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。</li><li>你可以使用空间复杂度为  O(1) 的 **原地  **算法解决这个问题吗？</li></ul><p><strong>示例 1:</strong><br><strong>输入:</strong> nums = [1,2,3,4,5,6,7], k = 3<br><strong>输出:</strong> <code>[5,6,7,1,2,3,4]</code><br><strong>解释:</strong><br>向右旋转 1 步: <code>[7,1,2,3,4,5,6]</code><br>向右旋转 2 步: <code>[6,7,1,2,3,4,5]</code><br>向右旋转 3 步: <code>[5,6,7,1,2,3,4]</code><br><strong>示例  2:</strong><br><strong>输入：</strong>nums = [-1,-100,3,99], k = 2<br><strong>输出：</strong>[3,99,-1,-100]<br><strong>解释:</strong><br>向右旋转 1 步: [99,-1,-100,3]<br>向右旋转 2 步: [3,99,-1,-100]</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            newArr<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>newArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>反转法</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        k <span class="token operator">%=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            start <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            end <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614733676387-fb86ac52-0e63-4f6f-ad8f-66250cc8c834.png#align=left&display=inline&height=340&originHeight=680&originWidth=1314&size=239787&status=done&style=none&width=657" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>283. 移动零</title>
      <link href="/2021/03/03/nlrvsm/"/>
      <url>/2021/03/03/nlrvsm/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a><a href="https://leetcode-cn.com/problems/move-zeroes/">283. 移动零</a></h4><p>难度简单968<br>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。<br><strong>示例:</strong><br><strong>输入:</strong> <code>[0,1,0,3,12]</code><br><strong>输出:</strong> <code>[1,3,12,0,0]</code><br><strong>说明</strong>:</p><ol><li>必须在原数组上操作，不能拷贝额外的数组。</li><li>尽量减少操作次数。</li></ol><p>不太好理解</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>双指针</strong></p><p>思路及解法<br>使用双指针，左指针指向当前已经处理好的序列的尾部，右指针指向待处理序列的头部。<br>右指针不断向右移动，每次右指针指向非零数，则将左右指针对应的数交换，同时左指针右移。<br>注意到以下性质：<br>左指针左边均为非零数；<br>右指针左边直到左指针处均为零。<br>因此每次交换，都是将左指针的零与右指针的非零数交换，且非零数的相对顺序并未改变。</p><hr><p><strong>易理解</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moveZeroes1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> indexNow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> indexNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>indexNum<span class="token operator">&lt;</span>m<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>indexNum<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>indexNow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>indexNum<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">++</span>indexNum<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> indexNow<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>都知道是 0，还换啥？覆盖，后面补 0 就行了.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>198. 打家劫舍</title>
      <link href="/2021/03/03/bdveck/"/>
      <url>/2021/03/03/bdveck/</url>
      
        <content type="html"><![CDATA[<h4 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a><a href="https://leetcode-cn.com/problems/house-robber/">198. 打家劫舍</a></h4><p>难度中等 1295<br>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。<br>给定一个代表每个房屋存放金额的非负整数数组，计算你**  不触动警报装置的情况下  **，一夜之内能够偷窃到的最高金额。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>[1,2,3,1]<br><strong>输出：</strong>4<br><strong>解释：</strong>偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>      偷窃到的最高金额 = 1 + 3 = 4 。<br><strong>示例 2：</strong><br><strong>输入：</strong>[2,7,9,3,1]<br><strong>输出：</strong>12<br><strong>解释：</strong>偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。<br>      偷窃到的最高金额 = 2 + 9 + 1 = 12 。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不能连续</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>解析</strong><br>如果房屋数量大于两间，应该如何计算能够偷窃到的最高总金额呢？对于第 k (k&gt;2) 间房屋，有两个选项：<br>偷窃第 k 间房屋，那么就不能偷窃第 k−1 间房屋，偷窃总金额为前 k−2 间房屋的最高总金额与第 k 间房屋的金额之和。<br>不偷窃第 k 间房屋，偷窃总金额为前 k−1 间房屋的最高总金额。</p><hr><p><strong>？？？？？</strong></p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//？</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> first<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> second<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp<span class="token operator">=</span>second<span class="token punctuation">;</span>            second<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>second<span class="token punctuation">,</span>first<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            first<span class="token operator">=</span>temp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> second<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
          <category> mid </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>448. 找到所有数组中消失的数字</title>
      <link href="/2021/03/02/qphr1t/"/>
      <url>/2021/03/02/qphr1t/</url>
      
        <content type="html"><![CDATA[<h4 id="448-找到所有数组中消失的数字"><a href="#448-找到所有数组中消失的数字" class="headerlink" title="448. 找到所有数组中消失的数字"></a><a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/">448. 找到所有数组中消失的数字</a></h4><p>难度简单<br>给定一个范围在   1 ≤ a[i] ≤ <em>n</em> ( <em>n</em> = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。<br>找到所有在 [1, <em>n</em>] 范围之间没有出现在数组中的数字。<br>您能在不使用额外空间且时间复杂度为<em>O(n)*的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。<br>*</em>示例:**<br><strong>输入:</strong><br>[4,3,2,7,8,2,3,1]</p><p><strong>输出:</strong><br>[5,6]</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">findDisappearedNumbers1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+=</span> n<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>原地修改<br>思路及解法<br>我们可以用一个哈希表记录数组<br>nums 中的数字，由于数字范围均在 [1,n] 中，记录数字后我们再利用哈希表检查 [1,n] 中的每一个数是否出现，从而找到缺失的数字。<br>由于数字范围均在 [1,n] 中，我们也可以用一个长度为 n 的数组来代替哈希表。这一做法的空间复杂度是 O(n) 的。我们的目标是优化空间复杂度到 O(1)。<br>注意到 nums 的长度恰好也为 n，能否让 nums 充当哈希表呢？<br>由于 <strong>nums 的数字范围均在 [1,n] 中</strong>，我们可以利用这一范围之外的数字，来表达「是否存在」的含义。<br>具体来说，遍历 nums，每遇到一个数 x，就让 nums[x−1] 增加 n。由于 <strong>nums 中所有数均在 [1,n] 中，增加以后，这些数必然大于 n。</strong>最后我们遍历 nums，若 nums[i] 未大于 n，就说明没有遇到过数 i+1。这样我们就找到了缺失的数字。<br>注意，当我们遍历到某个位置时，其中的数可能已经被增加过，因此需要对 n 取模来还原出它本来的值.</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614692448239-fd77ab83-a85d-4c18-b21f-24cfcab7b31b.png#align=left&display=inline&height=531&originHeight=1062&originWidth=870&size=271570&status=done&style=none&width=435" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>169. 多数元素</title>
      <link href="/2021/03/02/xzqpk0/"/>
      <url>/2021/03/02/xzqpk0/</url>
      
        <content type="html"><![CDATA[<h4 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169. 多数元素"></a><a href="https://leetcode-cn.com/problems/majority-element/">169. 多数元素</a></h4><p>难度简单<br>给定一个大小为 <em>n *的数组，找到其中的多数元素。多数元素是指在数组中出现次数 *</em>大于** <code>⌊ n/2 ⌋</code> 的元素。<br>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><p><strong>示例  1：</strong><br><strong>输入：</strong>[3,2,3]<br><strong>输出：</strong>3<br><strong>示例  2：</strong><br><strong>输入：</strong>[2,2,1,1,1,2,2]<br><strong>输出：</strong>2</p><p><strong>进阶：</strong></p><ul><li>尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。</li></ul><p><strong>常规法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> <span class="token function">countNums</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>counts<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                counts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                counts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> counts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> counts<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> counts <span class="token operator">=</span> <span class="token function">countNums</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> majorityEntry <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> entry <span class="token operator">:</span> counts<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>majorityEntry <span class="token operator">==</span> null <span class="token operator">||</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> majorityEntry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                majorityEntry <span class="token operator">=</span> entry<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> majorityEntry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>排序</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><p><strong>投票算法</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Integer candidate <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                candidate <span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            count <span class="token operator">+=</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> candidate<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> candidate<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>majority<span class="token operator">-</span>element<span class="token operator">/</span>solution<span class="token operator">/</span>duo<span class="token operator">-</span>shu<span class="token operator">-</span>yuan<span class="token operator">-</span>su<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><p><strong>Boyer-Moore 投票算法</strong><br>思路<br><strong>如果我们把众数记为 +1，把其他数记为 −1，将它们全部加起来，显然和大于 0，从结果本身我们可以看出众数比其他数多。</strong><br>算法<br>Boyer-Moore 算法的本质和方法四中的分治十分类似。<br>我们首先给出 Boyer-Moore 算法的<strong>详细步骤</strong>：<br>我们维护一个候选众数 candidate 和它出现的次数 count。初始时 candidate 可以为任意值，count 为 0；<br>我们遍历数组 nums 中的所有元素，对于每个元素 x，在判断 x 之前，如果 count 的值为 0，我们先将 x 的值赋予 candidate，随后我们判断 x：<br>如果 x 与 candidate 相等，那么计数器 count 的值增加 1；<br>如果 x 与 candidate 不等，那么计数器 count 的值减少 1。<br>在遍历完成后，candidate 即为整个数组的众数。<br><strong>复杂度分析</strong><br>时间复杂度：O(n)。Boyer-Moore 算法只对数组进行了一次遍历。<br>空间复杂度：O(1)。Boyer-Moore 算法只需要常数级别的额外空间。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>674. 最长连续递增序列</title>
      <link href="/2021/03/02/thkuuh/"/>
      <url>/2021/03/02/thkuuh/</url>
      
        <content type="html"><![CDATA[<h4 id="674-最长连续递增序列"><a href="#674-最长连续递增序列" class="headerlink" title="674. 最长连续递增序列"></a><a href="https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/">674. 最长连续递增序列</a></h4><p>难度简单 172<br>给定一个未经排序的整数数组，找到最长且**  连续递增的子序列<strong>，并返回该序列的长度。<br>**连续递增的子序列</strong> 可以由两个下标 <code>l</code> 和 <code>r</code>（<code>l &lt; r</code>）确定，如果对于每个 <code>l &lt;= i &lt; r</code>，都有 <code>nums[i] &lt; nums[i + 1]</code> ，那么子序列 <code>[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]</code> 就是连续递增子序列。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>nums = [1,3,5,4,7]<br><strong>输出：</strong>3<br><strong>解释：</strong>最长连续递增序列是 [1,3,5], 长度为 3。<br>尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为 5 和 7 在原数组里被 4 隔开。</p><p><strong>示例 2：</strong><br><strong>输入：</strong>nums = [2,2,2,2,2]<br><strong>输出：</strong>1<br><strong>解释：</strong>最长连续递增序列是 [2], 长度为 1。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findLengthOfLCIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 求数组nums中，最长的递增子数组的长度</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// pre表示dp[i-1]: 必须以i-1位置结尾的递增子数组长度</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> cur <span class="token operator">+=</span> pre<span class="token punctuation">;</span>            ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span><span class="token comment" spellcheck="true">///向下传递</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这不就是一个简单的<strong>动态规划</strong>吗<br>问题：求数组 nums 中，最长递增子数组的长度。<br>子数组问题，一般常用套路：</p><pre><code>子数组必须以 i 位置结尾时的答案是啥；如果每个位置都能结算一个答案，最终的答案必是其中的max。</code></pre><p>所以，定义 DP：</p><pre><code>dp[i]含义：必须以 i 位置结尾的子数组中，最长递增子数组的长度是多少。dp[i] = nums[i] &gt; nums[i-1] ? dp[i-1] + 1 : 1;ans = max &#123; dp[i] &#125;</code></pre><hr><p><strong>自己写的也 ok</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findLengthOfLCIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 求数组nums中，最长的递增子数组的长度</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// pre表示dp[i-1]: 必须以i-1位置结尾的递增子数组长度</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ok</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//return dp[nums.length-1];//这个为什么不行？</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>104. 二叉树的最大深度</title>
      <link href="/2021/03/02/nz0tc6/"/>
      <url>/2021/03/02/nz0tc6/</url>
      
        <content type="html"><![CDATA[<h4 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></h4><p>难度简单 806<br>给定一个二叉树，找出其最大深度。<br>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。<br><strong>说明:</strong> 叶子节点是指没有子节点的节点。<br><strong>示例：</strong><br>给定二叉树 <code>[3,9,20,null,null,15,7]</code>，<br>    3<br>   / <br>  9  20<br>    /  <br>   15   7<br>返回它的最大深度  3 。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth1</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> leftHeight <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> rightHeight <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftHeight<span class="token punctuation">,</span> rightHeight<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/solution/er-cha-shu-de-zui-da-shen-du-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>广度优先搜索</strong></p><p>思路与算法<br>我们也可以用「广度优先搜索」的方法来解决这道题目，但我们需要对其进行一些修改，此时我们广度优先搜索的队列里存放的是「当前层的所有节点」。每次拓展下一层的时候，不同于广度优先搜索的每次只从队列里拿出一个节点，我们需要将队列里的所有节点都拿出来进行拓展，这样能保证每次拓展完的时候队列里存放的是当前层的所有节点，即我们是一层一层地进行拓展，最后我们用一个变量 ans 来维护拓展的次数，该二叉树的最大深度即为 ans。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>69. x 的平方根</title>
      <link href="/2021/03/02/htmhva/"/>
      <url>/2021/03/02/htmhva/</url>
      
        <content type="html"><![CDATA[<h4 id="69-x-的平方根"><a href="#69-x-的平方根" class="headerlink" title="69. x 的平方根"></a><a href="https://leetcode-cn.com/problems/sqrtx/">69. x 的平方根</a></h4><p>难度简单 605<br>实现 <code>int sqrt(int x)</code> 函数。<br>计算并返回 <em>x</em> 的平方根，其中 <em>x *是非负整数。<br>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。<br>*</em>示例 1:**<br><strong>输入:</strong> 4<br><strong>输出:</strong> 2</p><p><strong>示例 2:</strong><br><strong>输入:</strong> 8<br><strong>输出:</strong> 2<br><strong>说明:</strong> 8 的平方根是 2.82842…, <br>      由于返回类型是整数，小数部分将被舍去。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> x<span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> mid <span class="token operator">*</span> mid <span class="token operator">&lt;=</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ans <span class="token operator">=</span> mid<span class="token punctuation">;</span>                l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/sqrtx/solution/x-de-ping-fang-gen-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>155. 最小栈</title>
      <link href="/2021/03/02/axq8k3/"/>
      <url>/2021/03/02/axq8k3/</url>
      
        <content type="html"><![CDATA[<h4 id="155-最小栈"><a href="#155-最小栈" class="headerlink" title="155. 最小栈"></a><a href="https://leetcode-cn.com/problems/min-stack/">155. 最小栈</a></h4><p>难度简单 820<br>设计一个支持 <code>push</code> ，<code>pop</code> ，<code>top</code> 操作，并能在常数时间内检索到最小元素的栈。</p><ul><li><code>push(x)</code> —— 将元素 x 推入栈中。</li><li><code>pop()</code> —— 删除栈顶的元素。</li><li><code>top()</code> —— 获取栈顶元素。</li><li><code>getMin()</code> —— 检索栈中的最小元素。</li></ul><p><strong>示例:</strong><br><strong>输入：</strong><br>[“MinStack”,”push”,”push”,”push”,”getMin”,”pop”,”top”,”getMin”]<br>[[],[-2],[0],[-3],[],[],[],[]]</p><p><strong>输出：</strong><br>[null,null,null,null,-3,null,0,-2]</p><p><strong>解释：</strong><br>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin();   –&gt; 返回 -3.<br>minStack.pop();<br>minStack.top();      –&gt; 返回 0.<br>minStack.getMin();   –&gt; 返回 -2.</p><p><strong>提示：</strong></p><ul><li><code>pop</code>、<code>top</code> 和 <code>getMin</code> 操作总是在 <strong>非空栈</strong> 上调用。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> xStack<span class="token punctuation">;</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> minStack<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        xStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        xStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        xStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> xStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/min-stack/solution/zui-xiao-zhan-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Your MinStack object will be instantiated and called as such: * MinStack obj = new MinStack(); * obj.push(x); * obj.pop(); * int param_3 = obj.top(); * int param_4 = obj.getMin(); */</span></code></pre><p>解析</p><p><strong>辅助栈</strong><br>要做出这道题目，首先要理解栈结构先进后出的性质。<br>对于栈来说，如果一个元素 a 在入栈时，栈里有其它的元素 b, c, d，那么无论这个栈在之后经历了什么操作，只要 a 在栈中，b, c, d 就一定在栈中，因为在 a 被弹出之前，b, c, d 不会被弹出。<br>因此，在操作过程中的任意一个时刻，只要栈顶的元素是 a，那么我们就可以确定栈里面现在的元素一定是 a, b, c, d。<br>那么，我们可以在每个元素 a 入栈时把当前栈的最小值 m 存储起来。在这之后无论何时，如果栈顶元素是 a，我们就可以直接返回存储的最小值 m。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614667881162-47efa23b-3e43-45a3-974c-c3361f6ceabe.png#align=left&display=inline&height=222&originHeight=634&originWidth=872&size=246619&status=done&style=none&width=306" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>20. 有效的括号</title>
      <link href="/2021/03/02/cin3y5/"/>
      <url>/2021/03/02/cin3y5/</url>
      
        <content type="html"><![CDATA[<h4 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号"></a><a href="https://leetcode-cn.com/problems/valid-parentheses/">20. 有效的括号</a></h4><p>难度简单 2197<br>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code>，判断字符串是否有效。<br>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p><strong>示例 1：</strong><br><strong>输入：</strong>s = “()”<br><strong>输出：</strong>true</p><p><strong>示例  2：</strong><br><strong>输入：</strong>s = “()[]{}”<br><strong>输出：</strong>true</p><p><strong>示例  3：</strong><br><strong>输入：</strong>s = “(]”<br><strong>输出：</strong>false</p><p><strong>示例  4：</strong><br><strong>输入：</strong>s = “([)]”<br><strong>输出：</strong>false</p><p><strong>示例  5：</strong><br><strong>输入：</strong>s = “{[]}”<br><strong>输出：</strong>true</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10</code></li><li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Character<span class="token operator">></span> pairs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Character<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'&amp;#125;'</span><span class="token punctuation">,</span> <span class="token string">'&amp;#123;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Deque&lt;Character> stack = new LinkedList&lt;Character>();</span>        Stack<span class="token operator">&lt;</span>Character<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这两个都可以ok</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pairs<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//🈶️又括号，栈就不能为空(必须有左扩号)。</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> pairs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>141. 环形链表</title>
      <link href="/2021/03/02/nkif1o/"/>
      <url>/2021/03/02/nkif1o/</url>
      
        <content type="html"><![CDATA[<h3 id="categories-Blog-Algorithm"><a href="#categories-Blog-Algorithm" class="headerlink" title="categories: [Blog,Algorithm]"></a>categories: [Blog,Algorithm]</h3><hr><h4 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a><a href="https://leetcode-cn.com/problems/linked-list-cycle/">141. 环形链表</a></h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode fast<span class="token operator">=</span>head<span class="token punctuation">,</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ol start="234"><li>回文链表</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode &amp;#123; *     int val; *     ListNode next; *     ListNode() &amp;#123;&amp;#125; *     ListNode(int val) &amp;#123; this.val = val; &amp;#125; *     ListNode(int val, ListNode next) &amp;#123; this.val = val; this.next = next; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stk <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null<span class="token operator">==</span>head <span class="token operator">||</span> null<span class="token operator">==</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        ListNode p <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">==</span> stk<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：wo-yao-chu-qu-luan-shuo</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/palindrome-linked-list/solution/hui-wen-lian-biao-fu-zhu-zhan-by-wo-yao-ab2uc/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>234. 回文链表</title>
      <link href="/2021/03/02/fh9tkz/"/>
      <url>/2021/03/02/fh9tkz/</url>
      
        <content type="html"><![CDATA[<h4 id="234-回文链表"><a href="#234-回文链表" class="headerlink" title="234. 回文链表"></a><a href="https://leetcode-cn.com/problems/palindrome-linked-list/">234. 回文链表</a></h4><p>难度简单 872<br>请判断一个链表是否为回文链表。<br><strong>示例 1:</strong><br><strong>输入:</strong> 1-&gt;2<br><strong>输出:</strong> false<br><strong>示例 2:</strong><br><strong>输入:</strong> 1-&gt;2-&gt;2-&gt;1<br><strong>输出:</strong> true</p><p><strong>进阶：</strong><br>你能否用  O(n) 时间复杂度和 O(1) 空间复杂度解决此题？</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode &amp;#123; *     int val; *     ListNode next; *     ListNode() &amp;#123;&amp;#125; *     ListNode(int val) &amp;#123; this.val = val; &amp;#125; *     ListNode(int val, ListNode next) &amp;#123; this.val = val; this.next = next; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> vals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将链表的值复制到数组中</span>        ListNode currentNode <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            vals<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用双指针判断是否回文</span>        <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> back <span class="token operator">=</span> vals<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>front <span class="token operator">&lt;</span> back<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>front<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>vals<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>back<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            front<span class="token operator">++</span><span class="token punctuation">;</span>            back<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/palindrome-linked-list/solution/hui-wen-lian-biao-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>栈</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode &amp;#123; *     int val; *     ListNode next; *     ListNode() &amp;#123;&amp;#125; *     ListNode(int val) &amp;#123; this.val = val; &amp;#125; *     ListNode(int val, ListNode next) &amp;#123; this.val = val; this.next = next; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stk <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>null<span class="token operator">==</span>head <span class="token operator">||</span> null<span class="token operator">==</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        ListNode p <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">==</span> stk<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：wo-yao-chu-qu-luan-shuo</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/palindrome-linked-list/solution/hui-wen-lian-biao-fu-zhu-zhan-by-wo-yao-ab2uc/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 58 - II. 左旋转字符串</title>
      <link href="/2021/03/02/hmtv7x/"/>
      <url>/2021/03/02/hmtv7x/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-58-II-左旋转字符串"><a href="#剑指-Offer-58-II-左旋转字符串" class="headerlink" title="剑指 Offer 58 - II. 左旋转字符串"></a><a href="https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">剑指 Offer 58 - II. 左旋转字符串</a></h4><p>难度简单 85<br>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字 2，该函数将返回左旋转两位得到的结果”cdefgab”。</p><p><strong>示例 1：</strong><br><strong>输入:</strong> s = “abcdefg”, k = 2<br>**输出: **”cdefgab”</p><p><strong>示例 2：</strong><br><strong>输入:</strong> s = “lrloseumgh”, k = 6<br>**输出: **”umghlrlose”</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">reverseLeftWords1</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>很骚</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StringBuilder res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">%</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：jyd</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/solution/mian-shi-ti-58-ii-zuo-xuan-zhuan-zi-fu-chuan-qie-p/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>190. 颠倒二进制位</title>
      <link href="/2021/03/02/nuec3c/"/>
      <url>/2021/03/02/nuec3c/</url>
      
        <content type="html"><![CDATA[<h4 id="190-颠倒二进制位"><a href="#190-颠倒二进制位" class="headerlink" title="190. 颠倒二进制位"></a><a href="https://leetcode-cn.com/problems/reverse-bits/">190. 颠倒二进制位</a></h4><p>难度简单 269<br>颠倒给定的 32 位无符号整数的二进制位。</p><p><strong>示例 1：</strong><br><strong>输入:</strong> 00000010100101000001111010011100<br><strong>输出:</strong> 00111001011110000010100101000000<br><strong>解释: **输入的二进制串 **00000010100101000001111010011100 **表示无符号整数</strong> 43261596，**<br>    因此返回 964176192，其二进制表示形式为 <strong>00111001011110000010100101000000</strong>。<br><strong>示例 2：</strong><br><strong>输入：</strong>11111111111111111111111111111101<br><strong>输出：</strong>10111111111111111111111111111111<br><strong>解释：</strong>输入的二进制串 <strong>11111111111111111111111111111101</strong> 表示无符号整数 4294967293，<br>      因此返回 3221225471 其二进制表示形式为 <strong>10111111111111111111111111111111 。</strong></p><p><strong>提示：</strong></p><ul><li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li><li>在 Java 中，编译器使用<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/5295284">二进制补码</a>记法来表示有符号整数。因此，在上面的 <strong>示例 2</strong> 中，输入表示有符号整数 <code>-3</code>，输出表示有符号整数 <code>-1073741825</code>。</li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            result <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>            n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：xiaowangku链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>reverse<span class="token operator">-</span>bits<span class="token operator">/</span>solution<span class="token operator">/</span>si<span class="token operator">-</span>lu<span class="token operator">-</span>fen<span class="token operator">-</span>xi<span class="token operator">-</span><span class="token number">190</span><span class="token operator">-</span>ti<span class="token operator">-</span>dian<span class="token operator">-</span>dao<span class="token operator">-</span>er<span class="token operator">-</span>jin<span class="token operator">-</span>zhi<span class="token operator">-</span>r3wy6<span class="token operator">/</span></code></pre><p>【一个小细节】<br>由于 1 &amp; n 的值为 0 或者 1，所以返回结果 result 直接加上（1 &amp; n）以更新最后一位数值。<br>这里也可以使用或运算。参与或运算的两个元素，只要有一个为 1，那么结果就为 1，否则为 0。</p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            result <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>            result <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>            n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>思路分析</strong></p><p>1、对二进制数进行翻转，类似于整数翻转，需要先获得二进制数的末位。可以通过与运算实现（1 &amp; n）。<br>我们知道，1&amp;0=0；1&amp;1=1，因此 0 或 1 与 1 相与，都等于本身。若要求 n 的末位二进制位值，只需将 n 和 1 做与运算。<br>下图所示求 5 的最后一个二进制位值<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614657463347-2c190944-c5e0-468c-a16e-17725eb97ed9.png#align=left&display=inline&height=152&originHeight=304&originWidth=376&size=17796&status=done&style=none&width=188" alt="image.png"><br>类似的求<strong>最后两位二进制值</strong>需要将 n 和 3 做与运算。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614657480229-ac09e79e-b6b1-4edb-a88f-0d22c085a878.png#align=left&display=inline&height=164&originHeight=328&originWidth=400&size=19331&status=done&style=none&width=200" alt="image.png"><br>2、获取末位值后，需要获得倒数第二位数值，这里通过移位即可实现：n&gt;&gt;1，使倒数第二位移至末位。我们只需位移 32 次，就能获得 n 的所有二进制位值。<br>3、使用 result 对各个二进制位进行保存。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 42. 连续子数组的最大和</title>
      <link href="/2021/03/02/grnayf/"/>
      <url>/2021/03/02/grnayf/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-42-连续子数组的最大和"><a href="#剑指-Offer-42-连续子数组的最大和" class="headerlink" title="剑指 Offer 42. 连续子数组的最大和"></a><a href="https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/">剑指 Offer 42. 连续子数组的最大和</a></h4><p>难度简单 206<br>输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。<br>要求时间复杂度为 O(n)。</p><p><strong>示例 1:</strong><br><strong>输入:</strong> nums = [-2,1,-3,4,-1,2,1,-5,4]<br><strong>输出:</strong> 6<br><strong>解释:</strong> 连续子数组  [4,-1,2,1] 的和最大，为  6。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：jyd</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/lian-xu-zi-shu-zu-de-zui-da-he-lcof/solution/mian-shi-ti-42-lian-xu-zi-shu-zu-de-zui-da-he-do-2/</span></code></pre><p>** 解析**</p><p><strong>动态规划</strong>是本题的最优解法，以下按照标准流程解题。<br>动态规划解析：</p><p>状态定义： 设动态规划列表 dp ，dp[i] 代表以元素 nums[i] 为结尾的连续子数组最大和。<br>为何定义最大和 dp[i] 中必须包含元素 nums[i] ：保证 dp[i] 递推到 dp[i+1] 的正确性；如果不包含 nums[i] ，递推时则不满足题目的 连续子数组 要求。<br>转移方程：<br>若 dp[i−1]≤0 ，说明 dp[i−1] 对 dp[i] 产生负贡献，即 dp[i−1]+nums[i] 还不如 nums[i] 本身大。<br>当 dp[i−1]&gt;0 时：执行 dp[i]=dp[i−1]+nums[i] ；<br>当 dp[i−1]≤0 时：执行 dp[i]=nums[i] ；<br>初始状态： dp[0]=nums[0]，即以 nums[0] 结尾的连续子数组最大和为 nums[0] 。<br>返回值： 返回 dp 列表中的最大值，代表全局最大值。</p><hr><p><strong>易错</strong></p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Integer.MIN_VALUE</span>        <span class="token keyword">int</span> pre<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Integer.MIN_VALUE</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            pre<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>pre<span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//err Math.max(pre,pre+nums[i])</span>            max<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>922. 按奇偶排序数组 II</title>
      <link href="/2021/03/02/mc69vt/"/>
      <url>/2021/03/02/mc69vt/</url>
      
        <content type="html"><![CDATA[<h4 id="922-按奇偶排序数组-II"><a href="#922-按奇偶排序数组-II" class="headerlink" title="922. 按奇偶排序数组 II"></a><a href="https://leetcode-cn.com/problems/sort-array-by-parity-ii/">922. 按奇偶排序数组 II</a></h4><p>难度简单 191<br>给定一个非负整数数组 <code>A</code>， A 中一半整数是奇数，一半整数是偶数。<br>对数组进行排序，以便当 <code>A[i]</code> 为奇数时，<code>i</code> 也是奇数；当 <code>A[i]</code> 为偶数时， <code>i</code> 也是偶数。<br>你可以返回任何满足上述条件的数组作为答案。</p><p><strong>示例：</strong><br><strong>输入：</strong>[4,2,5,7]<br><strong>输出：</strong>[4,5,2,7]<br><strong>解释：</strong>[4,7,2,5]，[2,5,4,7]，[2,7,4,5] 也会被接受。</p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArrayByParityII</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> A<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>                i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> A<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>                i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArrayByParityII</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    j <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> A<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>sort<span class="token operator">-</span>array<span class="token operator">-</span>by<span class="token operator">-</span>parity<span class="token operator">-</span>ii<span class="token operator">/</span>solution<span class="token operator">/</span>an<span class="token operator">-</span>qi<span class="token operator">-</span>ou<span class="token operator">-</span>pai<span class="token operator">-</span>xu<span class="token operator">-</span>shu<span class="token operator">-</span>zu<span class="token operator">-</span>ii<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><p><strong>双指针</strong><br>思路与算法<br>如果<strong>原数组可以修改</strong>，则可以使用就地算法求解。<br>为数组的<strong>偶数</strong>下标部分和<strong>奇数</strong>下标部分分别维护指针** i,j<strong>。随后，在每一步中，如果 **A[i] 为奇数</strong>，则不断地向前移动** j<strong>（每次移动两个单位），直到遇见下一个</strong>偶数<strong>。此时，可以直接将 **A[i] 与 A[j] 交换</strong>。我们不断进行这样的过程，最终能够将所有的整数放在正确的位置上。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>14. 最长公共前缀</title>
      <link href="/2021/03/02/zr12cg/"/>
      <url>/2021/03/02/zr12cg/</url>
      
        <content type="html"><![CDATA[<h4 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14. 最长公共前缀"></a><a href="https://leetcode-cn.com/problems/longest-common-prefix/">14. 最长公共前缀</a></h4><p>难度简单 1479<br>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>strs = [“flower”,”flow”,”flight”]<br><strong>输出：</strong>“fl”</p><p><strong>示例 2：</strong><br><strong>输入：</strong>strs = [“dog”,”racecar”,”car”]<br><strong>输出：</strong>“”<br><strong>解释：</strong>输入不存在公共前缀。</p><p><strong>提示：</strong></p><ul><li><code>0 &lt;= strs.length &lt;= 200</code></li><li><code>0 &lt;= strs[i].length &lt;= 200</code></li><li><code>strs[i]</code> 仅由小写英文字母组成.</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strs <span class="token operator">==</span> null <span class="token operator">||</span> strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        String prefix <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            prefix <span class="token operator">=</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> prefix<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>String str1<span class="token punctuation">,</span> String str2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> str1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">==</span> str2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>longest<span class="token operator">-</span>common<span class="token operator">-</span>prefix<span class="token operator">/</span>solution<span class="token operator">/</span>zui<span class="token operator">-</span>chang<span class="token operator">-</span>gong<span class="token operator">-</span>gong<span class="token operator">-</span>qian<span class="token operator">-</span>zhui<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strs <span class="token operator">==</span> null <span class="token operator">||</span> strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>longest<span class="token operator">-</span>common<span class="token operator">-</span>prefix<span class="token operator">/</span>solution<span class="token operator">/</span>zui<span class="token operator">-</span>chang<span class="token operator">-</span>gong<span class="token operator">-</span>gong<span class="token operator">-</span>qian<span class="token operator">-</span>zhui<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><p><strong>解析</strong></p><p>方法一是横向扫描，依次遍历每个字符串，更新最长公共前缀。<br>方法二是纵向扫描。纵向扫描时，从前往后遍历所有字符串的每一列，<strong>比较相同列上的字符是否相同，如果相同则继续对下一列进行比较，如果不相同则当前列不再属于公共前缀，当前列之前的部分为最长公共前缀</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 61. 扑克牌中的顺子</title>
      <link href="/2021/03/02/oskktz/"/>
      <url>/2021/03/02/oskktz/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-61-扑克牌中的顺子"><a href="#剑指-Offer-61-扑克牌中的顺子" class="headerlink" title="剑指 Offer 61. 扑克牌中的顺子"></a><a href="https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/">剑指 Offer 61. 扑克牌中的顺子</a></h4><p>难度简单 98<br>从扑克牌中随机抽 5 张牌，判断是不是一个顺子，即这 5 张牌是不是连续的。2 ～ 10 为数字本身，A 为 1，J 为 11，Q 为 12，K 为 13，而<strong>大、小王为 0 ，可以看成任意数字</strong>。A 不能视为 14。</p><p><strong>示例  1:</strong><br><strong>输入:</strong> [1,2,3,4,5]<br><strong>输出:</strong> True</p><p><strong>示例  2:</strong><br><strong>输入:</strong> [0,0,1,2,5]<br><strong>输出:</strong> True</p><p><strong>限制：</strong><br>数组长度为 5 <br>数组的数取值为 [0, 13] .</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isStraight</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> repeat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 跳过大小王</span>            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 最大牌</span>            min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 最小牌</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>repeat<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 若有重复，提前返回 false</span>            repeat<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加此牌至 Set</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> max <span class="token operator">-</span> min <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最大牌 - 最小牌 &lt; 5 则可构成顺子</span>            <span class="token comment" spellcheck="true">//&amp;&amp; max - min >=2; // max - min >=2  加不加 都可以</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：jyd</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof/solution/mian-shi-ti-61-bu-ke-pai-zhong-de-shun-zi-ji-he-se/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>解析<br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614647884425-934962e8-171f-4845-bfe3-227f84485184.png#align=left&display=inline&height=521&originHeight=1041&originWidth=1387&size=129521&status=done&style=none&width=694" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 21. 调整顺序使奇数位于偶数前面</title>
      <link href="/2021/03/02/xbgoeb/"/>
      <url>/2021/03/02/xbgoeb/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-21-调整数组顺序使奇数位于偶数前面"><a href="#剑指-Offer-21-调整数组顺序使奇数位于偶数前面" class="headerlink" title="剑指 Offer 21. 调整数组顺序使奇数位于偶数前面"></a><a href="https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/">剑指 Offer 21. 调整数组顺序使奇数位于偶数前面</a></h4><p>难度简单 84<br>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有奇数位于数组的前半部分，所有偶数位于数组的后半部分。</p><p><strong>示例：</strong><br><strong>输入：</strong>nums = [1,2,3,4]<br><strong>输出：</strong>[1,3,2,4] <br><strong>注：</strong>[3,1,2,4] 也是正确的答案之一。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tmp<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">",j="</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">",j="</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：jyd</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/solution/mian-shi-ti-21-diao-zheng-shu-zu-shun-xu-shi-qi-4/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614646512170-796c005b-f257-4b95-8821-203d88ef8704.png#align=left&display=inline&height=519&originHeight=1038&originWidth=764&size=240712&status=done&style=none&width=382" alt="image.png"></p><hr><p><strong>好理解，浪费空间</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//奇数</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                res<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                res<span class="token punctuation">[</span>right<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：xmblgt链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>diao<span class="token operator">-</span>zheng<span class="token operator">-</span>shu<span class="token operator">-</span>zu<span class="token operator">-</span>shun<span class="token operator">-</span>xu<span class="token operator">-</span>shi<span class="token operator">-</span>qi<span class="token operator">-</span>shu<span class="token operator">-</span>wei<span class="token operator">-</span>yu<span class="token operator">-</span>ou<span class="token operator">-</span>shu<span class="token operator">-</span>qian<span class="token operator">-</span>mian<span class="token operator">-</span>lcof<span class="token operator">/</span>solution<span class="token operator">/</span>zhe<span class="token operator">-</span>dao<span class="token operator">-</span>ti<span class="token operator">-</span>you<span class="token operator">-</span>you<span class="token operator">-</span>rang<span class="token operator">-</span>wo<span class="token operator">-</span>xiang<span class="token operator">-</span>qi<span class="token operator">-</span>liao<span class="token operator">-</span>gczhong<span class="token operator">-</span>d<span class="token operator">/</span></code></pre><p><strong>解析</strong><br>只有遍历到的 nums[i]全为奇数时，p 和 i 保持相同大小，如果遇到偶数元素，那么 i 直接跳过继续 i++,而 p 则会停留在为偶数元素的位置上，这也是为什么要 nums[i]和 nums[p]互换，只有这样才能在一次遍历中把奇数元素位置的元素变为偶数。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>83. 删除排序链表中的重复元素</title>
      <link href="/2021/03/02/gh6fem/"/>
      <url>/2021/03/02/gh6fem/</url>
      
        <content type="html"><![CDATA[<h4 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83. 删除排序链表中的重复元素"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">83. 删除排序链表中的重复元素</a></h4><p>难度简单 480<br>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。<br><strong>示例  1:</strong><br><strong>输入:</strong> 1-&gt;1-&gt;2<br><strong>输出:</strong> 1-&gt;2</p><p><strong>示例  2:</strong><br><strong>输入:</strong> 1-&gt;1-&gt;2-&gt;3-&gt;3<br><strong>输出:</strong> 1-&gt;2-&gt;3.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode &amp;#123; *     int val; *     ListNode next; *     ListNode() &amp;#123;&amp;#125; *     ListNode(int val) &amp;#123; this.val = val; &amp;#125; *     ListNode(int val, ListNode next) &amp;#123; this.val = val; this.next = next; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> ListNode <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ListNode current <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">==</span> current<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                current<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                current <span class="token operator">=</span> current<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/solution/shan-chu-pai-xu-lian-biao-zhong-de-zhong-fu-yuan-s/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>125. 验证回文串</title>
      <link href="/2021/03/02/exdt9k/"/>
      <url>/2021/03/02/exdt9k/</url>
      
        <content type="html"><![CDATA[<h4 id="125-验证回文串"><a href="#125-验证回文串" class="headerlink" title="125. 验证回文串"></a><a href="https://leetcode-cn.com/problems/valid-palindrome/">125. 验证回文串</a></h4><p>难度简单<br>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。<br><strong>说明：</strong>本题中，我们将空字符串定义为有效的回文串。<br><strong>示例 1:</strong><br><strong>输入:</strong> “A man, a plan, a canal: Panama”<br><strong>输出:</strong> true</p><p><strong>示例 2:</strong><br><strong>输入:</strong> “race a car”<br><strong>输出:</strong> false</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StringBuffer sgood <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sgood<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        StringBuffer sgood_rev <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>sgood<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sgood<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sgood_rev<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/valid-palindrome/solution/yan-zheng-hui-wen-chuan-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StringBuffer sgood <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sgood<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> sgood<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>sgood<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>sgood<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">++</span>left<span class="token punctuation">;</span>            <span class="token operator">--</span>right<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/valid-palindrome/solution/yan-zheng-hui-wen-chuan-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span>Character<span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token operator">++</span>left<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span>Character<span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token operator">--</span>right<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">++</span>left<span class="token punctuation">;</span>                <span class="token operator">--</span>right<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这个left &lt; right去掉貌似可以，while里三处必须有.</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/valid-palindrome/solution/yan-zheng-hui-wen-chuan-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>977. 有序数组的平方</title>
      <link href="/2021/03/02/aelxwp/"/>
      <url>/2021/03/02/aelxwp/</url>
      
        <content type="html"><![CDATA[<h4 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a><a href="https://leetcode-cn.com/problems/squares-of-a-sorted-array/">977. 有序数组的平方</a></h4><p>难度简单 209<br>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong>组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>nums = [-4,-1,0,3,10]<br><strong>输出：</strong>[0,1,9,16,100]<br><strong>解释：</strong>平方后，数组变为 [16,1,0,9,100]<br>排序后，数组变为 [0,1,9,16,100]</p><p><strong>双指针</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">--</span>j<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">--</span>pos<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>squares<span class="token operator">-</span>of<span class="token operator">-</span>a<span class="token operator">-</span>sorted<span class="token operator">-</span>array<span class="token operator">/</span>solution<span class="token operator">/</span>you<span class="token operator">-</span>xu<span class="token operator">-</span>shu<span class="token operator">-</span>zu<span class="token operator">-</span>de<span class="token operator">-</span>ping<span class="token operator">-</span>fang<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><p><strong>平方再排序</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>squares<span class="token operator">-</span>of<span class="token operator">-</span>a<span class="token operator">-</span>sorted<span class="token operator">-</span>array<span class="token operator">/</span>solution<span class="token operator">/</span>you<span class="token operator">-</span>xu<span class="token operator">-</span>shu<span class="token operator">-</span>zu<span class="token operator">-</span>de<span class="token operator">-</span>ping<span class="token operator">-</span>fang<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>226. 翻转二叉树</title>
      <link href="/2021/03/01/uab3g7/"/>
      <url>/2021/03/01/uab3g7/</url>
      
        <content type="html"><![CDATA[<h4 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a><a href="https://leetcode-cn.com/problems/invert-binary-tree/">226. 翻转二叉树</a></h4><p>难度简单 774<br>翻转一棵二叉树。<br><strong>示例：</strong><br>输入：<br>     4<br>   /   <br>  2     7<br> / \   / <br>1   3 6   9<br>输出：<br>     4<br>   /   <br>  7     2<br> / \   / <br>9   6 3   1</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> TreeNode <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">hepler</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">hepler</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        TreeNode left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        TreeNode right<span class="token operator">=</span> root<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left<span class="token operator">=</span><span class="token function">hepler</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token function">hepler</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ok</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">hepler</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">hepler</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TreeNode left = root.left;</span>        <span class="token comment" spellcheck="true">// TreeNode right= root.right;</span>        <span class="token comment" spellcheck="true">// root.left=hepler(right);</span>        <span class="token comment" spellcheck="true">// root.right=hepler(left);</span>        TreeNode left <span class="token operator">=</span> <span class="token function">hepler</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode right<span class="token operator">=</span> <span class="token function">hepler</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> right<span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right<span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>112. 路径总和</title>
      <link href="/2021/03/01/wlqpa7/"/>
      <url>/2021/03/01/wlqpa7/</url>
      
        <content type="html"><![CDATA[<h4 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a><a href="https://leetcode-cn.com/problems/path-sum/">112. 路径总和</a></h4><p>难度简单 523<br>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> ，判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。<br><strong>叶子节点</strong> 是指没有子节点的节点。</p><p><strong>示例 1：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/282505/1614610185505-5bb176b8-6f55-42e8-ba1e-db572e4d0a25.jpeg#align=left&display=inline&height=211&originHeight=421&originWidth=592&size=0&status=done&style=none&width=296"><br><strong>输入：</strong>root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22<br><strong>输出：</strong>true</p><p>广度优先</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queVal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queNode<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        queVal<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queNode<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            TreeNode now <span class="token operator">=</span> queNode<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> queVal<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> now<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> sum<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                queNode<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                queVal<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">+</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                queNode<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                queVal<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val <span class="token operator">+</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>path<span class="token operator">-</span>sum<span class="token operator">/</span>solution<span class="token operator">/</span>lu<span class="token operator">-</span>jing<span class="token operator">-</span>zong<span class="token operator">-</span>he<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre><p>递归</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> sum <span class="token operator">==</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> sum <span class="token operator">-</span> root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/path-sum/solution/lu-jing-zong-he-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>122. 买卖股票的最佳时机 II</title>
      <link href="/2021/03/01/mw2il2/"/>
      <url>/2021/03/01/mw2il2/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="122-买卖股票的最佳时机-II"><a href="#122-买卖股票的最佳时机-II" class="headerlink" title="122. 买卖股票的最佳时机 II"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/">122. 买卖股票的最佳时机 II</a></h4><p>难度简单1108<br>给定一个数组，它的第 <em>i</em> 个元素是一支给定股票第 <em>i</em> 天的价格。<br>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。<br><strong>注意：</strong>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong><br><strong>输入:</strong> [7,1,5,3,6,4]<br><strong>输出:</strong> 7<br><strong>解释:</strong> 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = <strong>4 **。<br>随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = **3</strong> 。</p><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>best<span class="token operator">-</span>time<span class="token operator">-</span>to<span class="token operator">-</span>buy<span class="token operator">-</span>and<span class="token operator">-</span>sell<span class="token operator">-</span>stock<span class="token operator">-</span>ii<span class="token operator">/</span>solution<span class="token operator">/</span>mai<span class="token operator">-</span>mai<span class="token operator">-</span>gu<span class="token operator">-</span>piao<span class="token operator">-</span>de<span class="token operator">-</span>zui<span class="token operator">-</span>jia<span class="token operator">-</span>shi<span class="token operator">-</span>ji<span class="token operator">-</span>ii<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>s<span class="token operator">/</span></code></pre><p>优化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> dp0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp1 <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> newDp0 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp0<span class="token punctuation">,</span> dp1 <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> newDp1 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp1<span class="token punctuation">,</span> dp0 <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp0 <span class="token operator">=</span> newDp0<span class="token punctuation">;</span>            dp1 <span class="token operator">=</span> newDp1<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dp0<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>best<span class="token operator">-</span>time<span class="token operator">-</span>to<span class="token operator">-</span>buy<span class="token operator">-</span>and<span class="token operator">-</span>sell<span class="token operator">-</span>stock<span class="token operator">-</span>ii<span class="token operator">/</span>solution<span class="token operator">/</span>mai<span class="token operator">-</span>mai<span class="token operator">-</span>gu<span class="token operator">-</span>piao<span class="token operator">-</span>de<span class="token operator">-</span>zui<span class="token operator">-</span>jia<span class="token operator">-</span>shi<span class="token operator">-</span>ji<span class="token operator">-</span>ii<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>s<span class="token operator">/</span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614609643345-b13ca537-3089-444f-bb92-ba8ef2cf8866.png#align=left&display=inline&height=373&originHeight=746&originWidth=1192&size=385299&status=done&style=none&width=596" alt="image.png"></p><hr><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans <span class="token operator">+=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>best<span class="token operator">-</span>time<span class="token operator">-</span>to<span class="token operator">-</span>buy<span class="token operator">-</span>and<span class="token operator">-</span>sell<span class="token operator">-</span>stock<span class="token operator">-</span>ii<span class="token operator">/</span>solution<span class="token operator">/</span>mai<span class="token operator">-</span>mai<span class="token operator">-</span>gu<span class="token operator">-</span>piao<span class="token operator">-</span>de<span class="token operator">-</span>zui<span class="token operator">-</span>jia<span class="token operator">-</span>shi<span class="token operator">-</span>ji<span class="token operator">-</span>ii<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>s<span class="token operator">/</span></code></pre><p>解析</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614608654571-ce74b2c6-d38c-401f-8180-9e10e74e0e8a.png#align=left&display=inline&height=500&originHeight=1000&originWidth=1194&size=359106&status=done&style=none&width=597" alt="image.png"><br>优化易懂版</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> diff <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>diff <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                res <span class="token operator">+=</span> diff<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：liweiwei1419链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>best<span class="token operator">-</span>time<span class="token operator">-</span>to<span class="token operator">-</span>buy<span class="token operator">-</span>and<span class="token operator">-</span>sell<span class="token operator">-</span>stock<span class="token operator">-</span>ii<span class="token operator">/</span>solution<span class="token operator">/</span>tan<span class="token operator">-</span>xin<span class="token operator">-</span>suan<span class="token operator">-</span>fa<span class="token operator">-</span>by<span class="token operator">-</span>liweiwei1419<span class="token operator">-</span><span class="token number">2</span><span class="token operator">/</span></code></pre><p><strong>解析</strong><br>贪心算法 在每一步总是做出在当前看来最好的选择。</p><p>「贪心算法」 和 「动态规划」、「回溯搜索」 算法一样，完成一件事情，是 分步决策 的；<br>「贪心算法」 在每一步总是做出在当前看来最好的选择，我是这样理解 「最好」 这两个字的意思：<br>「最好」 的意思往往根据题目而来，可能是 「最小」，也可能是 「最大」；<br>贪心算法和动态规划相比，它既不看前面（也就是说它不需要从前面的状态转移过来），也不看后面（无后效性，后面的选择不会对前面的选择有影响），因此贪心算法时间复杂度一般是线性的，空间复杂度是常数级别的；<br>这道题 「贪心」 的地方在于，对于 「今天的股价 - 昨天的股价」，得到的结果有 3 种可能：① 正数，<br>② 0，③ 负数。贪心算法的决策是： 只加正数 。</p><p>作者：liweiwei1419<br>链接：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/solution/tan-xin-suan-fa-by-liweiwei1419-2/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>572. 另一个树的子树</title>
      <link href="/2021/03/01/hwkluw/"/>
      <url>/2021/03/01/hwkluw/</url>
      
        <content type="html"><![CDATA[<h4 id="572-另一个树的子树"><a href="#572-另一个树的子树" class="headerlink" title="572. 另一个树的子树"></a><a href="https://leetcode-cn.com/problems/subtree-of-another-tree/">572. 另一个树的子树</a></h4><p>难度简单 452<br>给定两个非空二叉树 <strong>s</strong> 和 <strong>t</strong>，检验 <strong>s</strong> 中是否包含和 <strong>t</strong> 具有相同结构和节点值的子树。<strong>s</strong> 的一个子树包括 <strong>s</strong> 的一个节点和这个节点的所有子孙。<strong>s</strong> 也可以看做它自身的一棵子树。<br><strong>示例 1:</strong><br>给定的树 s:<br>     3<br>    / <br>   4   5<br>  / <br> 1   2</p><p>给定的树 t：<br>   4 <br>  / <br> 1   2</p><p>返回 <strong>true</strong>，因为 t 与 s 的一个子树拥有相同的结构和节点值。<br><strong>示例 2:</strong><br>给定的树 s：<br>     3<br>    / <br>   4   5<br>  / <br> 1   2<br>    /<br>   0</p><p>给定的树 t：<br>   4<br>  / <br> 1   2</p><p>返回 <strong>false</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSubtree</span><span class="token punctuation">(</span>TreeNode s<span class="token punctuation">,</span> TreeNode t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode s<span class="token punctuation">,</span> TreeNode t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//题干:检验 s 中是否包含和 t 具有相同结构和节点值的子树。</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span>TreeNode s<span class="token punctuation">,</span> TreeNode t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> t <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>val <span class="token operator">!=</span> t<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/subtree-of-another-tree/solution/ling-yi-ge-shu-de-zi-shu-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 04. 二维数组中的查找</title>
      <link href="/2021/03/01/grfw90/"/>
      <url>/2021/03/01/grfw90/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-04-二维数组中的查找"><a href="#剑指-Offer-04-二维数组中的查找" class="headerlink" title="剑指 Offer 04. 二维数组中的查找"></a><a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">剑指 Offer 04. 二维数组中的查找</a></h4><p>难度中等 242<br>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p><strong>示例:</strong><br>现有矩阵 matrix 如下：<br>[<br>  [1,   4,  7, 11, 15],<br>  [2,   5,  8, 12, 19],<br>  [3,   6,  9, 16, 22],<br>  [10, 13, 14, 17, 24],<br>  [18, 21, 23, 26, 30]<br>]</p><p>给定 target = <code>5</code>，返回 <code>true</code>。<br>给定  target = <code>20</code>，返回 <code>false</code>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token operator">==</span>null<span class="token operator">||</span>matrix<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> row<span class="token operator">=</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//放在最前面 空指针</span>        <span class="token keyword">int</span> col<span class="token operator">=</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//for(int i=0;i&lt;row;)&amp;#123;</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>row<span class="token operator">&amp;&amp;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> cur <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">==</span>cur<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>             <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target<span class="token operator">&lt;</span>cur<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>                 j<span class="token operator">--</span><span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>             <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                 i<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>分析</p><p><strong>线性查找</strong></p><p>由于给定的二维数组具备每行从左到右递增以及每列从上到下递增的特点，当访问到一个元素时，可以排除数组中的部分元素。</p><p><strong>从二维数组的右上角开始查找</strong>。如果当前元素等于目标值，则返回 true。如果当前元素大于目标值，则移到左边一列。如果当前元素小于目标值，则移到下边一行。</p><p><strong>可以证明这种方法不会错过目标值。</strong>如果当前元素大于目标值，说明当前元素的下边的所有元素都一定大于目标值，因此往下查找不可能找到目标值，往左查找可能找到目标值。如果当前元素小于目标值，说明当前元素的左边的所有元素都一定小于目标值，因此往左查找不可能找到目标值，往下查找可能找到目标值。</p><p>若数组为空，返回 false<br>初始化行下标为 0，列下标为二维数组的列数减 1<br>重复下列步骤，直到行下标或列下标超出边界<br>获得当前下标位置的元素 num<br>如果 num 和 target 相等，返回 true<br>如果 num 大于 target，列下标减 1<br>如果 num 小于 target，行下标加 1<br>循环体执行完毕仍未找到元素等于 target ，说明不存在这样的元素，返回 false`</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/solution/mian-shi-ti-04-er-wei-shu-zu-zhong-de-cha-zhao-b-3/">https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/solution/mian-shi-ti-04-er-wei-shu-zu-zhong-de-cha-zhao-b-3/</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 54. 二叉搜索树的第k大节点</title>
      <link href="/2021/03/01/nqvs4h/"/>
      <url>/2021/03/01/nqvs4h/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-54-二叉搜索树的第-k-大节点"><a href="#剑指-Offer-54-二叉搜索树的第-k-大节点" class="headerlink" title="剑指 Offer 54. 二叉搜索树的第 k 大节点"></a><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/">剑指 Offer 54. 二叉搜索树的第 k 大节点</a></h4><p>难度简单 122<br>给定一棵二叉搜索树，请找出其中第 k 大的节点。</p><p><strong>示例 1:</strong><br><strong>输入:</strong> root = [3,1,4,null,2], k = 1<br>   3<br>  / <br> 1   4<br>  <br>   2<br><strong>输出:</strong> 4<br><strong>示例 2:</strong><br><strong>输入:</strong> root = [5,3,6,2,4,null,null,1], k = 3<br>       5<br>      / <br>     3   6<br>    / <br>   2   4<br>  /<br> 1<br><strong>输出:</strong> 4 .</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthLargest</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>k <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：jyd</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/solution/mian-shi-ti-54-er-cha-sou-suo-shu-de-di-k-da-jie-d/</span></code></pre><p><strong>中序遍历倒序</strong></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>404. 左叶子之和</title>
      <link href="/2021/03/01/zxl9a8/"/>
      <url>/2021/03/01/zxl9a8/</url>
      
        <content type="html"><![CDATA[<h4 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404. 左叶子之和"></a><a href="https://leetcode-cn.com/problems/sum-of-left-leaves/">404. 左叶子之和</a></h4><p>难度简单 286<br>计算给定二叉树的所有左叶子之和。<br><strong>示例：</strong><br>    3<br>   / <br>  9  20<br>    /   <br>   15   7</p><p><strong>在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24.</strong></p><p>一个节点为「左叶子」节点，当且仅当它是某个节点的左子节点，并且它是一个叶子结点。因此我们可以考虑对整棵树进行遍历，当我们遍历到节点<br>node 时，如果它的左子节点是一个叶子结点，那么就将它的左子节点的值累加计入答案。</p><p>遍历整棵树的方法有深度优先搜索和广度优先搜索，下面分别给出了实现代码。</p><p><strong>深度优先搜索</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root <span class="token operator">!=</span> null <span class="token operator">?</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans <span class="token operator">+=</span> <span class="token function">isLeafNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">?</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isLeafNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLeafNode</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/sum-of-left-leaves/solution/zuo-xie-zi-zhi-he-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>广度优先遍历</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isLeafNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    ans <span class="token operator">+=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isLeafNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLeafNode</span><span class="token punctuation">(</span>TreeNode node<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/sum-of-left-leaves/solution/zuo-xie-zi-zhi-he-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>680. 验证回文字符串 Ⅱ</title>
      <link href="/2021/03/01/to9ylm/"/>
      <url>/2021/03/01/to9ylm/</url>
      
        <content type="html"><![CDATA[<h3 id="680-验证回文字符串-Ⅱ"><a href="#680-验证回文字符串-Ⅱ" class="headerlink" title="680. 验证回文字符串 Ⅱ"></a><a href="https://leetcode-cn.com/problems/valid-palindrome-ii/">680. 验证回文字符串 Ⅱ</a></h3><p>难度简单 324<br>给定一个非空字符串 <code>s</code>，<strong>最多</strong>删除一个字符。判断是否能成为回文字符串。<br><strong>示例 1:</strong><br><strong>输入:</strong> “aba”<br><strong>输出:</strong> True</p><p><strong>示例 2:</strong><br><strong>输入:</strong> “abca”<br><strong>输出:</strong> True<br><strong>解释:</strong> 你可以删除 c 字符。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> high <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>low<span class="token punctuation">)</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token operator">++</span>low<span class="token punctuation">;</span>                <span class="token operator">--</span>high<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">,</span> j <span class="token operator">=</span> high<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c1 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">!=</span> c2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/valid-palindrome-ii/solution/yan-zheng-hui-wen-zi-fu-chuan-ii-by-leetcode-solut/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>复杂度分析</strong></p><p>时间复杂度：O(n)，其中 n 是字符串的长度。判断整个字符串是否是回文字符串的时间复杂度是<br>O(n)，遇到不同字符时，判断两个子串是否是回文字符串的时间复杂度也都是 O(n)。<br>空间复杂度：O(1)。只需要维护有限的常量空间。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>257. 二叉树的所有路径</title>
      <link href="/2021/03/01/nra9hc/"/>
      <url>/2021/03/01/nra9hc/</url>
      
        <content type="html"><![CDATA[<h4 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257. 二叉树的所有路径"></a><a href="https://leetcode-cn.com/problems/binary-tree-paths/">257. 二叉树的所有路径</a></h4><p>难度简单 454<br>给定一个二叉树，返回所有从根节点到叶子节点的路径。<br><strong>说明:</strong> 叶子节点是指没有子节点的节点。<br><strong>示例:</strong><br><strong>输入:</strong></p><p>1<br> /   <br>2     3<br> <br>  5</p><p><strong>输出:</strong> [“1-&gt;2-&gt;5”, “1-&gt;3”]</p><p><strong>解释:</strong> 所有根节点到叶子节点的路径为: <strong>1-&gt;2-&gt;5, 1-&gt;3.</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">binaryTreePaths</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> paths <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> paths<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> nodeQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>String<span class="token operator">></span> pathQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        pathQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>nodeQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            TreeNode node <span class="token operator">=</span> nodeQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String path <span class="token operator">=</span> pathQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                paths<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pathQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    nodeQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                    pathQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> paths<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h4><p>思路与算法</p><p>最直观的方法是使用深度优先搜索。在深度优先搜索遍历二叉树时，我们需要考虑当前的节点以及它的孩子节点。</p><p>如果当前节点不是叶子节点，则在当前的路径末尾添加该节点，并继续递归遍历该节点的每一个孩子节点。<br>如果当前节点是叶子节点，则在当前路径末尾添加该节点后我们就得到了一条从根节点到叶子节点的路径，将该路径加入到答案即可。<br>如此，当遍历完整棵二叉树以后我们就得到了所有从根节点到叶子节点的路径。当然，深度优先搜索也可以使用非递归的方式实现，这里不再赘述。</p><hr><p>广度优先搜索</p><p>思路与算法</p><p>我们也可以用广度优先搜索来实现。我们维护一个队列，存储节点以及根到该节点的路径。一开始这个队列里只有根节点。在每一步迭代中，我们取出队列中的首节点，如果它是叶子节点，则将它对应的路径加入到答案中。如果它不是叶子节点，则将它的所有孩子节点加入到队列的末尾。当队列为空时广度优先搜索结束，我们即能得到答案。</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-paths/solution/er-cha-shu-de-suo-you-lu-jing-by-leetcode-solution/">https://leetcode-cn.com/problems/binary-tree-paths/solution/er-cha-shu-de-suo-you-lu-jing-by-leetcode-solution/</a></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">binaryTreePaths</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> paths <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">constructPaths</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> paths<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> paths<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">constructPaths</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> String path<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> paths<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            StringBuffer pathSB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            pathSB<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 当前节点是叶子节点</span>                paths<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pathSB<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 把路径加入到答案中</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                pathSB<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 当前节点不是叶子节点，继续递归遍历</span>                <span class="token function">constructPaths</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> pathSB<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> paths<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">constructPaths</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> pathSB<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> paths<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">//链接：https://leetcode-cn.com/problems/binary-tree-paths/solution/er-cha-shu-de-suo-you-lu-jing-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>67. 二进制求和</title>
      <link href="/2021/03/01/vuonz6/"/>
      <url>/2021/03/01/vuonz6/</url>
      
        <content type="html"><![CDATA[<h4 id="67-二进制求和"><a href="#67-二进制求和" class="headerlink" title="67. 二进制求和"></a><a href="https://leetcode-cn.com/problems/add-binary/">67. 二进制求和</a></h4><p>难度简单 568<br>给你两个二进制字符串，返回它们的和（用二进制表示）。<br>输入为 **非空  **字符串且只包含数字 <code>1</code> 和 <code>0</code>。</p><p><strong>示例  1:</strong><br><strong>输入:</strong> a = “11”, b = “1”<br><strong>输出:</strong> “100”<br><strong>示例  2:</strong><br><strong>输入:</strong> a = “1010”, b = “1011”<br><strong>输出:</strong> “10101”</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">addBinary</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span> String b<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StringBuffer ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            carry <span class="token operator">+=</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            carry <span class="token operator">+=</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>carry <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"carry % 2 + '0'="</span><span class="token operator">+</span>carry <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(char)(carry % 2 + '0')="</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>carry <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            carry <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"carry/=2 ="</span><span class="token operator">+</span> carry <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>carry <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ans<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">//链接：https://leetcode-cn.com/problems/add-binary/solution/er-jin-zhi-qiu-he-by-leetcode-solution/</span></code></pre><p><strong>stdout</strong><br>**<br><strong>ans.append((char) (carry % 2 + ‘0’));//‘0’</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614591690596-73e5687e-e9c7-43ec-b107-ebee8a49193e.png#align=left&display=inline&height=271&originHeight=542&originWidth=636&size=73816&status=done&style=none&width=318" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/282505/1614591871762-cda3ddb8-8c2a-4b25-99c5-a4b8901c2dfe.png#align=left&display=inline&height=298&originHeight=706&originWidth=982&size=177020&status=done&style=none&width=414" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>108. 将有序数组转换为二叉搜索树</title>
      <link href="/2021/03/01/nlx76s/"/>
      <url>/2021/03/01/nlx76s/</url>
      
        <content type="html"><![CDATA[<h4 id="108-将有序数组转换为二叉搜索树"><a href="#108-将有序数组转换为二叉搜索树" class="headerlink" title="108. 将有序数组转换为二叉搜索树"></a><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/">108. 将有序数组转换为二叉搜索树</a></h4><p>难度简单 705<br>给你一个整数数组 <code>nums</code> ，其中元素已经按 <strong>升序</strong> 排列，请你将其转换为一棵 <strong>高度平衡</strong> 二叉搜索树。<br>**高度平衡  **二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。</p><p><strong>示例 1：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/282505/1614590284525-cad453c2-6ab7-4ea5-a4ab-37c10eecd0d3.jpeg#align=left&display=inline&height=111&originHeight=222&originWidth=302&size=0&status=done&style=none&width=151"><br><strong>输入：</strong>nums = [-10,-3,0,5,9]<strong>输出：</strong>[0,-3,9,-10,null,5]<br><strong>解释：</strong>[0,-10,5,null,-3,null,9] 也将被视为正确答案：<img src="https://cdn.nlark.com/yuque/0/2021/jpeg/282505/1614590284533-2094a708-7ca6-40d1-b45e-18e8fae142eb.jpeg#align=left&display=inline&height=111&originHeight=222&originWidth=302&size=0&status=done&style=none&width=151"><br>**<br><strong>示例 2：</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/282505/1614590284695-7c9eb358-99b8-4fcc-a523-8ddf1e814441.jpeg#align=left&display=inline&height=71&originHeight=142&originWidth=342&size=0&status=done&style=none&width=171"><br><strong>输入：</strong>nums = [1,3]<br><strong>输出：</strong>[3,1]<br><strong>解释：</strong>[1,3] 和 [3,1] 都是高度平衡二叉搜索树。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> TreeNode <span class="token function">helper</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 总是选择中间位置左边的数字作为根节点</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/solution/jiang-you-xu-shu-zu-zhuan-huan-wei-er-cha-sou-s-33/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>191. 位1的个数</title>
      <link href="/2021/03/01/tvvpm8/"/>
      <url>/2021/03/01/tvvpm8/</url>
      
        <content type="html"><![CDATA[<h3 id="191-位-1-的个数"><a href="#191-位-1-的个数" class="headerlink" title="191. 位 1 的个数"></a><a href="https://leetcode-cn.com/problems/number-of-1-bits/">191. 位 1 的个数</a></h3><p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为<a href="https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F">汉明重量</a>）。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// you need to treat n as an unsigned value</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bits <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                bits<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            mask <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bits<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//作者：LeetCode</span><span class="token comment" spellcheck="true">//链接：https://leetcode-cn.com/problems/number-of-1-bits/solution/wei-1de-ge-shu-by-leetcode/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>复杂度分析</p><p>时间复杂度：O(1) 。运行时间依赖于数字 n 的位数。由于这题中 n 是一个 32 位数，所以运行时间是 O(1) 的。<br>空间复杂度：O(1)。没有使用额外空间。</p><hr><p>在二进制表示中，数字 n 中最低位的 1 总是对应 n−1 中的 0 。因此，将<br>n 和 n−1 与运算总是能把 n 中最低位的 1 变成 0 ，并保持其他位不变。<br>使用这个小技巧，代码变得非常简单。</p><p>Java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// you need to treat n as an unsigned value</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// public int hammingWeight(int n) &amp;#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>            n <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>作者：LeetCode<br>链接：<a href="https://leetcode-cn.com/problems/number-of-1-bits/solution/wei-1de-ge-shu-by-leetcode/">https://leetcode-cn.com/problems/number-of-1-bits/solution/wei-1de-ge-shu-by-leetcode/</a></p><p>二进制</p><table><thead><tr><th>N</th><th>N-1</th><th align="right">N&amp;(N-1)</th></tr></thead><tbody><tr><td>11</td><td>10</td><td align="right">10</td></tr><tr><td>10</td><td>1</td><td align="right">0</td></tr><tr><td></td><td></td><td align="right"></td></tr><tr><td>1100</td><td>1011</td><td align="right">1000</td></tr><tr><td>1000</td><td>111</td><td align="right">0</td></tr><tr><td></td><td></td><td align="right"></td></tr><tr><td>1011</td><td>1010</td><td align="right">1010</td></tr><tr><td>1010</td><td>1001</td><td align="right">1000</td></tr><tr><td>1000</td><td>111</td><td align="right">0</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1047. 删除字符串中的所有相邻重复项</title>
      <link href="/2021/03/01/gfg4i3/"/>
      <url>/2021/03/01/gfg4i3/</url>
      
        <content type="html"><![CDATA[<h4 id="1047-删除字符串中的所有相邻重复项"><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047. 删除字符串中的所有相邻重复项"></a><a href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/">1047. 删除字符串中的所有相邻重复项</a></h4><p>难度简单 122<br>给出由小写字母组成的字符串 <code>S</code>，<strong>重复项删除操作</strong>会选择两个相邻且相同的字母，并删除它们。<br>在 S 上反复执行重复项删除操作，直到无法继续删除。<br>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p><p><strong>示例：</strong><br><strong>输入：</strong>“abbaca”<br><strong>输出：</strong>“ca”<br><strong>解释：</strong><br>例如，在 “abbaca” 中，我们可以删除 “bb” 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们<strong>得到字符串 “aaca”，其中又只有 “aa” 可以执行重复项删除操作</strong>，所以最后的字符串为 “ca”。</p><pre class=" language-java"><code class="language-java">         HashSet<span class="token operator">&lt;</span>String<span class="token operator">></span> duplicates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">setLength</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            duplicates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> prevLength <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>prevLength <span class="token operator">!=</span> S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            prevLength <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String d <span class="token operator">:</span> duplicates<span class="token punctuation">)</span> S <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> S<span class="token punctuation">;</span>作者：LeetCode链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>remove<span class="token operator">-</span>all<span class="token operator">-</span>adjacent<span class="token operator">-</span>duplicates<span class="token operator">-</span>in<span class="token operator">-</span>string<span class="token operator">/</span>solution<span class="token operator">/</span>shan<span class="token operator">-</span>chu<span class="token operator">-</span>zi<span class="token operator">-</span>fu<span class="token operator">-</span>chuan<span class="token operator">-</span>zhong<span class="token operator">-</span>de<span class="token operator">-</span>suo<span class="token operator">-</span>you<span class="token operator">-</span>xiang<span class="token operator">-</span>lin<span class="token operator">-</span>zh<span class="token operator">/</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>String S<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sbLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> character <span class="token operator">:</span> S<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sbLength <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> character <span class="token operator">==</span> sb<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>sbLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sbLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sbLength<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span><span class="token punctuation">;</span>                sbLength<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/solution/shan-chu-zi-fu-chuan-zhong-de-suo-you-xiang-lin-zh/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><strong>解析</strong></p><p>我们可以用<strong>栈</strong>来维护没有重复项的字母序列：</p><ul><li><p>若当前的字母和栈顶的字母相同，则弹出栈顶的字母；</p></li><li><p>若当前的字母和栈顶的字母不同，则放入当前的字母。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 05. 替换空格</title>
      <link href="/2021/03/01/moip09/"/>
      <url>/2021/03/01/moip09/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/">剑指 Offer 05. 替换空格</a></h4><p>难度简单 76<br>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>s = “We are happy.”<br><strong>输出：</strong>“We%20are%20happy.”</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">replaceSpace</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span>length <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最大3倍</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'%'</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                array<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        String newStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newStr<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/solution/mian-shi-ti-05-ti-huan-kong-ge-by-leetcode-solutio/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>26. 删除排序数组中的重复项</title>
      <link href="/2021/03/01/sq87px/"/>
      <url>/2021/03/01/sq87px/</url>
      
        <content type="html"><![CDATA[<h4 id="26-删除排序数组中的重复项"><a href="#26-删除排序数组中的重复项" class="headerlink" title="26. 删除排序数组中的重复项"></a><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">26. 删除排序数组中的重复项</a></h4><p>难度简单 1860<br>给定一个排序数组，你需要在**<a href="http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">  原地</a>** 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须在 **<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地  </a>修改输入数组  **并在使用 O(1) 额外空间的条件下完成。</p><p><strong>示例  1:</strong><br>给定数组 <em>nums</em> = <strong>[1,1,2]</strong>,</p><p>函数应该返回新的长度 <strong>2</strong>, 并且原数组 <em>nums *的前两个元素被修改为 *</em><code>1</code>**, **<code>2</code>**。</p><p>你不需要考虑数组中超出新长度后面的元素。<br><strong>示例  2:</strong><br>给定* nums *= <strong>[0,0,1,1,1,2,2,3,3,4]</strong>,</p><p>函数应该返回新的长度 <strong>5</strong>, 并且原数组 <em>nums *的前五个元素被修改为 *</em><code>0</code><strong>, **<code>1</code></strong>, <strong><code>2</code></strong>, <strong><code>3</code></strong>, **<code>4</code>**。</p><p>你不需要考虑数组中超出新长度后面的元素。</p><p><strong>说明:</strong><br>为什么返回数值是整数，但输出的答案是数组呢?<br>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。<br>你可以想象内部操作如下:<br>// <strong>nums</strong> 是以“引用”方式传递的。也就是说，不对实参做任何拷贝<br>int len = removeDuplicates(nums);</p><p>// 在函数里修改输入数组对于调用者是可见的。<br>// 根据你的函数返回的长度, 它会打印出数组中<strong>该长度范围内</strong>的所有元素。<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p><hr><p><strong>双指针法</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/solution/shan-chu-pai-xu-shu-zu-zhong-de-zhong-fu-xiang-by-/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试题 01.06. 字符串压缩</title>
      <link href="/2021/03/01/lmzy6a/"/>
      <url>/2021/03/01/lmzy6a/</url>
      
        <content type="html"><![CDATA[<h3 id="面试题-01-06-字符串压缩"><a href="#面试题-01-06-字符串压缩" class="headerlink" title="面试题 01.06. 字符串压缩"></a><a href="https://leetcode-cn.com/problems/compress-string-lcci/">面试题 01.06. 字符串压缩</a></h3><p>字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串 aabcccccaaa 会变为 a2b1c5a3。<strong>若“压缩”后的字符串没有变短，则返回原先的字符串</strong>。你可以假设字符串中只包含大小写英文字母（a 至 z）。</p><p>示例 1:</p><p>输入：”aabcccccaaa”<br>输出：”a2b1c5a3”<br>示例 2:</p><p>输入：”abbccd”<br>输出：”abbccd”<br>解释：”abbccd”压缩后为”a1b2c2d1”，比原字符串长度更长。<br><strong>直接统计</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">compressString</span><span class="token punctuation">(</span>String S<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 空串处理</span>            <span class="token keyword">return</span> S<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        StringBuffer ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span>  cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> S<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>                ch <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后一个还没添加呢</span>        ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> S <span class="token operator">:</span> ans<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/compress-string-lcci/solution/zi-fu-chuan-ya-suo-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><hr><p><strong>双指针法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">compressString</span><span class="token punctuation">(</span>String S<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> N <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> N <span class="token operator">&amp;&amp;</span> S<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">==</span> S<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一次i=0，j=0也会执行</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>j <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        String res <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> S<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> S<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：nettee</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/compress-string-lcci/solution/shuang-zhi-zhen-fa-qu-lian-xu-zi-fu-cpython-by-net/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 28. 对称的二叉树</title>
      <link href="/2021/03/01/uvklhu/"/>
      <url>/2021/03/01/uvklhu/</url>
      
        <content type="html"><![CDATA[<h4 id="剑指-Offer-28-对称的二叉树"><a href="#剑指-Offer-28-对称的二叉树" class="headerlink" title="剑指 Offer 28. 对称的二叉树"></a><a href="https://leetcode-cn.com/problems/dui-cheng-de-er-cha-shu-lcof/">剑指 Offer 28. 对称的二叉树</a></h4><p>难度简单 134<br>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。<br>例如，二叉树  [1,2,2,3,4,4,3] 是对称的。<br><code>     1    /   \   2     2  / \   / \ 3   4 4   3</code><br>但是下面这个  [1,2,2,null,3,null,3] 则不是镜像对称的:<br><code>    1    /  \   2    2    \    \     3    3</code></p><p><strong>示例 1：</strong><br><strong>输入：</strong>root = [1,2,2,3,4,4,3]<br><strong>输出：</strong>true</p><p><strong>示例 2：</strong><br><strong>输入：</strong>root = [1,2,2,null,3,null,3]<br><strong>输出：</strong>false</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode(int x) &amp;#123; val = x; &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">helper</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//helper(root.left,root.right); //都可以</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">helper</span><span class="token punctuation">(</span>TreeNode left<span class="token punctuation">,</span>TreeNode right<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>null<span class="token operator">&amp;&amp;</span>right<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>val<span class="token operator">==</span>right<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">helper</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>left<span class="token punctuation">,</span>right<span class="token punctuation">.</span>right<span class="token punctuation">)</span>               <span class="token operator">&amp;</span><span class="token function">helper</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>right<span class="token punctuation">,</span>right<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>等价版</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token function">recur</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">recur</span><span class="token punctuation">(</span>TreeNode L<span class="token punctuation">,</span> TreeNode R<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> R <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>L <span class="token operator">==</span> null <span class="token operator">||</span> R <span class="token operator">==</span> null <span class="token operator">||</span> L<span class="token punctuation">.</span>val <span class="token operator">!=</span> R<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">recur</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>left<span class="token punctuation">,</span> R<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">recur</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>right<span class="token punctuation">,</span> R<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：jyd链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>dui<span class="token operator">-</span>cheng<span class="token operator">-</span>de<span class="token operator">-</span>er<span class="token operator">-</span>cha<span class="token operator">-</span>shu<span class="token operator">-</span>lcof<span class="token operator">/</span>solution<span class="token operator">/</span>mian<span class="token operator">-</span>shi<span class="token operator">-</span>ti<span class="token operator">-</span><span class="token number">28</span><span class="token operator">-</span>dui<span class="token operator">-</span>cheng<span class="token operator">-</span>de<span class="token operator">-</span>er<span class="token operator">-</span>cha<span class="token operator">-</span>shu<span class="token operator">-</span>di<span class="token operator">-</span>gui<span class="token operator">-</span>qing<span class="token operator">/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>202. 快乐数</title>
      <link href="/2021/03/01/nlr364/"/>
      <url>/2021/03/01/nlr364/</url>
      
        <content type="html"><![CDATA[<h4 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a><a href="https://leetcode-cn.com/problems/happy-number/">202. 快乐数</a></h4><p>难度简单 541<br>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。<br>「快乐数」定义为：</p><ul><li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li><li>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。</li><li>如果 <strong>可以变为</strong>  1，那么这个数就是快乐数。</li></ul><p>如果 <code>n</code> 是快乐数就返回 <code>true</code> ；不是，则返回 <code>false</code> 。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>19<br><strong>输出：</strong>true<br><strong>解释：</strong><br>1 + 9 = 82<br>8 + 2 = 68<br>6 + 8 = 100<br>1 + 0 + 0 = 1。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> totalSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> d <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            totalSum <span class="token operator">+=</span> d <span class="token operator">*</span> d<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> totalSum<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> seen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>seen<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            seen<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> <span class="token function">getNext</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/happy-number/solution/kuai-le-shu-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>用哈希集合检测循环</p><p>我们可以先举几个例子。我们从 7 开始。则下一个数字是 49（因为 7<em>7 =49），然后下一个数字是 97（因为 4</em>4+9*9=97）。我们可以不断重复该的过程，直到我们得到 1。因为我们得到了 7 是一个快乐数，函数应该返回 true。</p><p>再举一个例子，让我们从 116 开始。通过反复通过平方和计算下一个数字，我们最终得到 58，再继续计算之后，我们又回到 58。由于我们回到了一个已经计算过的数字，可以知道有一个循环，因此不可能达到 1。所以对于 116，函数应该返回 false。</p><p>根据我们的探索，我们猜测会有<strong>以下三种可能。</strong></p><p>最终会得到 1 最终会进入循环。<br>值会越来越大，最后接近无穷大。<br>第三个情况比较难以检测和处理。我们怎么知道它会继续变大，而不是最终得到<br>1 呢？我们可以仔细想一想，每一位数的最大数字的下一位数是多少。</p><p>Digits Largest                 Next<br>1         9                         81<br>2         99                         162<br>3         999                         243<br>4         9999                  324<br>13         9999999999999 1053<br>对于</p><p>3 位数的数字，它不可能大于 243。这意味着它要么被困在 243 以下的循环内，要么跌到 1。<br>4 位或 4 位以上的数字在每一步都会丢失一位，直到降到 3 位为止。所以我们知道，最坏的情况下，算法可能会在 243 以下的所有数字上循环，然后回到它已经到过的一个循环或者回到 1。但它不会无限期地进行下去，所以我们排除第三种选择。</p><p>即使在代码中你不需要处理第三种情况，你仍然需要理解为什么它永远不会发生，这样你就可以证明为什么你不处理它。</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/happy-number/solution/kuai-le-shu-by-leetcode-solution/">https://leetcode-cn.com/problems/happy-number/solution/kuai-le-shu-by-leetcode-solution/</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指 Offer 62. 圆圈中最后剩下的数字</title>
      <link href="/2021/03/01/un5n1b/"/>
      <url>/2021/03/01/un5n1b/</url>
      
        <content type="html"><![CDATA[<h3 id="剑指-Offer-62-圆圈中最后剩下的数字"><a href="#剑指-Offer-62-圆圈中最后剩下的数字" class="headerlink" title="剑指 Offer 62. 圆圈中最后剩下的数字"></a><a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/">剑指 Offer 62. 圆圈中最后剩下的数字</a></h3><p>难度简单 300<br>0,1,···,n-1 这 n 个数字排成一个圆圈，从数字 0 开始，每次从这个圆圈里删除第 m 个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。<br>例如，0、1、2、3、4 这 5 个数字组成一个圆圈，从数字 0 开始每次删除第 3 个数字，则删除的前 4 个数字依次是 2、0、4、1，因此最后剩下的数字是 3。</p><p><strong>示例 1：</strong><br><strong>输入:</strong> n = 5, m = 3<br>**输出: **3</p><p><strong>示例 2：</strong><br><strong>输入:</strong> n = 10, m = 17<br>**输出: **2</p><pre class=" language-java"><code class="language-java">     <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastRemaining1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            idx <span class="token operator">=</span> <span class="token punctuation">(</span>idx <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>            n<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：sweetieeyi</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/javajie-jue-yue-se-fu-huan-wen-ti-gao-su-ni-wei-sh/</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>假设当前删除的位置是 idx，下一个删除的数字的位置是 idx+m 。但是，由于把当前位置的数字删除了，后面的数字会前移一位，所以实际的下一个位置是 idx+m−1。由于数到末尾会从头继续数，所以最后取模一下，就是<br>(idx+m−1)(mod n)。</p><p>作者：sweetieeyi<br>链接：<a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/javajie-jue-yue-se-fu-huan-wen-ti-gao-su-ni-wei-sh/">https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/javajie-jue-yue-se-fu-huan-wen-ti-gao-su-ni-wei-sh/</a></p><hr><p><strong>动态规划</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastRemaining1</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最后一轮剩下2个人，所以从2开始反推</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastRemaining</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最后一轮剩下2个人，所以从2开始反推</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>动态规划解析：</p><p>状态定义： 设「i,m 问题」的解为 dp[i] ；<br>状态转移方程： 通过以下公式可从 dp[i−1] 递推得到 dp[i] ；dp[i]=(dp[i−1]+m)%i；</p><p>初始状态：「1,m 问题」的解恒为 0 ，即 dp[1]=0 ；<br>返回值： 返回「n,m 问题」的解 dp[n] ；</p><p>作者：jyd<br>链接：<a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/jian-zhi-offer-62-yuan-quan-zhong-zui-ho-dcow/">https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/jian-zhi-offer-62-yuan-quan-zhong-zui-ho-dcow/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><hr><p><strong>动态规划优化版</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastRemaining</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 最后一轮剩下2个人，所以从2开始反推</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token punctuation">(</span>ans <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> i<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：sweetieeyi</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/javajie-jue-yue-se-fu-huan-wen-ti-gao-su-ni-wei-sh/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>405. 数字转换为十六进制数</title>
      <link href="/2021/03/01/myb5o0/"/>
      <url>/2021/03/01/myb5o0/</url>
      
        <content type="html"><![CDATA[<h3 id="405-数字转换为十六进制数"><a href="#405-数字转换为十六进制数" class="headerlink" title="405. 数字转换为十六进制数"></a><a href="https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal/">405. 数字转换为十六进制数</a></h3><p>给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用 <a href="https://baike.baidu.com/item/%E8%A1%A5%E7%A0%81/6854613?fr=aladdin">补码运算</a> 方法。<br>注意:</p><ol><li>十六进制中所有字母(<code>a-f</code>)都必须是小写。</li><li>十六进制字符串中不能包含多余的前导零。如果要转化的数为 0，那么以单个字符<code>&#39;0&#39;</code>来表示；对于其他情况，十六进制字符串中的第一个字符将不会是 0 字符。</li><li>给定的数确保在 32 位有符号整数范围内。</li><li><strong>不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法。</strong></li></ol><p><strong>示例 1：</strong><br>输入:<br>26</p><p>输出:<br>“1a”</p><p><strong>示例 2：</strong><br>输入:<br>-1</p><p>输出:<br>“ffffffff”//8 位</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 0特殊处理</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hex <span class="token operator">=</span> <span class="token string">"0123456789abcdef"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 相当于映射关系</span>        StringBuilder ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-1="</span><span class="token operator">+</span>Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> num <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 取低4位的十进制值</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"temp="</span><span class="token operator">+</span>Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>hex<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 映射对应字符</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hex[temp]="</span><span class="token operator">+</span>hex<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num <span class="token operator">>>>=</span> <span class="token number">4</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 逻辑右移4位</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num >>>= 4="</span><span class="token operator">+</span>Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// while的循环条件保证了不会出现前导0</span>        <span class="token comment" spellcheck="true">// 但是从低位开始转换多了一步reverse反转</span>        <span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：zui-weng-jiu-xian</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal/solution/shu-zi-zhuan-huan-wei-shi-liu-jin-zhi-jie-fa-shou-/</span></code></pre><hr><p><strong>解题思路</strong></p><p>2 进制转化 16 进制，也就是每 4 位合成一位。<br>于是，我们可以从低位存储到高位，每次移位操作 4 位，转化为对应字符，这里采用制表。<br>当 num 为 0 时，停止移位操作，于是高位 0 项被放弃。<br>最后只要把字符串反转即可。<br>这里我们用 StringBuffer，可以更加快速。因为 String 加操作会不停创建对象。</p><p>作者：datedemo<br>链接：<a href="https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal/solution/yi-wei-cao-zuo-jian-dan-yi-dong-by-datedemo/">https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal/solution/yi-wei-cao-zuo-jian-dan-yi-dong-by-datedemo/</a></p><hr><h4 id="1"><a href="#1" class="headerlink" title="-1"></a>-1</h4><p>-1=11111111111111111111111111111111<br>-1=1111,1111,1111,1111,1111,1111,1111,1111<br>temp=1111<br>hex[temp]=f<br>num &gt;&gt;&gt;= 4=1111111111111111111111111111 //1111,1111,1111,1111,1111,1111,1111<br>temp=1111<br>hex[temp]=f<br>num &gt;&gt;&gt;= 4=111111111111111111111111<br>temp=1111<br>hex[temp]=f<br>num &gt;&gt;&gt;= 4=11111111111111111111<br>temp=1111<br>hex[temp]=f<br>num &gt;&gt;&gt;= 4=1111111111111111<br>temp=1111<br>hex[temp]=f<br>num &gt;&gt;&gt;= 4=111111111111<br>temp=1111<br>hex[temp]=f<br>num &gt;&gt;&gt;= 4=11111111<br>temp=1111<br>hex[temp]=f<br>num &gt;&gt;&gt;= 4=1111<br>temp=1111<br>hex[temp]=f<br>num &gt;&gt;&gt;= 4=0</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>9. 回文数</title>
      <link href="/2021/03/01/ycob11/"/>
      <url>/2021/03/01/ycob11/</url>
      
        <content type="html"><![CDATA[<h4 id="9-回文数"><a href="#9-回文数" class="headerlink" title="9. 回文数"></a><a href="https://leetcode-cn.com/problems/palindrome-number/">9. 回文数</a></h4><p>难度简单 1405<br>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。<br>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，<code>121</code> 是回文，而 <code>123</code> 不是。</p><p><strong>示例 1：</strong><br><strong>输入：</strong>x = 121<br><strong>输出：</strong>true</p><p><strong>示例  2：</strong><br><strong>输入：</strong>x = -121<br><strong>输出：</strong>false<br><strong>解释：</strong>从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 特殊情况：</span>        <span class="token comment" spellcheck="true">// 如上所述，当 x &lt; 0 时，x 不是回文数。</span>        <span class="token comment" spellcheck="true">// 同样地，如果数字的最后一位是 0，为了使该数字为回文，</span>        <span class="token comment" spellcheck="true">// 则其第一位数字也应该是 0</span>        <span class="token comment" spellcheck="true">// 只有 0 满足这一属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> revertedNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">></span> revertedNumber<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            revertedNumber <span class="token operator">=</span> revertedNumber <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。</span>        <span class="token comment" spellcheck="true">// 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，</span>        <span class="token comment" spellcheck="true">// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。</span>        <span class="token keyword">return</span> x <span class="token operator">==</span> revertedNumber <span class="token operator">||</span> x <span class="token operator">==</span> revertedNumber <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>作者：LeetCode<span class="token operator">-</span>Solution链接：https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>leetcode<span class="token operator">-</span>cn<span class="token punctuation">.</span>com<span class="token operator">/</span>problems<span class="token operator">/</span>palindrome<span class="token operator">-</span>number<span class="token operator">/</span>solution<span class="token operator">/</span>hui<span class="token operator">-</span>wen<span class="token operator">-</span>shu<span class="token operator">-</span>by<span class="token operator">-</span>leetcode<span class="token operator">-</span>solution<span class="token operator">/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>awesome-java-leetcode[转载]</title>
      <link href="/2021/02/28/iuopng/"/>
      <url>/2021/02/28/iuopng/</url>
      
        <content type="html"><![CDATA[<pre><code>1,10,13,15,17,20,23,25,26,28,33,38,43,44,49,50,56,57,67,68,69,71,75,7678,79,80,85,88,90,91,98,102,117,121,125,127,128,133,139,146,157,158,161168,173,200,206,208,209,210,211,215,218,221,234,235,236,238,252,253,257261,265,269,273,274,275,277,278,282,283,285,286,297,301,311,314,325,334341,377,380,398,404,410,461,477,494,523,525,534,535,543,554</code></pre><p>如果想知道更多公司 LeetCode 面试题，可以参看 <a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/Companies.md">Companies.md</a>。<br>附上镇楼诗：</p><blockquote><p>明有科举八股，今有 LeetCode。<br>八股定格式而取文采心意，LeetCode 定题目且重答案背诵。<br>美其名曰：”practice makes perfect.”<br>为何今不如古？<br>非也非也，<br>科举为国取士，LeetCode 为 Google 筛码工，各取所需也。</p></blockquote><h2 id="Easy"><a href="#Easy" class="headerlink" title="Easy"></a>Easy</h2><table><thead><tr><th>#</th><th>Title</th><th>Tag</th></tr></thead><tbody><tr><td>1</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0001/README.md">Two Sum</a></td><td>Array, Hash Table</td></tr><tr><td>7</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0007/README.md">Reverse Integer</a></td><td>Math</td></tr><tr><td>9</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0009/README.md">Palindrome Number</a></td><td>Math</td></tr><tr><td>13</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0013/README.md">Roman to Integer</a></td><td>Math, String</td></tr><tr><td>14</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0014/README.md">Longest Common Prefix</a></td><td>String</td></tr><tr><td>16.11</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/16_11/README.md">跳水板(Diving Board LCCI)</a></td><td>递归、记忆化</td></tr><tr><td>20</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0020/README.md">Valid Parentheses</a></td><td>Stack, String</td></tr><tr><td>21</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0021/README.md">Merge Two Sorted Lists</a></td><td>Linked List</td></tr><tr><td>26</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0026/README.md">Remove Duplicates from Sorted Array</a></td><td>Array, Two Pointers</td></tr><tr><td>27</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0027/README.md">Remove Element</a></td><td>Array, Two Pointers</td></tr><tr><td>28</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0028/README.md">Implement strStr()</a></td><td>Two Pointers, String</td></tr><tr><td>35</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0035/README.md">Search Insert Position</a></td><td>String</td></tr><tr><td>38</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0038/README.md">Count and Say</a></td><td>String</td></tr><tr><td>53</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0053/README.md">Maximum Subarray</a></td><td>Array, Divide and Conquer, Dynamic Programming</td></tr><tr><td>58</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0058/README.md">Length of Last Word</a></td><td>String</td></tr><tr><td>66</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0066/README.md">Plus One</a></td><td>Array, Math</td></tr><tr><td>67</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0067/README.md">Add Binary</a></td><td>Math, String</td></tr><tr><td>69</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0069/README.md">Sqrt(x)</a></td><td>Binary Search, Math</td></tr><tr><td>70</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0070/README.md">Climbing Stairs</a></td><td>Dynamic Programming</td></tr><tr><td>83</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0083/README.md">Remove Duplicates from Sorted List</a></td><td>Linked List</td></tr><tr><td>88</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0088/README.md">Merge Sorted Array</a></td><td>Array, Two Pointers</td></tr><tr><td>100</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0100/README.md">Same Tree</a></td><td>Tree, Depth-first Search</td></tr><tr><td>101</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0101/README.md">Symmetric Tree</a></td><td>Tree, Depth-first Search, Breadth-first Search</td></tr><tr><td>104</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0104/README.md">Maximum Depth of Binary Tree</a></td><td>Tree, Depth-first Search</td></tr><tr><td>107</td><td>[Binary Tree Level Order Traversal II][107]</td><td>Tree, Breadth-first Search</td></tr><tr><td>108</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0108/README.md">Convert Sorted Array to Binary Search Tree</a></td><td>Tree, Depth-first Search</td></tr><tr><td>110</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0110/README.md">Balanced Binary Tree</a></td><td>Tree, Depth-first Search</td></tr><tr><td>111</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0111/README.md">Minimum Depth of Binary Tree</a></td><td>Tree, Depth-first Search, Breadth-first Search</td></tr><tr><td>112</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0112/README.md">Path Sum</a></td><td>Tree, Depth-first Search</td></tr><tr><td>118</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0118/README.md">Pascal’s Triangle</a></td><td>Array</td></tr><tr><td>119</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0119/README.md">Pascal’s Triangle II</a></td><td>Array</td></tr><tr><td>121</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0121/README.md">Best Time to Buy and Sell Stock</a></td><td>Array, Dynamic Programmin</td></tr><tr><td>122</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0122/README.md">Best Time to Buy and Sell Stock II</a></td><td>Array, Greedy</td></tr><tr><td>543</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0543/README.md">Diameter of Binary Tree</a></td><td>Tree</td></tr></tbody></table><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><table><thead><tr><th>#</th><th>Title</th><th>Tag</th></tr></thead><tbody><tr><td>2</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0002/README.md">Add Two Numbers</a></td><td>Linked List, Math</td></tr><tr><td>3</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0003/README.md">Longest Substring Without Repeating Characters</a></td><td>Hash Table, Two Pointers, String</td></tr><tr><td>5</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0005/README.md">Longest Palindromic Substring</a></td><td>String, Dynamic Programming</td></tr><tr><td>6</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0006/README.md">ZigZag Conversion</a></td><td>String</td></tr><tr><td>8</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0008/README.md">String to Integer (atoi)</a></td><td>Math, String</td></tr><tr><td>11</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0011/README.md">Container With Most Water</a></td><td>Array, Two Pointers</td></tr><tr><td>12</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0012/README.md">Integer to Roman</a></td><td>Math, String</td></tr><tr><td>15</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0015/README.md">3Sum</a></td><td>Array, Two Pointers</td></tr><tr><td>15</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0016/README.md">3Sum Closest</a></td><td>Array, Two Pointers</td></tr><tr><td>17</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0017/README.md">Letter Combinations of a Phone Number</a></td><td>String, Backtracking</td></tr><tr><td>18</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0018/README.md">4Sum</a></td><td>Array, Hash Table, Two Pointers</td></tr><tr><td>19</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0019/README.md">Remove Nth Node From End of List</a></td><td>Linked List, Two Pointers</td></tr><tr><td>22</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0022/README.md">Generate Parentheses</a></td><td>String, Backtracking</td></tr><tr><td>24</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0024/README.md">Swap Nodes in Pairs</a></td><td>Linked List</td></tr><tr><td>29</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0029/README.md">Divide Two Integers</a></td><td>Math, Binary Search</td></tr><tr><td>33</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0033/README.md">Search in Rotated Sorted Array</a></td><td>Arrays, Binary Search</td></tr><tr><td>43</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0043/README.md">Multiply Strings</a></td><td>Math, String</td></tr><tr><td>49</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0049/README.md">Group Anagrams</a></td><td>Hash Table, String</td></tr><tr><td>50</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0050/README.md">Pow(x, n)</a></td><td>Math, Binary Search</td></tr><tr><td>56</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0056/README.md">Merge Intervals</a></td><td>Array, Sort</td></tr><tr><td>63</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0063/README.md">不同路径 II(Unique Paths II)</a></td><td>数组、动态规划</td></tr><tr><td>209</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0209/README.md">长度最小的子数组(Minimum Size Subarray Sum)</a></td><td>数组、双指针、二分查找</td></tr><tr><td>215</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0215/README.md">数组中的第 K 个最大元素(Kth Largest Element in an Array)</a></td><td>堆、分治算法</td></tr><tr><td>554</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0554/README.md">Brick Wall</a></td><td>Hash Table</td></tr><tr><td>1014</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/1014/README.md">最佳观光组合(Best Sightseeing Pair)</a></td><td>数组</td></tr></tbody></table><h2 id="Hard"><a href="#Hard" class="headerlink" title="Hard"></a>Hard</h2><table><thead><tr><th>#</th><th>Title</th><th>Tag</th></tr></thead><tbody><tr><td>4</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0004/README.md">Median of Two Sorted Arrays</a></td><td>Array, Binary Search, Divide and Conquer</td></tr><tr><td>10</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0010/README.md">Regular Expression Matching</a></td><td>String, Dynamic Programming, Backtracking</td></tr><tr><td>23</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0023/README.md">Merge k Sorted Lists</a></td><td>Linked List, Divide and Conquer, Heap</td></tr><tr><td>25</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0025/README.md">Reverse Nodes in k-Group</a></td><td>Linked List</td></tr><tr><td>30</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0030/README.md">Substring with Concatenation of All Words</a></td><td>Hash Table, Two Pointers, String</td></tr><tr><td>44</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0044/README.md">Wildcard Matching</a></td><td>String, Dynamic Programming, Backtracking, Greedy</td></tr><tr><td>57</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0057/README.md">Insert Interval</a></td><td>Array, Sort</td></tr><tr><td>68</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/0068/README.md">Text Justification</a></td><td>String</td></tr><tr><td>1028</td><td><a href="https://github.com/Blankj/awesome-java-leetcode/blob/master/note/1028/README.md">从先序遍历还原二叉树(Recover a Tree From Preorder Traversal)</a></td><td>树、深度优先搜索</td></tr></tbody></table><p>打个小广告<br>欢迎加入我的小专栏「**<a href="https://xiaozhuanlan.com/Blankj">基你太美</a>**」一起学习。</p><p>##</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>572. 另一个树的子树</title>
      <link href="/2021/02/28/usaos8/"/>
      <url>/2021/02/28/usaos8/</url>
      
        <content type="html"><![CDATA[<h4 id="572-另一个树的子树"><a href="#572-另一个树的子树" class="headerlink" title="572. 另一个树的子树"></a><a href="https://leetcode-cn.com/problems/subtree-of-another-tree/">572. 另一个树的子树</a></h4><p>难度简单 451<br>给定两个非空二叉树 <strong>s</strong> 和 <strong>t</strong>，检验 <strong>s</strong> 中是否包含和 <strong>t</strong> 具有相同结构和节点值的子树。<strong>s</strong> 的一个子树包括 <strong>s</strong> 的一个节点和这个节点的所有子孙。<strong>s</strong> 也可以看做它自身的一棵子树。<br><strong>示例 1:</strong><br>给定的树 s:<br>     3<br>    / <br>   4   5<br>  / <br> 1   2</p><p>给定的树 t：<br>   4 <br>  / <br> 1   2</p><p>返回 <strong>true</strong>，因为 t 与 s 的一个子树拥有相同的结构和节点值。<br><strong>示例 2:</strong><br>给定的树 s：<br>     3<br>    / <br>   4   5<br>  / <br> 1   2<br>    /<br>   0</p><p>给定的树 t：<br>   4<br>  / <br> 1   2</p><p>返回 <strong>false</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for a binary tree node. * public class TreeNode &amp;#123; *     int val; *     TreeNode left; *     TreeNode right; *     TreeNode() &amp;#123;&amp;#125; *     TreeNode(int val) &amp;#123; this.val = val; &amp;#125; *     TreeNode(int val, TreeNode left, TreeNode right) &amp;#123; *         this.val = val; *         this.left = left; *         this.right = right; *     &amp;#125; * &amp;#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSubtree</span><span class="token punctuation">(</span>TreeNode s<span class="token punctuation">,</span> TreeNode t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode s<span class="token punctuation">,</span> TreeNode t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//题干:检验 s 中是否包含和 t 具有相同结构和节点值的子树。</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span>TreeNode s<span class="token punctuation">,</span> TreeNode t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null <span class="token operator">||</span> t <span class="token operator">==</span> null <span class="token operator">||</span> s<span class="token punctuation">.</span>val <span class="token operator">!=</span> t<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>left<span class="token punctuation">,</span> t<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>right<span class="token punctuation">,</span> t<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 作者：LeetCode-Solution</span><span class="token comment" spellcheck="true">// 链接：https://leetcode-cn.com/problems/subtree-of-another-tree/solution/ling-yi-ge-shu-de-zi-shu-by-leetcode-solution/</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1299. 将每个元素替换为右侧最大元素</title>
      <link href="/2021/02/28/mewsci/"/>
      <url>/2021/02/28/mewsci/</url>
      
        <content type="html"><![CDATA[<h4 id="1299-将每个元素替换为右侧最大元素"><a href="#1299-将每个元素替换为右侧最大元素" class="headerlink" title="1299. 将每个元素替换为右侧最大元素"></a><a href="https://leetcode-cn.com/problems/replace-elements-with-greatest-element-on-right-side/">1299. 将每个元素替换为右侧最大元素</a></h4><p>给你一个数组  arr ，请你将每个元素用它右边最大的元素替换，如果是最后一个元素，用  -1 替换。<br>完成所有替换操作后，请你返回这个数组。<br>示例 1：<br>输入：arr = [17,18,5,4,6,1]<br>输出：[18,6,6,6,1,-1]</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">replaceElements</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span>   length<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> max<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        max<span class="token punctuation">[</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            max<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>解析</p><p><strong>逆序遍历</strong><br>本题等价于对于数组 arr 中的每个元素 arr[i]，将其替换成 arr[i + 1], arr[i + 2], …, arr[n - 1] 中的最大值。因此我们可以逆序地遍历整个数组，同时维护从数组右端到当前位置所有元素的最大值。</p><p>设 ans[i] = max(arr[i + 1], arr[i + 2], …, arr[n - 1])，那么在进行逆序遍历时，我们可以直接通过</p><p>ans[i] = max(ans[i + 1], arr[i + 1])</p><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/replace-elements-with-greatest-element-on-right-side/solution/jiang-mei-ge-yuan-su-ti-huan-wei-you-ce-zui-da-y-5/">https://leetcode-cn.com/problems/replace-elements-with-greatest-element-on-right-side/solution/jiang-mei-ge-yuan-su-ti-huan-wei-you-ce-zui-da-y-5/</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
          <category> Algorithm </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
